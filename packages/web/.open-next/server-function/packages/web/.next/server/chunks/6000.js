"use strict";
exports.id = 6000;
exports.ids = [6000];
exports.modules = {

/***/ 22741:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SSM = void 0;
const smithy_client_1 = __webpack_require__(69775);
const AddTagsToResourceCommand_1 = __webpack_require__(15907);
const AssociateOpsItemRelatedItemCommand_1 = __webpack_require__(83833);
const CancelCommandCommand_1 = __webpack_require__(32930);
const CancelMaintenanceWindowExecutionCommand_1 = __webpack_require__(23346);
const CreateActivationCommand_1 = __webpack_require__(82095);
const CreateAssociationBatchCommand_1 = __webpack_require__(53546);
const CreateAssociationCommand_1 = __webpack_require__(48056);
const CreateDocumentCommand_1 = __webpack_require__(28291);
const CreateMaintenanceWindowCommand_1 = __webpack_require__(23391);
const CreateOpsItemCommand_1 = __webpack_require__(95578);
const CreateOpsMetadataCommand_1 = __webpack_require__(84071);
const CreatePatchBaselineCommand_1 = __webpack_require__(16721);
const CreateResourceDataSyncCommand_1 = __webpack_require__(20212);
const DeleteActivationCommand_1 = __webpack_require__(7014);
const DeleteAssociationCommand_1 = __webpack_require__(47252);
const DeleteDocumentCommand_1 = __webpack_require__(84411);
const DeleteInventoryCommand_1 = __webpack_require__(73563);
const DeleteMaintenanceWindowCommand_1 = __webpack_require__(93346);
const DeleteOpsMetadataCommand_1 = __webpack_require__(68213);
const DeleteParameterCommand_1 = __webpack_require__(36765);
const DeleteParametersCommand_1 = __webpack_require__(66922);
const DeletePatchBaselineCommand_1 = __webpack_require__(50589);
const DeleteResourceDataSyncCommand_1 = __webpack_require__(65005);
const DeleteResourcePolicyCommand_1 = __webpack_require__(58714);
const DeregisterManagedInstanceCommand_1 = __webpack_require__(38607);
const DeregisterPatchBaselineForPatchGroupCommand_1 = __webpack_require__(656);
const DeregisterTargetFromMaintenanceWindowCommand_1 = __webpack_require__(59675);
const DeregisterTaskFromMaintenanceWindowCommand_1 = __webpack_require__(54634);
const DescribeActivationsCommand_1 = __webpack_require__(63259);
const DescribeAssociationCommand_1 = __webpack_require__(52958);
const DescribeAssociationExecutionsCommand_1 = __webpack_require__(1873);
const DescribeAssociationExecutionTargetsCommand_1 = __webpack_require__(16889);
const DescribeAutomationExecutionsCommand_1 = __webpack_require__(84054);
const DescribeAutomationStepExecutionsCommand_1 = __webpack_require__(50471);
const DescribeAvailablePatchesCommand_1 = __webpack_require__(95146);
const DescribeDocumentCommand_1 = __webpack_require__(3907);
const DescribeDocumentPermissionCommand_1 = __webpack_require__(55107);
const DescribeEffectiveInstanceAssociationsCommand_1 = __webpack_require__(85938);
const DescribeEffectivePatchesForPatchBaselineCommand_1 = __webpack_require__(26277);
const DescribeInstanceAssociationsStatusCommand_1 = __webpack_require__(12411);
const DescribeInstanceInformationCommand_1 = __webpack_require__(15894);
const DescribeInstancePatchesCommand_1 = __webpack_require__(89400);
const DescribeInstancePatchStatesCommand_1 = __webpack_require__(11430);
const DescribeInstancePatchStatesForPatchGroupCommand_1 = __webpack_require__(3854);
const DescribeInventoryDeletionsCommand_1 = __webpack_require__(585);
const DescribeMaintenanceWindowExecutionsCommand_1 = __webpack_require__(19925);
const DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1 = __webpack_require__(39528);
const DescribeMaintenanceWindowExecutionTasksCommand_1 = __webpack_require__(53946);
const DescribeMaintenanceWindowScheduleCommand_1 = __webpack_require__(60928);
const DescribeMaintenanceWindowsCommand_1 = __webpack_require__(57977);
const DescribeMaintenanceWindowsForTargetCommand_1 = __webpack_require__(72249);
const DescribeMaintenanceWindowTargetsCommand_1 = __webpack_require__(30048);
const DescribeMaintenanceWindowTasksCommand_1 = __webpack_require__(26665);
const DescribeOpsItemsCommand_1 = __webpack_require__(61344);
const DescribeParametersCommand_1 = __webpack_require__(6047);
const DescribePatchBaselinesCommand_1 = __webpack_require__(78214);
const DescribePatchGroupsCommand_1 = __webpack_require__(60505);
const DescribePatchGroupStateCommand_1 = __webpack_require__(13713);
const DescribePatchPropertiesCommand_1 = __webpack_require__(69513);
const DescribeSessionsCommand_1 = __webpack_require__(12826);
const DisassociateOpsItemRelatedItemCommand_1 = __webpack_require__(18828);
const GetAutomationExecutionCommand_1 = __webpack_require__(77907);
const GetCalendarStateCommand_1 = __webpack_require__(93793);
const GetCommandInvocationCommand_1 = __webpack_require__(61897);
const GetConnectionStatusCommand_1 = __webpack_require__(18509);
const GetDefaultPatchBaselineCommand_1 = __webpack_require__(21476);
const GetDeployablePatchSnapshotForInstanceCommand_1 = __webpack_require__(34489);
const GetDocumentCommand_1 = __webpack_require__(3739);
const GetInventoryCommand_1 = __webpack_require__(90803);
const GetInventorySchemaCommand_1 = __webpack_require__(87500);
const GetMaintenanceWindowCommand_1 = __webpack_require__(43235);
const GetMaintenanceWindowExecutionCommand_1 = __webpack_require__(56896);
const GetMaintenanceWindowExecutionTaskCommand_1 = __webpack_require__(99509);
const GetMaintenanceWindowExecutionTaskInvocationCommand_1 = __webpack_require__(52277);
const GetMaintenanceWindowTaskCommand_1 = __webpack_require__(69058);
const GetOpsItemCommand_1 = __webpack_require__(95307);
const GetOpsMetadataCommand_1 = __webpack_require__(53990);
const GetOpsSummaryCommand_1 = __webpack_require__(27696);
const GetParameterCommand_1 = __webpack_require__(96741);
const GetParameterHistoryCommand_1 = __webpack_require__(89414);
const GetParametersByPathCommand_1 = __webpack_require__(44446);
const GetParametersCommand_1 = __webpack_require__(32987);
const GetPatchBaselineCommand_1 = __webpack_require__(50606);
const GetPatchBaselineForPatchGroupCommand_1 = __webpack_require__(77596);
const GetResourcePoliciesCommand_1 = __webpack_require__(64306);
const GetServiceSettingCommand_1 = __webpack_require__(8990);
const LabelParameterVersionCommand_1 = __webpack_require__(41814);
const ListAssociationsCommand_1 = __webpack_require__(62636);
const ListAssociationVersionsCommand_1 = __webpack_require__(61634);
const ListCommandInvocationsCommand_1 = __webpack_require__(71481);
const ListCommandsCommand_1 = __webpack_require__(72637);
const ListComplianceItemsCommand_1 = __webpack_require__(45910);
const ListComplianceSummariesCommand_1 = __webpack_require__(34401);
const ListDocumentMetadataHistoryCommand_1 = __webpack_require__(18537);
const ListDocumentsCommand_1 = __webpack_require__(57275);
const ListDocumentVersionsCommand_1 = __webpack_require__(88029);
const ListInventoryEntriesCommand_1 = __webpack_require__(57155);
const ListOpsItemEventsCommand_1 = __webpack_require__(59144);
const ListOpsItemRelatedItemsCommand_1 = __webpack_require__(73539);
const ListOpsMetadataCommand_1 = __webpack_require__(20114);
const ListResourceComplianceSummariesCommand_1 = __webpack_require__(8602);
const ListResourceDataSyncCommand_1 = __webpack_require__(17168);
const ListTagsForResourceCommand_1 = __webpack_require__(38229);
const ModifyDocumentPermissionCommand_1 = __webpack_require__(62405);
const PutComplianceItemsCommand_1 = __webpack_require__(98273);
const PutInventoryCommand_1 = __webpack_require__(74022);
const PutParameterCommand_1 = __webpack_require__(52370);
const PutResourcePolicyCommand_1 = __webpack_require__(13708);
const RegisterDefaultPatchBaselineCommand_1 = __webpack_require__(91957);
const RegisterPatchBaselineForPatchGroupCommand_1 = __webpack_require__(51262);
const RegisterTargetWithMaintenanceWindowCommand_1 = __webpack_require__(11736);
const RegisterTaskWithMaintenanceWindowCommand_1 = __webpack_require__(11288);
const RemoveTagsFromResourceCommand_1 = __webpack_require__(7913);
const ResetServiceSettingCommand_1 = __webpack_require__(68819);
const ResumeSessionCommand_1 = __webpack_require__(25650);
const SendAutomationSignalCommand_1 = __webpack_require__(98436);
const SendCommandCommand_1 = __webpack_require__(17448);
const StartAssociationsOnceCommand_1 = __webpack_require__(2313);
const StartAutomationExecutionCommand_1 = __webpack_require__(39684);
const StartChangeRequestExecutionCommand_1 = __webpack_require__(8086);
const StartSessionCommand_1 = __webpack_require__(16288);
const StopAutomationExecutionCommand_1 = __webpack_require__(37255);
const TerminateSessionCommand_1 = __webpack_require__(18936);
const UnlabelParameterVersionCommand_1 = __webpack_require__(42139);
const UpdateAssociationCommand_1 = __webpack_require__(36767);
const UpdateAssociationStatusCommand_1 = __webpack_require__(88732);
const UpdateDocumentCommand_1 = __webpack_require__(73955);
const UpdateDocumentDefaultVersionCommand_1 = __webpack_require__(50321);
const UpdateDocumentMetadataCommand_1 = __webpack_require__(16656);
const UpdateMaintenanceWindowCommand_1 = __webpack_require__(73606);
const UpdateMaintenanceWindowTargetCommand_1 = __webpack_require__(6365);
const UpdateMaintenanceWindowTaskCommand_1 = __webpack_require__(98521);
const UpdateManagedInstanceRoleCommand_1 = __webpack_require__(40996);
const UpdateOpsItemCommand_1 = __webpack_require__(48727);
const UpdateOpsMetadataCommand_1 = __webpack_require__(805);
const UpdatePatchBaselineCommand_1 = __webpack_require__(43662);
const UpdateResourceDataSyncCommand_1 = __webpack_require__(12791);
const UpdateServiceSettingCommand_1 = __webpack_require__(61388);
const SSMClient_1 = __webpack_require__(70171);
const commands = {
    AddTagsToResourceCommand: AddTagsToResourceCommand_1.AddTagsToResourceCommand,
    AssociateOpsItemRelatedItemCommand: AssociateOpsItemRelatedItemCommand_1.AssociateOpsItemRelatedItemCommand,
    CancelCommandCommand: CancelCommandCommand_1.CancelCommandCommand,
    CancelMaintenanceWindowExecutionCommand: CancelMaintenanceWindowExecutionCommand_1.CancelMaintenanceWindowExecutionCommand,
    CreateActivationCommand: CreateActivationCommand_1.CreateActivationCommand,
    CreateAssociationCommand: CreateAssociationCommand_1.CreateAssociationCommand,
    CreateAssociationBatchCommand: CreateAssociationBatchCommand_1.CreateAssociationBatchCommand,
    CreateDocumentCommand: CreateDocumentCommand_1.CreateDocumentCommand,
    CreateMaintenanceWindowCommand: CreateMaintenanceWindowCommand_1.CreateMaintenanceWindowCommand,
    CreateOpsItemCommand: CreateOpsItemCommand_1.CreateOpsItemCommand,
    CreateOpsMetadataCommand: CreateOpsMetadataCommand_1.CreateOpsMetadataCommand,
    CreatePatchBaselineCommand: CreatePatchBaselineCommand_1.CreatePatchBaselineCommand,
    CreateResourceDataSyncCommand: CreateResourceDataSyncCommand_1.CreateResourceDataSyncCommand,
    DeleteActivationCommand: DeleteActivationCommand_1.DeleteActivationCommand,
    DeleteAssociationCommand: DeleteAssociationCommand_1.DeleteAssociationCommand,
    DeleteDocumentCommand: DeleteDocumentCommand_1.DeleteDocumentCommand,
    DeleteInventoryCommand: DeleteInventoryCommand_1.DeleteInventoryCommand,
    DeleteMaintenanceWindowCommand: DeleteMaintenanceWindowCommand_1.DeleteMaintenanceWindowCommand,
    DeleteOpsMetadataCommand: DeleteOpsMetadataCommand_1.DeleteOpsMetadataCommand,
    DeleteParameterCommand: DeleteParameterCommand_1.DeleteParameterCommand,
    DeleteParametersCommand: DeleteParametersCommand_1.DeleteParametersCommand,
    DeletePatchBaselineCommand: DeletePatchBaselineCommand_1.DeletePatchBaselineCommand,
    DeleteResourceDataSyncCommand: DeleteResourceDataSyncCommand_1.DeleteResourceDataSyncCommand,
    DeleteResourcePolicyCommand: DeleteResourcePolicyCommand_1.DeleteResourcePolicyCommand,
    DeregisterManagedInstanceCommand: DeregisterManagedInstanceCommand_1.DeregisterManagedInstanceCommand,
    DeregisterPatchBaselineForPatchGroupCommand: DeregisterPatchBaselineForPatchGroupCommand_1.DeregisterPatchBaselineForPatchGroupCommand,
    DeregisterTargetFromMaintenanceWindowCommand: DeregisterTargetFromMaintenanceWindowCommand_1.DeregisterTargetFromMaintenanceWindowCommand,
    DeregisterTaskFromMaintenanceWindowCommand: DeregisterTaskFromMaintenanceWindowCommand_1.DeregisterTaskFromMaintenanceWindowCommand,
    DescribeActivationsCommand: DescribeActivationsCommand_1.DescribeActivationsCommand,
    DescribeAssociationCommand: DescribeAssociationCommand_1.DescribeAssociationCommand,
    DescribeAssociationExecutionsCommand: DescribeAssociationExecutionsCommand_1.DescribeAssociationExecutionsCommand,
    DescribeAssociationExecutionTargetsCommand: DescribeAssociationExecutionTargetsCommand_1.DescribeAssociationExecutionTargetsCommand,
    DescribeAutomationExecutionsCommand: DescribeAutomationExecutionsCommand_1.DescribeAutomationExecutionsCommand,
    DescribeAutomationStepExecutionsCommand: DescribeAutomationStepExecutionsCommand_1.DescribeAutomationStepExecutionsCommand,
    DescribeAvailablePatchesCommand: DescribeAvailablePatchesCommand_1.DescribeAvailablePatchesCommand,
    DescribeDocumentCommand: DescribeDocumentCommand_1.DescribeDocumentCommand,
    DescribeDocumentPermissionCommand: DescribeDocumentPermissionCommand_1.DescribeDocumentPermissionCommand,
    DescribeEffectiveInstanceAssociationsCommand: DescribeEffectiveInstanceAssociationsCommand_1.DescribeEffectiveInstanceAssociationsCommand,
    DescribeEffectivePatchesForPatchBaselineCommand: DescribeEffectivePatchesForPatchBaselineCommand_1.DescribeEffectivePatchesForPatchBaselineCommand,
    DescribeInstanceAssociationsStatusCommand: DescribeInstanceAssociationsStatusCommand_1.DescribeInstanceAssociationsStatusCommand,
    DescribeInstanceInformationCommand: DescribeInstanceInformationCommand_1.DescribeInstanceInformationCommand,
    DescribeInstancePatchesCommand: DescribeInstancePatchesCommand_1.DescribeInstancePatchesCommand,
    DescribeInstancePatchStatesCommand: DescribeInstancePatchStatesCommand_1.DescribeInstancePatchStatesCommand,
    DescribeInstancePatchStatesForPatchGroupCommand: DescribeInstancePatchStatesForPatchGroupCommand_1.DescribeInstancePatchStatesForPatchGroupCommand,
    DescribeInventoryDeletionsCommand: DescribeInventoryDeletionsCommand_1.DescribeInventoryDeletionsCommand,
    DescribeMaintenanceWindowExecutionsCommand: DescribeMaintenanceWindowExecutionsCommand_1.DescribeMaintenanceWindowExecutionsCommand,
    DescribeMaintenanceWindowExecutionTaskInvocationsCommand: DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1.DescribeMaintenanceWindowExecutionTaskInvocationsCommand,
    DescribeMaintenanceWindowExecutionTasksCommand: DescribeMaintenanceWindowExecutionTasksCommand_1.DescribeMaintenanceWindowExecutionTasksCommand,
    DescribeMaintenanceWindowsCommand: DescribeMaintenanceWindowsCommand_1.DescribeMaintenanceWindowsCommand,
    DescribeMaintenanceWindowScheduleCommand: DescribeMaintenanceWindowScheduleCommand_1.DescribeMaintenanceWindowScheduleCommand,
    DescribeMaintenanceWindowsForTargetCommand: DescribeMaintenanceWindowsForTargetCommand_1.DescribeMaintenanceWindowsForTargetCommand,
    DescribeMaintenanceWindowTargetsCommand: DescribeMaintenanceWindowTargetsCommand_1.DescribeMaintenanceWindowTargetsCommand,
    DescribeMaintenanceWindowTasksCommand: DescribeMaintenanceWindowTasksCommand_1.DescribeMaintenanceWindowTasksCommand,
    DescribeOpsItemsCommand: DescribeOpsItemsCommand_1.DescribeOpsItemsCommand,
    DescribeParametersCommand: DescribeParametersCommand_1.DescribeParametersCommand,
    DescribePatchBaselinesCommand: DescribePatchBaselinesCommand_1.DescribePatchBaselinesCommand,
    DescribePatchGroupsCommand: DescribePatchGroupsCommand_1.DescribePatchGroupsCommand,
    DescribePatchGroupStateCommand: DescribePatchGroupStateCommand_1.DescribePatchGroupStateCommand,
    DescribePatchPropertiesCommand: DescribePatchPropertiesCommand_1.DescribePatchPropertiesCommand,
    DescribeSessionsCommand: DescribeSessionsCommand_1.DescribeSessionsCommand,
    DisassociateOpsItemRelatedItemCommand: DisassociateOpsItemRelatedItemCommand_1.DisassociateOpsItemRelatedItemCommand,
    GetAutomationExecutionCommand: GetAutomationExecutionCommand_1.GetAutomationExecutionCommand,
    GetCalendarStateCommand: GetCalendarStateCommand_1.GetCalendarStateCommand,
    GetCommandInvocationCommand: GetCommandInvocationCommand_1.GetCommandInvocationCommand,
    GetConnectionStatusCommand: GetConnectionStatusCommand_1.GetConnectionStatusCommand,
    GetDefaultPatchBaselineCommand: GetDefaultPatchBaselineCommand_1.GetDefaultPatchBaselineCommand,
    GetDeployablePatchSnapshotForInstanceCommand: GetDeployablePatchSnapshotForInstanceCommand_1.GetDeployablePatchSnapshotForInstanceCommand,
    GetDocumentCommand: GetDocumentCommand_1.GetDocumentCommand,
    GetInventoryCommand: GetInventoryCommand_1.GetInventoryCommand,
    GetInventorySchemaCommand: GetInventorySchemaCommand_1.GetInventorySchemaCommand,
    GetMaintenanceWindowCommand: GetMaintenanceWindowCommand_1.GetMaintenanceWindowCommand,
    GetMaintenanceWindowExecutionCommand: GetMaintenanceWindowExecutionCommand_1.GetMaintenanceWindowExecutionCommand,
    GetMaintenanceWindowExecutionTaskCommand: GetMaintenanceWindowExecutionTaskCommand_1.GetMaintenanceWindowExecutionTaskCommand,
    GetMaintenanceWindowExecutionTaskInvocationCommand: GetMaintenanceWindowExecutionTaskInvocationCommand_1.GetMaintenanceWindowExecutionTaskInvocationCommand,
    GetMaintenanceWindowTaskCommand: GetMaintenanceWindowTaskCommand_1.GetMaintenanceWindowTaskCommand,
    GetOpsItemCommand: GetOpsItemCommand_1.GetOpsItemCommand,
    GetOpsMetadataCommand: GetOpsMetadataCommand_1.GetOpsMetadataCommand,
    GetOpsSummaryCommand: GetOpsSummaryCommand_1.GetOpsSummaryCommand,
    GetParameterCommand: GetParameterCommand_1.GetParameterCommand,
    GetParameterHistoryCommand: GetParameterHistoryCommand_1.GetParameterHistoryCommand,
    GetParametersCommand: GetParametersCommand_1.GetParametersCommand,
    GetParametersByPathCommand: GetParametersByPathCommand_1.GetParametersByPathCommand,
    GetPatchBaselineCommand: GetPatchBaselineCommand_1.GetPatchBaselineCommand,
    GetPatchBaselineForPatchGroupCommand: GetPatchBaselineForPatchGroupCommand_1.GetPatchBaselineForPatchGroupCommand,
    GetResourcePoliciesCommand: GetResourcePoliciesCommand_1.GetResourcePoliciesCommand,
    GetServiceSettingCommand: GetServiceSettingCommand_1.GetServiceSettingCommand,
    LabelParameterVersionCommand: LabelParameterVersionCommand_1.LabelParameterVersionCommand,
    ListAssociationsCommand: ListAssociationsCommand_1.ListAssociationsCommand,
    ListAssociationVersionsCommand: ListAssociationVersionsCommand_1.ListAssociationVersionsCommand,
    ListCommandInvocationsCommand: ListCommandInvocationsCommand_1.ListCommandInvocationsCommand,
    ListCommandsCommand: ListCommandsCommand_1.ListCommandsCommand,
    ListComplianceItemsCommand: ListComplianceItemsCommand_1.ListComplianceItemsCommand,
    ListComplianceSummariesCommand: ListComplianceSummariesCommand_1.ListComplianceSummariesCommand,
    ListDocumentMetadataHistoryCommand: ListDocumentMetadataHistoryCommand_1.ListDocumentMetadataHistoryCommand,
    ListDocumentsCommand: ListDocumentsCommand_1.ListDocumentsCommand,
    ListDocumentVersionsCommand: ListDocumentVersionsCommand_1.ListDocumentVersionsCommand,
    ListInventoryEntriesCommand: ListInventoryEntriesCommand_1.ListInventoryEntriesCommand,
    ListOpsItemEventsCommand: ListOpsItemEventsCommand_1.ListOpsItemEventsCommand,
    ListOpsItemRelatedItemsCommand: ListOpsItemRelatedItemsCommand_1.ListOpsItemRelatedItemsCommand,
    ListOpsMetadataCommand: ListOpsMetadataCommand_1.ListOpsMetadataCommand,
    ListResourceComplianceSummariesCommand: ListResourceComplianceSummariesCommand_1.ListResourceComplianceSummariesCommand,
    ListResourceDataSyncCommand: ListResourceDataSyncCommand_1.ListResourceDataSyncCommand,
    ListTagsForResourceCommand: ListTagsForResourceCommand_1.ListTagsForResourceCommand,
    ModifyDocumentPermissionCommand: ModifyDocumentPermissionCommand_1.ModifyDocumentPermissionCommand,
    PutComplianceItemsCommand: PutComplianceItemsCommand_1.PutComplianceItemsCommand,
    PutInventoryCommand: PutInventoryCommand_1.PutInventoryCommand,
    PutParameterCommand: PutParameterCommand_1.PutParameterCommand,
    PutResourcePolicyCommand: PutResourcePolicyCommand_1.PutResourcePolicyCommand,
    RegisterDefaultPatchBaselineCommand: RegisterDefaultPatchBaselineCommand_1.RegisterDefaultPatchBaselineCommand,
    RegisterPatchBaselineForPatchGroupCommand: RegisterPatchBaselineForPatchGroupCommand_1.RegisterPatchBaselineForPatchGroupCommand,
    RegisterTargetWithMaintenanceWindowCommand: RegisterTargetWithMaintenanceWindowCommand_1.RegisterTargetWithMaintenanceWindowCommand,
    RegisterTaskWithMaintenanceWindowCommand: RegisterTaskWithMaintenanceWindowCommand_1.RegisterTaskWithMaintenanceWindowCommand,
    RemoveTagsFromResourceCommand: RemoveTagsFromResourceCommand_1.RemoveTagsFromResourceCommand,
    ResetServiceSettingCommand: ResetServiceSettingCommand_1.ResetServiceSettingCommand,
    ResumeSessionCommand: ResumeSessionCommand_1.ResumeSessionCommand,
    SendAutomationSignalCommand: SendAutomationSignalCommand_1.SendAutomationSignalCommand,
    SendCommandCommand: SendCommandCommand_1.SendCommandCommand,
    StartAssociationsOnceCommand: StartAssociationsOnceCommand_1.StartAssociationsOnceCommand,
    StartAutomationExecutionCommand: StartAutomationExecutionCommand_1.StartAutomationExecutionCommand,
    StartChangeRequestExecutionCommand: StartChangeRequestExecutionCommand_1.StartChangeRequestExecutionCommand,
    StartSessionCommand: StartSessionCommand_1.StartSessionCommand,
    StopAutomationExecutionCommand: StopAutomationExecutionCommand_1.StopAutomationExecutionCommand,
    TerminateSessionCommand: TerminateSessionCommand_1.TerminateSessionCommand,
    UnlabelParameterVersionCommand: UnlabelParameterVersionCommand_1.UnlabelParameterVersionCommand,
    UpdateAssociationCommand: UpdateAssociationCommand_1.UpdateAssociationCommand,
    UpdateAssociationStatusCommand: UpdateAssociationStatusCommand_1.UpdateAssociationStatusCommand,
    UpdateDocumentCommand: UpdateDocumentCommand_1.UpdateDocumentCommand,
    UpdateDocumentDefaultVersionCommand: UpdateDocumentDefaultVersionCommand_1.UpdateDocumentDefaultVersionCommand,
    UpdateDocumentMetadataCommand: UpdateDocumentMetadataCommand_1.UpdateDocumentMetadataCommand,
    UpdateMaintenanceWindowCommand: UpdateMaintenanceWindowCommand_1.UpdateMaintenanceWindowCommand,
    UpdateMaintenanceWindowTargetCommand: UpdateMaintenanceWindowTargetCommand_1.UpdateMaintenanceWindowTargetCommand,
    UpdateMaintenanceWindowTaskCommand: UpdateMaintenanceWindowTaskCommand_1.UpdateMaintenanceWindowTaskCommand,
    UpdateManagedInstanceRoleCommand: UpdateManagedInstanceRoleCommand_1.UpdateManagedInstanceRoleCommand,
    UpdateOpsItemCommand: UpdateOpsItemCommand_1.UpdateOpsItemCommand,
    UpdateOpsMetadataCommand: UpdateOpsMetadataCommand_1.UpdateOpsMetadataCommand,
    UpdatePatchBaselineCommand: UpdatePatchBaselineCommand_1.UpdatePatchBaselineCommand,
    UpdateResourceDataSyncCommand: UpdateResourceDataSyncCommand_1.UpdateResourceDataSyncCommand,
    UpdateServiceSettingCommand: UpdateServiceSettingCommand_1.UpdateServiceSettingCommand
};
class SSM extends SSMClient_1.SSMClient {
}
exports.SSM = SSM;
(0, smithy_client_1.createAggregatedClient)(commands, SSM);


/***/ }),

/***/ 70171:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SSMClient = exports.__Client = void 0;
const middleware_host_header_1 = __webpack_require__(66906);
const middleware_logger_1 = __webpack_require__(75202);
const middleware_recursion_detection_1 = __webpack_require__(71592);
const middleware_signing_1 = __webpack_require__(23898);
const middleware_user_agent_1 = __webpack_require__(85082);
const config_resolver_1 = __webpack_require__(86620);
const middleware_content_length_1 = __webpack_require__(44732);
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_retry_1 = __webpack_require__(23120);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "__Client", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Client;
    }
}));
const EndpointParameters_1 = __webpack_require__(13578);
const runtimeConfig_1 = __webpack_require__(30762);
class SSMClient extends smithy_client_1.Client {
    constructor(configuration){
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
    }
    destroy() {
        super.destroy();
    }
}
exports.SSMClient = SSMClient;


/***/ }),

/***/ 15907:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.AddTagsToResourceCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class AddTagsToResourceCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AddTagsToResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "AddTagsToResourceCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_AddTagsToResourceCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_AddTagsToResourceCommand)(output, context);
    }
}
exports.AddTagsToResourceCommand = AddTagsToResourceCommand;


/***/ }),

/***/ 83833:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.AssociateOpsItemRelatedItemCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class AssociateOpsItemRelatedItemCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssociateOpsItemRelatedItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "AssociateOpsItemRelatedItemCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_AssociateOpsItemRelatedItemCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_AssociateOpsItemRelatedItemCommand)(output, context);
    }
}
exports.AssociateOpsItemRelatedItemCommand = AssociateOpsItemRelatedItemCommand;


/***/ }),

/***/ 32930:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.CancelCommandCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class CancelCommandCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CancelCommandCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CancelCommandCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_CancelCommandCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CancelCommandCommand)(output, context);
    }
}
exports.CancelCommandCommand = CancelCommandCommand;


/***/ }),

/***/ 23346:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.CancelMaintenanceWindowExecutionCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class CancelMaintenanceWindowExecutionCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CancelMaintenanceWindowExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CancelMaintenanceWindowExecutionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_CancelMaintenanceWindowExecutionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CancelMaintenanceWindowExecutionCommand)(output, context);
    }
}
exports.CancelMaintenanceWindowExecutionCommand = CancelMaintenanceWindowExecutionCommand;


/***/ }),

/***/ 82095:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.CreateActivationCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class CreateActivationCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateActivationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateActivationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreateActivationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreateActivationCommand)(output, context);
    }
}
exports.CreateActivationCommand = CreateActivationCommand;


/***/ }),

/***/ 53546:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.CreateAssociationBatchCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(26130);
const Aws_json1_1_1 = __webpack_require__(2490);
class CreateAssociationBatchCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateAssociationBatchCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateAssociationBatchCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_0_1.CreateAssociationBatchRequestFilterSensitiveLog,
            outputFilterSensitiveLog: models_0_1.CreateAssociationBatchResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreateAssociationBatchCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreateAssociationBatchCommand)(output, context);
    }
}
exports.CreateAssociationBatchCommand = CreateAssociationBatchCommand;


/***/ }),

/***/ 48056:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.CreateAssociationCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(26130);
const Aws_json1_1_1 = __webpack_require__(2490);
class CreateAssociationCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateAssociationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateAssociationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_0_1.CreateAssociationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: models_0_1.CreateAssociationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreateAssociationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreateAssociationCommand)(output, context);
    }
}
exports.CreateAssociationCommand = CreateAssociationCommand;


/***/ }),

/***/ 28291:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.CreateDocumentCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class CreateDocumentCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateDocumentCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreateDocumentCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreateDocumentCommand)(output, context);
    }
}
exports.CreateDocumentCommand = CreateDocumentCommand;


/***/ }),

/***/ 23391:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.CreateMaintenanceWindowCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(26130);
const Aws_json1_1_1 = __webpack_require__(2490);
class CreateMaintenanceWindowCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateMaintenanceWindowCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_0_1.CreateMaintenanceWindowRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreateMaintenanceWindowCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreateMaintenanceWindowCommand)(output, context);
    }
}
exports.CreateMaintenanceWindowCommand = CreateMaintenanceWindowCommand;


/***/ }),

/***/ 95578:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.CreateOpsItemCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class CreateOpsItemCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateOpsItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateOpsItemCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreateOpsItemCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreateOpsItemCommand)(output, context);
    }
}
exports.CreateOpsItemCommand = CreateOpsItemCommand;


/***/ }),

/***/ 84071:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.CreateOpsMetadataCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class CreateOpsMetadataCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateOpsMetadataCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreateOpsMetadataCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreateOpsMetadataCommand)(output, context);
    }
}
exports.CreateOpsMetadataCommand = CreateOpsMetadataCommand;


/***/ }),

/***/ 16721:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.CreatePatchBaselineCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(26130);
const Aws_json1_1_1 = __webpack_require__(2490);
class CreatePatchBaselineCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreatePatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreatePatchBaselineCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_0_1.CreatePatchBaselineRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreatePatchBaselineCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreatePatchBaselineCommand)(output, context);
    }
}
exports.CreatePatchBaselineCommand = CreatePatchBaselineCommand;


/***/ }),

/***/ 20212:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.CreateResourceDataSyncCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class CreateResourceDataSyncCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateResourceDataSyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateResourceDataSyncCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreateResourceDataSyncCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreateResourceDataSyncCommand)(output, context);
    }
}
exports.CreateResourceDataSyncCommand = CreateResourceDataSyncCommand;


/***/ }),

/***/ 7014:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DeleteActivationCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DeleteActivationCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteActivationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteActivationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteActivationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteActivationCommand)(output, context);
    }
}
exports.DeleteActivationCommand = DeleteActivationCommand;


/***/ }),

/***/ 47252:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DeleteAssociationCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DeleteAssociationCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteAssociationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteAssociationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteAssociationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteAssociationCommand)(output, context);
    }
}
exports.DeleteAssociationCommand = DeleteAssociationCommand;


/***/ }),

/***/ 84411:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DeleteDocumentCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DeleteDocumentCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteDocumentCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteDocumentCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteDocumentCommand)(output, context);
    }
}
exports.DeleteDocumentCommand = DeleteDocumentCommand;


/***/ }),

/***/ 73563:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DeleteInventoryCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DeleteInventoryCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteInventoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteInventoryCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteInventoryCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteInventoryCommand)(output, context);
    }
}
exports.DeleteInventoryCommand = DeleteInventoryCommand;


/***/ }),

/***/ 93346:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DeleteMaintenanceWindowCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DeleteMaintenanceWindowCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteMaintenanceWindowCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteMaintenanceWindowCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteMaintenanceWindowCommand)(output, context);
    }
}
exports.DeleteMaintenanceWindowCommand = DeleteMaintenanceWindowCommand;


/***/ }),

/***/ 68213:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DeleteOpsMetadataCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DeleteOpsMetadataCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteOpsMetadataCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteOpsMetadataCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteOpsMetadataCommand)(output, context);
    }
}
exports.DeleteOpsMetadataCommand = DeleteOpsMetadataCommand;


/***/ }),

/***/ 36765:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DeleteParameterCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DeleteParameterCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteParameterCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteParameterCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteParameterCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteParameterCommand)(output, context);
    }
}
exports.DeleteParameterCommand = DeleteParameterCommand;


/***/ }),

/***/ 66922:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DeleteParametersCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DeleteParametersCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteParametersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteParametersCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteParametersCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteParametersCommand)(output, context);
    }
}
exports.DeleteParametersCommand = DeleteParametersCommand;


/***/ }),

/***/ 50589:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DeletePatchBaselineCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DeletePatchBaselineCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeletePatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeletePatchBaselineCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeletePatchBaselineCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeletePatchBaselineCommand)(output, context);
    }
}
exports.DeletePatchBaselineCommand = DeletePatchBaselineCommand;


/***/ }),

/***/ 65005:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DeleteResourceDataSyncCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DeleteResourceDataSyncCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteResourceDataSyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteResourceDataSyncCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteResourceDataSyncCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteResourceDataSyncCommand)(output, context);
    }
}
exports.DeleteResourceDataSyncCommand = DeleteResourceDataSyncCommand;


/***/ }),

/***/ 58714:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DeleteResourcePolicyCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DeleteResourcePolicyCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteResourcePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteResourcePolicyCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteResourcePolicyCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteResourcePolicyCommand)(output, context);
    }
}
exports.DeleteResourcePolicyCommand = DeleteResourcePolicyCommand;


/***/ }),

/***/ 38607:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DeregisterManagedInstanceCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DeregisterManagedInstanceCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeregisterManagedInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterManagedInstanceCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeregisterManagedInstanceCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeregisterManagedInstanceCommand)(output, context);
    }
}
exports.DeregisterManagedInstanceCommand = DeregisterManagedInstanceCommand;


/***/ }),

/***/ 656:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DeregisterPatchBaselineForPatchGroupCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DeregisterPatchBaselineForPatchGroupCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeregisterPatchBaselineForPatchGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterPatchBaselineForPatchGroupCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeregisterPatchBaselineForPatchGroupCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeregisterPatchBaselineForPatchGroupCommand)(output, context);
    }
}
exports.DeregisterPatchBaselineForPatchGroupCommand = DeregisterPatchBaselineForPatchGroupCommand;


/***/ }),

/***/ 59675:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DeregisterTargetFromMaintenanceWindowCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DeregisterTargetFromMaintenanceWindowCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeregisterTargetFromMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterTargetFromMaintenanceWindowCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeregisterTargetFromMaintenanceWindowCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeregisterTargetFromMaintenanceWindowCommand)(output, context);
    }
}
exports.DeregisterTargetFromMaintenanceWindowCommand = DeregisterTargetFromMaintenanceWindowCommand;


/***/ }),

/***/ 54634:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DeregisterTaskFromMaintenanceWindowCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DeregisterTaskFromMaintenanceWindowCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeregisterTaskFromMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterTaskFromMaintenanceWindowCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeregisterTaskFromMaintenanceWindowCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeregisterTaskFromMaintenanceWindowCommand)(output, context);
    }
}
exports.DeregisterTaskFromMaintenanceWindowCommand = DeregisterTaskFromMaintenanceWindowCommand;


/***/ }),

/***/ 63259:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeActivationsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeActivationsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeActivationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeActivationsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeActivationsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeActivationsCommand)(output, context);
    }
}
exports.DescribeActivationsCommand = DescribeActivationsCommand;


/***/ }),

/***/ 52958:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeAssociationCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(26130);
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeAssociationCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAssociationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAssociationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_0_1.DescribeAssociationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeAssociationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeAssociationCommand)(output, context);
    }
}
exports.DescribeAssociationCommand = DescribeAssociationCommand;


/***/ }),

/***/ 16889:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeAssociationExecutionTargetsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeAssociationExecutionTargetsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAssociationExecutionTargetsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAssociationExecutionTargetsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeAssociationExecutionTargetsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeAssociationExecutionTargetsCommand)(output, context);
    }
}
exports.DescribeAssociationExecutionTargetsCommand = DescribeAssociationExecutionTargetsCommand;


/***/ }),

/***/ 1873:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeAssociationExecutionsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeAssociationExecutionsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAssociationExecutionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAssociationExecutionsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeAssociationExecutionsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeAssociationExecutionsCommand)(output, context);
    }
}
exports.DescribeAssociationExecutionsCommand = DescribeAssociationExecutionsCommand;


/***/ }),

/***/ 84054:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeAutomationExecutionsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeAutomationExecutionsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAutomationExecutionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAutomationExecutionsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeAutomationExecutionsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeAutomationExecutionsCommand)(output, context);
    }
}
exports.DescribeAutomationExecutionsCommand = DescribeAutomationExecutionsCommand;


/***/ }),

/***/ 50471:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeAutomationStepExecutionsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeAutomationStepExecutionsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAutomationStepExecutionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAutomationStepExecutionsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeAutomationStepExecutionsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeAutomationStepExecutionsCommand)(output, context);
    }
}
exports.DescribeAutomationStepExecutionsCommand = DescribeAutomationStepExecutionsCommand;


/***/ }),

/***/ 95146:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeAvailablePatchesCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeAvailablePatchesCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAvailablePatchesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAvailablePatchesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeAvailablePatchesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeAvailablePatchesCommand)(output, context);
    }
}
exports.DescribeAvailablePatchesCommand = DescribeAvailablePatchesCommand;


/***/ }),

/***/ 3907:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeDocumentCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeDocumentCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeDocumentCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeDocumentCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeDocumentCommand)(output, context);
    }
}
exports.DescribeDocumentCommand = DescribeDocumentCommand;


/***/ }),

/***/ 55107:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeDocumentPermissionCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeDocumentPermissionCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeDocumentPermissionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeDocumentPermissionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeDocumentPermissionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeDocumentPermissionCommand)(output, context);
    }
}
exports.DescribeDocumentPermissionCommand = DescribeDocumentPermissionCommand;


/***/ }),

/***/ 85938:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeEffectiveInstanceAssociationsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeEffectiveInstanceAssociationsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeEffectiveInstanceAssociationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeEffectiveInstanceAssociationsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeEffectiveInstanceAssociationsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeEffectiveInstanceAssociationsCommand)(output, context);
    }
}
exports.DescribeEffectiveInstanceAssociationsCommand = DescribeEffectiveInstanceAssociationsCommand;


/***/ }),

/***/ 26277:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeEffectivePatchesForPatchBaselineCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeEffectivePatchesForPatchBaselineCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeEffectivePatchesForPatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeEffectivePatchesForPatchBaselineCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeEffectivePatchesForPatchBaselineCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeEffectivePatchesForPatchBaselineCommand)(output, context);
    }
}
exports.DescribeEffectivePatchesForPatchBaselineCommand = DescribeEffectivePatchesForPatchBaselineCommand;


/***/ }),

/***/ 12411:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeInstanceAssociationsStatusCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeInstanceAssociationsStatusCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInstanceAssociationsStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstanceAssociationsStatusCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeInstanceAssociationsStatusCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeInstanceAssociationsStatusCommand)(output, context);
    }
}
exports.DescribeInstanceAssociationsStatusCommand = DescribeInstanceAssociationsStatusCommand;


/***/ }),

/***/ 15894:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeInstanceInformationCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeInstanceInformationCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInstanceInformationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstanceInformationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeInstanceInformationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeInstanceInformationCommand)(output, context);
    }
}
exports.DescribeInstanceInformationCommand = DescribeInstanceInformationCommand;


/***/ }),

/***/ 11430:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeInstancePatchStatesCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(26130);
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeInstancePatchStatesCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInstancePatchStatesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstancePatchStatesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_0_1.DescribeInstancePatchStatesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeInstancePatchStatesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeInstancePatchStatesCommand)(output, context);
    }
}
exports.DescribeInstancePatchStatesCommand = DescribeInstancePatchStatesCommand;


/***/ }),

/***/ 3854:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeInstancePatchStatesForPatchGroupCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(26130);
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeInstancePatchStatesForPatchGroupCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInstancePatchStatesForPatchGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstancePatchStatesForPatchGroupCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_0_1.DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeInstancePatchStatesForPatchGroupCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeInstancePatchStatesForPatchGroupCommand)(output, context);
    }
}
exports.DescribeInstancePatchStatesForPatchGroupCommand = DescribeInstancePatchStatesForPatchGroupCommand;


/***/ }),

/***/ 89400:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeInstancePatchesCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeInstancePatchesCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInstancePatchesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstancePatchesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeInstancePatchesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeInstancePatchesCommand)(output, context);
    }
}
exports.DescribeInstancePatchesCommand = DescribeInstancePatchesCommand;


/***/ }),

/***/ 585:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeInventoryDeletionsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeInventoryDeletionsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInventoryDeletionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInventoryDeletionsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeInventoryDeletionsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeInventoryDeletionsCommand)(output, context);
    }
}
exports.DescribeInventoryDeletionsCommand = DescribeInventoryDeletionsCommand;


/***/ }),

/***/ 39528:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeMaintenanceWindowExecutionTaskInvocationsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(26130);
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeMaintenanceWindowExecutionTaskInvocationsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowExecutionTaskInvocationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowExecutionTaskInvocationsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeMaintenanceWindowExecutionTaskInvocationsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeMaintenanceWindowExecutionTaskInvocationsCommand)(output, context);
    }
}
exports.DescribeMaintenanceWindowExecutionTaskInvocationsCommand = DescribeMaintenanceWindowExecutionTaskInvocationsCommand;


/***/ }),

/***/ 53946:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeMaintenanceWindowExecutionTasksCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeMaintenanceWindowExecutionTasksCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowExecutionTasksCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowExecutionTasksCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeMaintenanceWindowExecutionTasksCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeMaintenanceWindowExecutionTasksCommand)(output, context);
    }
}
exports.DescribeMaintenanceWindowExecutionTasksCommand = DescribeMaintenanceWindowExecutionTasksCommand;


/***/ }),

/***/ 19925:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeMaintenanceWindowExecutionsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeMaintenanceWindowExecutionsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowExecutionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowExecutionsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeMaintenanceWindowExecutionsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeMaintenanceWindowExecutionsCommand)(output, context);
    }
}
exports.DescribeMaintenanceWindowExecutionsCommand = DescribeMaintenanceWindowExecutionsCommand;


/***/ }),

/***/ 60928:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeMaintenanceWindowScheduleCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeMaintenanceWindowScheduleCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowScheduleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowScheduleCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeMaintenanceWindowScheduleCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeMaintenanceWindowScheduleCommand)(output, context);
    }
}
exports.DescribeMaintenanceWindowScheduleCommand = DescribeMaintenanceWindowScheduleCommand;


/***/ }),

/***/ 30048:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeMaintenanceWindowTargetsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(26130);
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeMaintenanceWindowTargetsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowTargetsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowTargetsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowTargetsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeMaintenanceWindowTargetsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeMaintenanceWindowTargetsCommand)(output, context);
    }
}
exports.DescribeMaintenanceWindowTargetsCommand = DescribeMaintenanceWindowTargetsCommand;


/***/ }),

/***/ 26665:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeMaintenanceWindowTasksCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(26130);
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeMaintenanceWindowTasksCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowTasksCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowTasksCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowTasksResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeMaintenanceWindowTasksCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeMaintenanceWindowTasksCommand)(output, context);
    }
}
exports.DescribeMaintenanceWindowTasksCommand = DescribeMaintenanceWindowTasksCommand;


/***/ }),

/***/ 57977:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeMaintenanceWindowsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(26130);
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeMaintenanceWindowsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeMaintenanceWindowsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeMaintenanceWindowsCommand)(output, context);
    }
}
exports.DescribeMaintenanceWindowsCommand = DescribeMaintenanceWindowsCommand;


/***/ }),

/***/ 72249:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeMaintenanceWindowsForTargetCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeMaintenanceWindowsForTargetCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowsForTargetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowsForTargetCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeMaintenanceWindowsForTargetCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeMaintenanceWindowsForTargetCommand)(output, context);
    }
}
exports.DescribeMaintenanceWindowsForTargetCommand = DescribeMaintenanceWindowsForTargetCommand;


/***/ }),

/***/ 61344:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeOpsItemsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeOpsItemsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeOpsItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeOpsItemsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeOpsItemsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeOpsItemsCommand)(output, context);
    }
}
exports.DescribeOpsItemsCommand = DescribeOpsItemsCommand;


/***/ }),

/***/ 6047:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeParametersCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeParametersCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeParametersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeParametersCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeParametersCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeParametersCommand)(output, context);
    }
}
exports.DescribeParametersCommand = DescribeParametersCommand;


/***/ }),

/***/ 78214:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribePatchBaselinesCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribePatchBaselinesCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribePatchBaselinesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchBaselinesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribePatchBaselinesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribePatchBaselinesCommand)(output, context);
    }
}
exports.DescribePatchBaselinesCommand = DescribePatchBaselinesCommand;


/***/ }),

/***/ 13713:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribePatchGroupStateCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribePatchGroupStateCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribePatchGroupStateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchGroupStateCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribePatchGroupStateCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribePatchGroupStateCommand)(output, context);
    }
}
exports.DescribePatchGroupStateCommand = DescribePatchGroupStateCommand;


/***/ }),

/***/ 60505:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribePatchGroupsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribePatchGroupsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribePatchGroupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchGroupsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribePatchGroupsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribePatchGroupsCommand)(output, context);
    }
}
exports.DescribePatchGroupsCommand = DescribePatchGroupsCommand;


/***/ }),

/***/ 69513:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribePatchPropertiesCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribePatchPropertiesCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribePatchPropertiesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchPropertiesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribePatchPropertiesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribePatchPropertiesCommand)(output, context);
    }
}
exports.DescribePatchPropertiesCommand = DescribePatchPropertiesCommand;


/***/ }),

/***/ 12826:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DescribeSessionsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DescribeSessionsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeSessionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeSessionsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeSessionsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeSessionsCommand)(output, context);
    }
}
exports.DescribeSessionsCommand = DescribeSessionsCommand;


/***/ }),

/***/ 18828:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DisassociateOpsItemRelatedItemCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class DisassociateOpsItemRelatedItemCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DisassociateOpsItemRelatedItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DisassociateOpsItemRelatedItemCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_DisassociateOpsItemRelatedItemCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DisassociateOpsItemRelatedItemCommand)(output, context);
    }
}
exports.DisassociateOpsItemRelatedItemCommand = DisassociateOpsItemRelatedItemCommand;


/***/ }),

/***/ 77907:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetAutomationExecutionCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class GetAutomationExecutionCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetAutomationExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetAutomationExecutionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetAutomationExecutionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetAutomationExecutionCommand)(output, context);
    }
}
exports.GetAutomationExecutionCommand = GetAutomationExecutionCommand;


/***/ }),

/***/ 93793:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetCalendarStateCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class GetCalendarStateCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetCalendarStateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetCalendarStateCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetCalendarStateCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetCalendarStateCommand)(output, context);
    }
}
exports.GetCalendarStateCommand = GetCalendarStateCommand;


/***/ }),

/***/ 61897:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetCommandInvocationCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class GetCommandInvocationCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetCommandInvocationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetCommandInvocationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetCommandInvocationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetCommandInvocationCommand)(output, context);
    }
}
exports.GetCommandInvocationCommand = GetCommandInvocationCommand;


/***/ }),

/***/ 18509:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetConnectionStatusCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class GetConnectionStatusCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetConnectionStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetConnectionStatusCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetConnectionStatusCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetConnectionStatusCommand)(output, context);
    }
}
exports.GetConnectionStatusCommand = GetConnectionStatusCommand;


/***/ }),

/***/ 21476:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetDefaultPatchBaselineCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class GetDefaultPatchBaselineCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetDefaultPatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetDefaultPatchBaselineCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetDefaultPatchBaselineCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetDefaultPatchBaselineCommand)(output, context);
    }
}
exports.GetDefaultPatchBaselineCommand = GetDefaultPatchBaselineCommand;


/***/ }),

/***/ 34489:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetDeployablePatchSnapshotForInstanceCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_1_1 = __webpack_require__(75367);
const Aws_json1_1_1 = __webpack_require__(2490);
class GetDeployablePatchSnapshotForInstanceCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetDeployablePatchSnapshotForInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetDeployablePatchSnapshotForInstanceCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_1_1.GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetDeployablePatchSnapshotForInstanceCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetDeployablePatchSnapshotForInstanceCommand)(output, context);
    }
}
exports.GetDeployablePatchSnapshotForInstanceCommand = GetDeployablePatchSnapshotForInstanceCommand;


/***/ }),

/***/ 3739:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetDocumentCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class GetDocumentCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetDocumentCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetDocumentCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetDocumentCommand)(output, context);
    }
}
exports.GetDocumentCommand = GetDocumentCommand;


/***/ }),

/***/ 90803:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetInventoryCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class GetInventoryCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetInventoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetInventoryCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetInventoryCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetInventoryCommand)(output, context);
    }
}
exports.GetInventoryCommand = GetInventoryCommand;


/***/ }),

/***/ 87500:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetInventorySchemaCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class GetInventorySchemaCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetInventorySchemaCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetInventorySchemaCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetInventorySchemaCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetInventorySchemaCommand)(output, context);
    }
}
exports.GetInventorySchemaCommand = GetInventorySchemaCommand;


/***/ }),

/***/ 43235:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetMaintenanceWindowCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_1_1 = __webpack_require__(75367);
const Aws_json1_1_1 = __webpack_require__(2490);
class GetMaintenanceWindowCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetMaintenanceWindowCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetMaintenanceWindowCommand)(output, context);
    }
}
exports.GetMaintenanceWindowCommand = GetMaintenanceWindowCommand;


/***/ }),

/***/ 56896:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetMaintenanceWindowExecutionCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class GetMaintenanceWindowExecutionCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetMaintenanceWindowExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowExecutionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetMaintenanceWindowExecutionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetMaintenanceWindowExecutionCommand)(output, context);
    }
}
exports.GetMaintenanceWindowExecutionCommand = GetMaintenanceWindowExecutionCommand;


/***/ }),

/***/ 99509:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetMaintenanceWindowExecutionTaskCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_1_1 = __webpack_require__(75367);
const Aws_json1_1_1 = __webpack_require__(2490);
class GetMaintenanceWindowExecutionTaskCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetMaintenanceWindowExecutionTaskCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowExecutionTaskCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetMaintenanceWindowExecutionTaskCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetMaintenanceWindowExecutionTaskCommand)(output, context);
    }
}
exports.GetMaintenanceWindowExecutionTaskCommand = GetMaintenanceWindowExecutionTaskCommand;


/***/ }),

/***/ 52277:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetMaintenanceWindowExecutionTaskInvocationCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_1_1 = __webpack_require__(75367);
const Aws_json1_1_1 = __webpack_require__(2490);
class GetMaintenanceWindowExecutionTaskInvocationCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetMaintenanceWindowExecutionTaskInvocationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowExecutionTaskInvocationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetMaintenanceWindowExecutionTaskInvocationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetMaintenanceWindowExecutionTaskInvocationCommand)(output, context);
    }
}
exports.GetMaintenanceWindowExecutionTaskInvocationCommand = GetMaintenanceWindowExecutionTaskInvocationCommand;


/***/ }),

/***/ 69058:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetMaintenanceWindowTaskCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_1_1 = __webpack_require__(75367);
const Aws_json1_1_1 = __webpack_require__(2490);
class GetMaintenanceWindowTaskCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetMaintenanceWindowTaskCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowTaskCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowTaskResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetMaintenanceWindowTaskCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetMaintenanceWindowTaskCommand)(output, context);
    }
}
exports.GetMaintenanceWindowTaskCommand = GetMaintenanceWindowTaskCommand;


/***/ }),

/***/ 95307:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetOpsItemCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class GetOpsItemCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetOpsItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetOpsItemCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetOpsItemCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetOpsItemCommand)(output, context);
    }
}
exports.GetOpsItemCommand = GetOpsItemCommand;


/***/ }),

/***/ 53990:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetOpsMetadataCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class GetOpsMetadataCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetOpsMetadataCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetOpsMetadataCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetOpsMetadataCommand)(output, context);
    }
}
exports.GetOpsMetadataCommand = GetOpsMetadataCommand;


/***/ }),

/***/ 27696:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetOpsSummaryCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class GetOpsSummaryCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetOpsSummaryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetOpsSummaryCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetOpsSummaryCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetOpsSummaryCommand)(output, context);
    }
}
exports.GetOpsSummaryCommand = GetOpsSummaryCommand;


/***/ }),

/***/ 96741:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetParameterCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_1_1 = __webpack_require__(75367);
const Aws_json1_1_1 = __webpack_require__(2490);
class GetParameterCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetParameterCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParameterCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_1_1.GetParameterResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetParameterCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetParameterCommand)(output, context);
    }
}
exports.GetParameterCommand = GetParameterCommand;


/***/ }),

/***/ 89414:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetParameterHistoryCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_1_1 = __webpack_require__(75367);
const Aws_json1_1_1 = __webpack_require__(2490);
class GetParameterHistoryCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetParameterHistoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParameterHistoryCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_1_1.GetParameterHistoryResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetParameterHistoryCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetParameterHistoryCommand)(output, context);
    }
}
exports.GetParameterHistoryCommand = GetParameterHistoryCommand;


/***/ }),

/***/ 44446:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetParametersByPathCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_1_1 = __webpack_require__(75367);
const Aws_json1_1_1 = __webpack_require__(2490);
class GetParametersByPathCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetParametersByPathCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParametersByPathCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_1_1.GetParametersByPathResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetParametersByPathCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetParametersByPathCommand)(output, context);
    }
}
exports.GetParametersByPathCommand = GetParametersByPathCommand;


/***/ }),

/***/ 32987:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetParametersCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_1_1 = __webpack_require__(75367);
const Aws_json1_1_1 = __webpack_require__(2490);
class GetParametersCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetParametersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParametersCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_1_1.GetParametersResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetParametersCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetParametersCommand)(output, context);
    }
}
exports.GetParametersCommand = GetParametersCommand;


/***/ }),

/***/ 50606:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetPatchBaselineCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_1_1 = __webpack_require__(75367);
const Aws_json1_1_1 = __webpack_require__(2490);
class GetPatchBaselineCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetPatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetPatchBaselineCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_1_1.GetPatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetPatchBaselineCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetPatchBaselineCommand)(output, context);
    }
}
exports.GetPatchBaselineCommand = GetPatchBaselineCommand;


/***/ }),

/***/ 77596:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetPatchBaselineForPatchGroupCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class GetPatchBaselineForPatchGroupCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetPatchBaselineForPatchGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetPatchBaselineForPatchGroupCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetPatchBaselineForPatchGroupCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetPatchBaselineForPatchGroupCommand)(output, context);
    }
}
exports.GetPatchBaselineForPatchGroupCommand = GetPatchBaselineForPatchGroupCommand;


/***/ }),

/***/ 64306:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetResourcePoliciesCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class GetResourcePoliciesCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetResourcePoliciesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetResourcePoliciesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetResourcePoliciesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetResourcePoliciesCommand)(output, context);
    }
}
exports.GetResourcePoliciesCommand = GetResourcePoliciesCommand;


/***/ }),

/***/ 8990:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetServiceSettingCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class GetServiceSettingCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetServiceSettingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetServiceSettingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetServiceSettingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetServiceSettingCommand)(output, context);
    }
}
exports.GetServiceSettingCommand = GetServiceSettingCommand;


/***/ }),

/***/ 41814:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.LabelParameterVersionCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class LabelParameterVersionCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, LabelParameterVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "LabelParameterVersionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_LabelParameterVersionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_LabelParameterVersionCommand)(output, context);
    }
}
exports.LabelParameterVersionCommand = LabelParameterVersionCommand;


/***/ }),

/***/ 61634:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListAssociationVersionsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_1_1 = __webpack_require__(75367);
const Aws_json1_1_1 = __webpack_require__(2490);
class ListAssociationVersionsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAssociationVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListAssociationVersionsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_1_1.ListAssociationVersionsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListAssociationVersionsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListAssociationVersionsCommand)(output, context);
    }
}
exports.ListAssociationVersionsCommand = ListAssociationVersionsCommand;


/***/ }),

/***/ 62636:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListAssociationsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class ListAssociationsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAssociationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListAssociationsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListAssociationsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListAssociationsCommand)(output, context);
    }
}
exports.ListAssociationsCommand = ListAssociationsCommand;


/***/ }),

/***/ 71481:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListCommandInvocationsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class ListCommandInvocationsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListCommandInvocationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListCommandInvocationsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListCommandInvocationsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListCommandInvocationsCommand)(output, context);
    }
}
exports.ListCommandInvocationsCommand = ListCommandInvocationsCommand;


/***/ }),

/***/ 72637:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListCommandsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_1_1 = __webpack_require__(75367);
const Aws_json1_1_1 = __webpack_require__(2490);
class ListCommandsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListCommandsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListCommandsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_1_1.ListCommandsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListCommandsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListCommandsCommand)(output, context);
    }
}
exports.ListCommandsCommand = ListCommandsCommand;


/***/ }),

/***/ 45910:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListComplianceItemsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class ListComplianceItemsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListComplianceItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListComplianceItemsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListComplianceItemsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListComplianceItemsCommand)(output, context);
    }
}
exports.ListComplianceItemsCommand = ListComplianceItemsCommand;


/***/ }),

/***/ 34401:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListComplianceSummariesCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class ListComplianceSummariesCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListComplianceSummariesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListComplianceSummariesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListComplianceSummariesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListComplianceSummariesCommand)(output, context);
    }
}
exports.ListComplianceSummariesCommand = ListComplianceSummariesCommand;


/***/ }),

/***/ 18537:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListDocumentMetadataHistoryCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class ListDocumentMetadataHistoryCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListDocumentMetadataHistoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListDocumentMetadataHistoryCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListDocumentMetadataHistoryCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListDocumentMetadataHistoryCommand)(output, context);
    }
}
exports.ListDocumentMetadataHistoryCommand = ListDocumentMetadataHistoryCommand;


/***/ }),

/***/ 88029:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListDocumentVersionsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class ListDocumentVersionsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListDocumentVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListDocumentVersionsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListDocumentVersionsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListDocumentVersionsCommand)(output, context);
    }
}
exports.ListDocumentVersionsCommand = ListDocumentVersionsCommand;


/***/ }),

/***/ 57275:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListDocumentsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class ListDocumentsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListDocumentsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListDocumentsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListDocumentsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListDocumentsCommand)(output, context);
    }
}
exports.ListDocumentsCommand = ListDocumentsCommand;


/***/ }),

/***/ 57155:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListInventoryEntriesCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class ListInventoryEntriesCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListInventoryEntriesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListInventoryEntriesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListInventoryEntriesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListInventoryEntriesCommand)(output, context);
    }
}
exports.ListInventoryEntriesCommand = ListInventoryEntriesCommand;


/***/ }),

/***/ 59144:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListOpsItemEventsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class ListOpsItemEventsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListOpsItemEventsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListOpsItemEventsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListOpsItemEventsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListOpsItemEventsCommand)(output, context);
    }
}
exports.ListOpsItemEventsCommand = ListOpsItemEventsCommand;


/***/ }),

/***/ 73539:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListOpsItemRelatedItemsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class ListOpsItemRelatedItemsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListOpsItemRelatedItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListOpsItemRelatedItemsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListOpsItemRelatedItemsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListOpsItemRelatedItemsCommand)(output, context);
    }
}
exports.ListOpsItemRelatedItemsCommand = ListOpsItemRelatedItemsCommand;


/***/ }),

/***/ 20114:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListOpsMetadataCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class ListOpsMetadataCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListOpsMetadataCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListOpsMetadataCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListOpsMetadataCommand)(output, context);
    }
}
exports.ListOpsMetadataCommand = ListOpsMetadataCommand;


/***/ }),

/***/ 8602:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListResourceComplianceSummariesCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class ListResourceComplianceSummariesCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListResourceComplianceSummariesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListResourceComplianceSummariesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListResourceComplianceSummariesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListResourceComplianceSummariesCommand)(output, context);
    }
}
exports.ListResourceComplianceSummariesCommand = ListResourceComplianceSummariesCommand;


/***/ }),

/***/ 17168:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListResourceDataSyncCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class ListResourceDataSyncCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListResourceDataSyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListResourceDataSyncCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListResourceDataSyncCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListResourceDataSyncCommand)(output, context);
    }
}
exports.ListResourceDataSyncCommand = ListResourceDataSyncCommand;


/***/ }),

/***/ 38229:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListTagsForResourceCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class ListTagsForResourceCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListTagsForResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListTagsForResourceCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListTagsForResourceCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListTagsForResourceCommand)(output, context);
    }
}
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;


/***/ }),

/***/ 62405:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ModifyDocumentPermissionCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class ModifyDocumentPermissionCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ModifyDocumentPermissionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ModifyDocumentPermissionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ModifyDocumentPermissionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ModifyDocumentPermissionCommand)(output, context);
    }
}
exports.ModifyDocumentPermissionCommand = ModifyDocumentPermissionCommand;


/***/ }),

/***/ 98273:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.PutComplianceItemsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class PutComplianceItemsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutComplianceItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutComplianceItemsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_PutComplianceItemsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_PutComplianceItemsCommand)(output, context);
    }
}
exports.PutComplianceItemsCommand = PutComplianceItemsCommand;


/***/ }),

/***/ 74022:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.PutInventoryCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class PutInventoryCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutInventoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutInventoryCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_PutInventoryCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_PutInventoryCommand)(output, context);
    }
}
exports.PutInventoryCommand = PutInventoryCommand;


/***/ }),

/***/ 52370:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.PutParameterCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_1_1 = __webpack_require__(75367);
const Aws_json1_1_1 = __webpack_require__(2490);
class PutParameterCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutParameterCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutParameterCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_1_1.PutParameterRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_PutParameterCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_PutParameterCommand)(output, context);
    }
}
exports.PutParameterCommand = PutParameterCommand;


/***/ }),

/***/ 13708:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.PutResourcePolicyCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class PutResourcePolicyCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutResourcePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutResourcePolicyCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_PutResourcePolicyCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_PutResourcePolicyCommand)(output, context);
    }
}
exports.PutResourcePolicyCommand = PutResourcePolicyCommand;


/***/ }),

/***/ 91957:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.RegisterDefaultPatchBaselineCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class RegisterDefaultPatchBaselineCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterDefaultPatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterDefaultPatchBaselineCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_RegisterDefaultPatchBaselineCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_RegisterDefaultPatchBaselineCommand)(output, context);
    }
}
exports.RegisterDefaultPatchBaselineCommand = RegisterDefaultPatchBaselineCommand;


/***/ }),

/***/ 51262:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.RegisterPatchBaselineForPatchGroupCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class RegisterPatchBaselineForPatchGroupCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterPatchBaselineForPatchGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterPatchBaselineForPatchGroupCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_RegisterPatchBaselineForPatchGroupCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_RegisterPatchBaselineForPatchGroupCommand)(output, context);
    }
}
exports.RegisterPatchBaselineForPatchGroupCommand = RegisterPatchBaselineForPatchGroupCommand;


/***/ }),

/***/ 11736:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.RegisterTargetWithMaintenanceWindowCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_1_1 = __webpack_require__(75367);
const Aws_json1_1_1 = __webpack_require__(2490);
class RegisterTargetWithMaintenanceWindowCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterTargetWithMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterTargetWithMaintenanceWindowCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_1_1.RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_RegisterTargetWithMaintenanceWindowCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_RegisterTargetWithMaintenanceWindowCommand)(output, context);
    }
}
exports.RegisterTargetWithMaintenanceWindowCommand = RegisterTargetWithMaintenanceWindowCommand;


/***/ }),

/***/ 11288:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.RegisterTaskWithMaintenanceWindowCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_1_1 = __webpack_require__(75367);
const Aws_json1_1_1 = __webpack_require__(2490);
class RegisterTaskWithMaintenanceWindowCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterTaskWithMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterTaskWithMaintenanceWindowCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_1_1.RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_RegisterTaskWithMaintenanceWindowCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_RegisterTaskWithMaintenanceWindowCommand)(output, context);
    }
}
exports.RegisterTaskWithMaintenanceWindowCommand = RegisterTaskWithMaintenanceWindowCommand;


/***/ }),

/***/ 7913:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.RemoveTagsFromResourceCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class RemoveTagsFromResourceCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RemoveTagsFromResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RemoveTagsFromResourceCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_RemoveTagsFromResourceCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_RemoveTagsFromResourceCommand)(output, context);
    }
}
exports.RemoveTagsFromResourceCommand = RemoveTagsFromResourceCommand;


/***/ }),

/***/ 68819:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ResetServiceSettingCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class ResetServiceSettingCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ResetServiceSettingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ResetServiceSettingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ResetServiceSettingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ResetServiceSettingCommand)(output, context);
    }
}
exports.ResetServiceSettingCommand = ResetServiceSettingCommand;


/***/ }),

/***/ 25650:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ResumeSessionCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class ResumeSessionCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ResumeSessionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ResumeSessionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_ResumeSessionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ResumeSessionCommand)(output, context);
    }
}
exports.ResumeSessionCommand = ResumeSessionCommand;


/***/ }),

/***/ 98436:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SendAutomationSignalCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class SendAutomationSignalCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, SendAutomationSignalCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "SendAutomationSignalCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_SendAutomationSignalCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_SendAutomationSignalCommand)(output, context);
    }
}
exports.SendAutomationSignalCommand = SendAutomationSignalCommand;


/***/ }),

/***/ 17448:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SendCommandCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_1_1 = __webpack_require__(75367);
const Aws_json1_1_1 = __webpack_require__(2490);
class SendCommandCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, SendCommandCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "SendCommandCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_1_1.SendCommandRequestFilterSensitiveLog,
            outputFilterSensitiveLog: models_1_1.SendCommandResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_SendCommandCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_SendCommandCommand)(output, context);
    }
}
exports.SendCommandCommand = SendCommandCommand;


/***/ }),

/***/ 2313:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.StartAssociationsOnceCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class StartAssociationsOnceCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StartAssociationsOnceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartAssociationsOnceCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_StartAssociationsOnceCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_StartAssociationsOnceCommand)(output, context);
    }
}
exports.StartAssociationsOnceCommand = StartAssociationsOnceCommand;


/***/ }),

/***/ 39684:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.StartAutomationExecutionCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class StartAutomationExecutionCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StartAutomationExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartAutomationExecutionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_StartAutomationExecutionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_StartAutomationExecutionCommand)(output, context);
    }
}
exports.StartAutomationExecutionCommand = StartAutomationExecutionCommand;


/***/ }),

/***/ 8086:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.StartChangeRequestExecutionCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class StartChangeRequestExecutionCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StartChangeRequestExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartChangeRequestExecutionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_StartChangeRequestExecutionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_StartChangeRequestExecutionCommand)(output, context);
    }
}
exports.StartChangeRequestExecutionCommand = StartChangeRequestExecutionCommand;


/***/ }),

/***/ 16288:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.StartSessionCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class StartSessionCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StartSessionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartSessionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_StartSessionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_StartSessionCommand)(output, context);
    }
}
exports.StartSessionCommand = StartSessionCommand;


/***/ }),

/***/ 37255:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.StopAutomationExecutionCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class StopAutomationExecutionCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StopAutomationExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StopAutomationExecutionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_StopAutomationExecutionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_StopAutomationExecutionCommand)(output, context);
    }
}
exports.StopAutomationExecutionCommand = StopAutomationExecutionCommand;


/***/ }),

/***/ 18936:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.TerminateSessionCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class TerminateSessionCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, TerminateSessionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "TerminateSessionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_TerminateSessionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_TerminateSessionCommand)(output, context);
    }
}
exports.TerminateSessionCommand = TerminateSessionCommand;


/***/ }),

/***/ 42139:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.UnlabelParameterVersionCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class UnlabelParameterVersionCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UnlabelParameterVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UnlabelParameterVersionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_UnlabelParameterVersionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UnlabelParameterVersionCommand)(output, context);
    }
}
exports.UnlabelParameterVersionCommand = UnlabelParameterVersionCommand;


/***/ }),

/***/ 36767:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.UpdateAssociationCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_2_1 = __webpack_require__(25853);
const Aws_json1_1_1 = __webpack_require__(2490);
class UpdateAssociationCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateAssociationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateAssociationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_2_1.UpdateAssociationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: models_2_1.UpdateAssociationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateAssociationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateAssociationCommand)(output, context);
    }
}
exports.UpdateAssociationCommand = UpdateAssociationCommand;


/***/ }),

/***/ 88732:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.UpdateAssociationStatusCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_2_1 = __webpack_require__(25853);
const Aws_json1_1_1 = __webpack_require__(2490);
class UpdateAssociationStatusCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateAssociationStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateAssociationStatusCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_2_1.UpdateAssociationStatusResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateAssociationStatusCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateAssociationStatusCommand)(output, context);
    }
}
exports.UpdateAssociationStatusCommand = UpdateAssociationStatusCommand;


/***/ }),

/***/ 73955:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.UpdateDocumentCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class UpdateDocumentCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateDocumentCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateDocumentCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateDocumentCommand)(output, context);
    }
}
exports.UpdateDocumentCommand = UpdateDocumentCommand;


/***/ }),

/***/ 50321:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.UpdateDocumentDefaultVersionCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class UpdateDocumentDefaultVersionCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateDocumentDefaultVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateDocumentDefaultVersionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateDocumentDefaultVersionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateDocumentDefaultVersionCommand)(output, context);
    }
}
exports.UpdateDocumentDefaultVersionCommand = UpdateDocumentDefaultVersionCommand;


/***/ }),

/***/ 16656:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.UpdateDocumentMetadataCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class UpdateDocumentMetadataCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateDocumentMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateDocumentMetadataCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateDocumentMetadataCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateDocumentMetadataCommand)(output, context);
    }
}
exports.UpdateDocumentMetadataCommand = UpdateDocumentMetadataCommand;


/***/ }),

/***/ 73606:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.UpdateMaintenanceWindowCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_2_1 = __webpack_require__(25853);
const Aws_json1_1_1 = __webpack_require__(2490);
class UpdateMaintenanceWindowCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateMaintenanceWindowCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowRequestFilterSensitiveLog,
            outputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateMaintenanceWindowCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateMaintenanceWindowCommand)(output, context);
    }
}
exports.UpdateMaintenanceWindowCommand = UpdateMaintenanceWindowCommand;


/***/ }),

/***/ 6365:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.UpdateMaintenanceWindowTargetCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_2_1 = __webpack_require__(25853);
const Aws_json1_1_1 = __webpack_require__(2490);
class UpdateMaintenanceWindowTargetCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateMaintenanceWindowTargetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateMaintenanceWindowTargetCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTargetRequestFilterSensitiveLog,
            outputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTargetResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateMaintenanceWindowTargetCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateMaintenanceWindowTargetCommand)(output, context);
    }
}
exports.UpdateMaintenanceWindowTargetCommand = UpdateMaintenanceWindowTargetCommand;


/***/ }),

/***/ 98521:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.UpdateMaintenanceWindowTaskCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_2_1 = __webpack_require__(25853);
const Aws_json1_1_1 = __webpack_require__(2490);
class UpdateMaintenanceWindowTaskCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateMaintenanceWindowTaskCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateMaintenanceWindowTaskCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTaskRequestFilterSensitiveLog,
            outputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTaskResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateMaintenanceWindowTaskCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateMaintenanceWindowTaskCommand)(output, context);
    }
}
exports.UpdateMaintenanceWindowTaskCommand = UpdateMaintenanceWindowTaskCommand;


/***/ }),

/***/ 40996:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.UpdateManagedInstanceRoleCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class UpdateManagedInstanceRoleCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateManagedInstanceRoleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateManagedInstanceRoleCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateManagedInstanceRoleCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateManagedInstanceRoleCommand)(output, context);
    }
}
exports.UpdateManagedInstanceRoleCommand = UpdateManagedInstanceRoleCommand;


/***/ }),

/***/ 48727:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.UpdateOpsItemCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class UpdateOpsItemCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateOpsItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateOpsItemCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateOpsItemCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateOpsItemCommand)(output, context);
    }
}
exports.UpdateOpsItemCommand = UpdateOpsItemCommand;


/***/ }),

/***/ 805:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.UpdateOpsMetadataCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class UpdateOpsMetadataCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateOpsMetadataCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateOpsMetadataCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateOpsMetadataCommand)(output, context);
    }
}
exports.UpdateOpsMetadataCommand = UpdateOpsMetadataCommand;


/***/ }),

/***/ 43662:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.UpdatePatchBaselineCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_2_1 = __webpack_require__(25853);
const Aws_json1_1_1 = __webpack_require__(2490);
class UpdatePatchBaselineCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdatePatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdatePatchBaselineCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_2_1.UpdatePatchBaselineRequestFilterSensitiveLog,
            outputFilterSensitiveLog: models_2_1.UpdatePatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdatePatchBaselineCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdatePatchBaselineCommand)(output, context);
    }
}
exports.UpdatePatchBaselineCommand = UpdatePatchBaselineCommand;


/***/ }),

/***/ 12791:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.UpdateResourceDataSyncCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class UpdateResourceDataSyncCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateResourceDataSyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateResourceDataSyncCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateResourceDataSyncCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateResourceDataSyncCommand)(output, context);
    }
}
exports.UpdateResourceDataSyncCommand = UpdateResourceDataSyncCommand;


/***/ }),

/***/ 61388:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.UpdateServiceSettingCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_json1_1_1 = __webpack_require__(2490);
class UpdateServiceSettingCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateServiceSettingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateServiceSettingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateServiceSettingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateServiceSettingCommand)(output, context);
    }
}
exports.UpdateServiceSettingCommand = UpdateServiceSettingCommand;


/***/ }),

/***/ 39308:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(15907), exports);
tslib_1.__exportStar(__webpack_require__(83833), exports);
tslib_1.__exportStar(__webpack_require__(32930), exports);
tslib_1.__exportStar(__webpack_require__(23346), exports);
tslib_1.__exportStar(__webpack_require__(82095), exports);
tslib_1.__exportStar(__webpack_require__(53546), exports);
tslib_1.__exportStar(__webpack_require__(48056), exports);
tslib_1.__exportStar(__webpack_require__(28291), exports);
tslib_1.__exportStar(__webpack_require__(23391), exports);
tslib_1.__exportStar(__webpack_require__(95578), exports);
tslib_1.__exportStar(__webpack_require__(84071), exports);
tslib_1.__exportStar(__webpack_require__(16721), exports);
tslib_1.__exportStar(__webpack_require__(20212), exports);
tslib_1.__exportStar(__webpack_require__(7014), exports);
tslib_1.__exportStar(__webpack_require__(47252), exports);
tslib_1.__exportStar(__webpack_require__(84411), exports);
tslib_1.__exportStar(__webpack_require__(73563), exports);
tslib_1.__exportStar(__webpack_require__(93346), exports);
tslib_1.__exportStar(__webpack_require__(68213), exports);
tslib_1.__exportStar(__webpack_require__(36765), exports);
tslib_1.__exportStar(__webpack_require__(66922), exports);
tslib_1.__exportStar(__webpack_require__(50589), exports);
tslib_1.__exportStar(__webpack_require__(65005), exports);
tslib_1.__exportStar(__webpack_require__(58714), exports);
tslib_1.__exportStar(__webpack_require__(38607), exports);
tslib_1.__exportStar(__webpack_require__(656), exports);
tslib_1.__exportStar(__webpack_require__(59675), exports);
tslib_1.__exportStar(__webpack_require__(54634), exports);
tslib_1.__exportStar(__webpack_require__(63259), exports);
tslib_1.__exportStar(__webpack_require__(52958), exports);
tslib_1.__exportStar(__webpack_require__(16889), exports);
tslib_1.__exportStar(__webpack_require__(1873), exports);
tslib_1.__exportStar(__webpack_require__(84054), exports);
tslib_1.__exportStar(__webpack_require__(50471), exports);
tslib_1.__exportStar(__webpack_require__(95146), exports);
tslib_1.__exportStar(__webpack_require__(3907), exports);
tslib_1.__exportStar(__webpack_require__(55107), exports);
tslib_1.__exportStar(__webpack_require__(85938), exports);
tslib_1.__exportStar(__webpack_require__(26277), exports);
tslib_1.__exportStar(__webpack_require__(12411), exports);
tslib_1.__exportStar(__webpack_require__(15894), exports);
tslib_1.__exportStar(__webpack_require__(11430), exports);
tslib_1.__exportStar(__webpack_require__(3854), exports);
tslib_1.__exportStar(__webpack_require__(89400), exports);
tslib_1.__exportStar(__webpack_require__(585), exports);
tslib_1.__exportStar(__webpack_require__(39528), exports);
tslib_1.__exportStar(__webpack_require__(53946), exports);
tslib_1.__exportStar(__webpack_require__(19925), exports);
tslib_1.__exportStar(__webpack_require__(60928), exports);
tslib_1.__exportStar(__webpack_require__(30048), exports);
tslib_1.__exportStar(__webpack_require__(26665), exports);
tslib_1.__exportStar(__webpack_require__(57977), exports);
tslib_1.__exportStar(__webpack_require__(72249), exports);
tslib_1.__exportStar(__webpack_require__(61344), exports);
tslib_1.__exportStar(__webpack_require__(6047), exports);
tslib_1.__exportStar(__webpack_require__(78214), exports);
tslib_1.__exportStar(__webpack_require__(13713), exports);
tslib_1.__exportStar(__webpack_require__(60505), exports);
tslib_1.__exportStar(__webpack_require__(69513), exports);
tslib_1.__exportStar(__webpack_require__(12826), exports);
tslib_1.__exportStar(__webpack_require__(18828), exports);
tslib_1.__exportStar(__webpack_require__(77907), exports);
tslib_1.__exportStar(__webpack_require__(93793), exports);
tslib_1.__exportStar(__webpack_require__(61897), exports);
tslib_1.__exportStar(__webpack_require__(18509), exports);
tslib_1.__exportStar(__webpack_require__(21476), exports);
tslib_1.__exportStar(__webpack_require__(34489), exports);
tslib_1.__exportStar(__webpack_require__(3739), exports);
tslib_1.__exportStar(__webpack_require__(90803), exports);
tslib_1.__exportStar(__webpack_require__(87500), exports);
tslib_1.__exportStar(__webpack_require__(43235), exports);
tslib_1.__exportStar(__webpack_require__(56896), exports);
tslib_1.__exportStar(__webpack_require__(99509), exports);
tslib_1.__exportStar(__webpack_require__(52277), exports);
tslib_1.__exportStar(__webpack_require__(69058), exports);
tslib_1.__exportStar(__webpack_require__(95307), exports);
tslib_1.__exportStar(__webpack_require__(53990), exports);
tslib_1.__exportStar(__webpack_require__(27696), exports);
tslib_1.__exportStar(__webpack_require__(96741), exports);
tslib_1.__exportStar(__webpack_require__(89414), exports);
tslib_1.__exportStar(__webpack_require__(44446), exports);
tslib_1.__exportStar(__webpack_require__(32987), exports);
tslib_1.__exportStar(__webpack_require__(50606), exports);
tslib_1.__exportStar(__webpack_require__(77596), exports);
tslib_1.__exportStar(__webpack_require__(64306), exports);
tslib_1.__exportStar(__webpack_require__(8990), exports);
tslib_1.__exportStar(__webpack_require__(41814), exports);
tslib_1.__exportStar(__webpack_require__(61634), exports);
tslib_1.__exportStar(__webpack_require__(62636), exports);
tslib_1.__exportStar(__webpack_require__(71481), exports);
tslib_1.__exportStar(__webpack_require__(72637), exports);
tslib_1.__exportStar(__webpack_require__(45910), exports);
tslib_1.__exportStar(__webpack_require__(34401), exports);
tslib_1.__exportStar(__webpack_require__(18537), exports);
tslib_1.__exportStar(__webpack_require__(88029), exports);
tslib_1.__exportStar(__webpack_require__(57275), exports);
tslib_1.__exportStar(__webpack_require__(57155), exports);
tslib_1.__exportStar(__webpack_require__(59144), exports);
tslib_1.__exportStar(__webpack_require__(73539), exports);
tslib_1.__exportStar(__webpack_require__(20114), exports);
tslib_1.__exportStar(__webpack_require__(8602), exports);
tslib_1.__exportStar(__webpack_require__(17168), exports);
tslib_1.__exportStar(__webpack_require__(38229), exports);
tslib_1.__exportStar(__webpack_require__(62405), exports);
tslib_1.__exportStar(__webpack_require__(98273), exports);
tslib_1.__exportStar(__webpack_require__(74022), exports);
tslib_1.__exportStar(__webpack_require__(52370), exports);
tslib_1.__exportStar(__webpack_require__(13708), exports);
tslib_1.__exportStar(__webpack_require__(91957), exports);
tslib_1.__exportStar(__webpack_require__(51262), exports);
tslib_1.__exportStar(__webpack_require__(11736), exports);
tslib_1.__exportStar(__webpack_require__(11288), exports);
tslib_1.__exportStar(__webpack_require__(7913), exports);
tslib_1.__exportStar(__webpack_require__(68819), exports);
tslib_1.__exportStar(__webpack_require__(25650), exports);
tslib_1.__exportStar(__webpack_require__(98436), exports);
tslib_1.__exportStar(__webpack_require__(17448), exports);
tslib_1.__exportStar(__webpack_require__(2313), exports);
tslib_1.__exportStar(__webpack_require__(39684), exports);
tslib_1.__exportStar(__webpack_require__(8086), exports);
tslib_1.__exportStar(__webpack_require__(16288), exports);
tslib_1.__exportStar(__webpack_require__(37255), exports);
tslib_1.__exportStar(__webpack_require__(18936), exports);
tslib_1.__exportStar(__webpack_require__(42139), exports);
tslib_1.__exportStar(__webpack_require__(36767), exports);
tslib_1.__exportStar(__webpack_require__(88732), exports);
tslib_1.__exportStar(__webpack_require__(73955), exports);
tslib_1.__exportStar(__webpack_require__(50321), exports);
tslib_1.__exportStar(__webpack_require__(16656), exports);
tslib_1.__exportStar(__webpack_require__(73606), exports);
tslib_1.__exportStar(__webpack_require__(6365), exports);
tslib_1.__exportStar(__webpack_require__(98521), exports);
tslib_1.__exportStar(__webpack_require__(40996), exports);
tslib_1.__exportStar(__webpack_require__(48727), exports);
tslib_1.__exportStar(__webpack_require__(805), exports);
tslib_1.__exportStar(__webpack_require__(43662), exports);
tslib_1.__exportStar(__webpack_require__(12791), exports);
tslib_1.__exportStar(__webpack_require__(61388), exports);


/***/ }),

/***/ 13578:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveClientEndpointParameters = void 0;
const resolveClientEndpointParameters = (options)=>{
    return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "ssm"
    };
};
exports.resolveClientEndpointParameters = resolveClientEndpointParameters;


/***/ }),

/***/ 99700:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.defaultEndpointResolver = void 0;
const util_endpoints_1 = __webpack_require__(43347);
const ruleset_1 = __webpack_require__(87357);
const defaultEndpointResolver = (endpointParams, context = {})=>{
    return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams: endpointParams,
        logger: context.logger
    });
};
exports.defaultEndpointResolver = defaultEndpointResolver;


/***/ }),

/***/ 87357:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ruleSet = void 0;
const s = "required", t = "fn", u = "argv", v = "ref";
const a = "isSet", b = "tree", c = "error", d = "endpoint", e = "PartitionResult", f = "getAttr", g = {
    [s]: false,
    "type": "String"
}, h = {
    [s]: true,
    "default": false,
    "type": "Boolean"
}, i = {
    [v]: "Endpoint"
}, j = {
    [t]: "booleanEquals",
    [u]: [
        {
            [v]: "UseFIPS"
        },
        true
    ]
}, k = {
    [t]: "booleanEquals",
    [u]: [
        {
            [v]: "UseDualStack"
        },
        true
    ]
}, l = {}, m = {
    [t]: "booleanEquals",
    [u]: [
        true,
        {
            [t]: f,
            [u]: [
                {
                    [v]: e
                },
                "supportsFIPS"
            ]
        }
    ]
}, n = {
    [v]: e
}, o = {
    [t]: "booleanEquals",
    [u]: [
        true,
        {
            [t]: f,
            [u]: [
                n,
                "supportsDualStack"
            ]
        }
    ]
}, p = [
    j
], q = [
    k
], r = [
    {
        [v]: "Region"
    }
];
const _data = {
    version: "1.0",
    parameters: {
        Region: g,
        UseDualStack: h,
        UseFIPS: h,
        Endpoint: g
    },
    rules: [
        {
            conditions: [
                {
                    [t]: a,
                    [u]: [
                        i
                    ]
                }
            ],
            type: b,
            rules: [
                {
                    conditions: p,
                    error: "Invalid Configuration: FIPS and custom endpoint are not supported",
                    type: c
                },
                {
                    type: b,
                    rules: [
                        {
                            conditions: q,
                            error: "Invalid Configuration: Dualstack and custom endpoint are not supported",
                            type: c
                        },
                        {
                            endpoint: {
                                url: i,
                                properties: l,
                                headers: l
                            },
                            type: d
                        }
                    ]
                }
            ]
        },
        {
            type: b,
            rules: [
                {
                    conditions: [
                        {
                            [t]: a,
                            [u]: r
                        }
                    ],
                    type: b,
                    rules: [
                        {
                            conditions: [
                                {
                                    [t]: "aws.partition",
                                    [u]: r,
                                    assign: e
                                }
                            ],
                            type: b,
                            rules: [
                                {
                                    conditions: [
                                        j,
                                        k
                                    ],
                                    type: b,
                                    rules: [
                                        {
                                            conditions: [
                                                m,
                                                o
                                            ],
                                            type: b,
                                            rules: [
                                                {
                                                    type: b,
                                                    rules: [
                                                        {
                                                            endpoint: {
                                                                url: "https://ssm-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                                properties: l,
                                                                headers: l
                                                            },
                                                            type: d
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            error: "FIPS and DualStack are enabled, but this partition does not support one or both",
                                            type: c
                                        }
                                    ]
                                },
                                {
                                    conditions: p,
                                    type: b,
                                    rules: [
                                        {
                                            conditions: [
                                                m
                                            ],
                                            type: b,
                                            rules: [
                                                {
                                                    type: b,
                                                    rules: [
                                                        {
                                                            conditions: [
                                                                {
                                                                    [t]: "stringEquals",
                                                                    [u]: [
                                                                        "aws-us-gov",
                                                                        {
                                                                            [t]: f,
                                                                            [u]: [
                                                                                n,
                                                                                "name"
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            endpoint: {
                                                                url: "https://ssm.{Region}.amazonaws.com",
                                                                properties: l,
                                                                headers: l
                                                            },
                                                            type: d
                                                        },
                                                        {
                                                            endpoint: {
                                                                url: "https://ssm-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                                properties: l,
                                                                headers: l
                                                            },
                                                            type: d
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            error: "FIPS is enabled but this partition does not support FIPS",
                                            type: c
                                        }
                                    ]
                                },
                                {
                                    conditions: q,
                                    type: b,
                                    rules: [
                                        {
                                            conditions: [
                                                o
                                            ],
                                            type: b,
                                            rules: [
                                                {
                                                    type: b,
                                                    rules: [
                                                        {
                                                            endpoint: {
                                                                url: "https://ssm.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                                properties: l,
                                                                headers: l
                                                            },
                                                            type: d
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            error: "DualStack is enabled but this partition does not support DualStack",
                                            type: c
                                        }
                                    ]
                                },
                                {
                                    type: b,
                                    rules: [
                                        {
                                            endpoint: {
                                                url: "https://ssm.{Region}.{PartitionResult#dnsSuffix}",
                                                properties: l,
                                                headers: l
                                            },
                                            type: d
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    error: "Invalid Configuration: Missing Region",
                    type: c
                }
            ]
        }
    ]
};
exports.ruleSet = _data;


/***/ }),

/***/ 4278:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SSMServiceException = void 0;
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(70171), exports);
tslib_1.__exportStar(__webpack_require__(22741), exports);
tslib_1.__exportStar(__webpack_require__(39308), exports);
tslib_1.__exportStar(__webpack_require__(97381), exports);
tslib_1.__exportStar(__webpack_require__(1493), exports);
tslib_1.__exportStar(__webpack_require__(83621), exports);
var SSMServiceException_1 = __webpack_require__(94334);
Object.defineProperty(exports, "SSMServiceException", ({
    enumerable: true,
    get: function() {
        return SSMServiceException_1.SSMServiceException;
    }
}));


/***/ }),

/***/ 94334:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SSMServiceException = exports.__ServiceException = void 0;
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "__ServiceException", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.ServiceException;
    }
}));
class SSMServiceException extends smithy_client_1.ServiceException {
    constructor(options){
        super(options);
        Object.setPrototypeOf(this, SSMServiceException.prototype);
    }
}
exports.SSMServiceException = SSMServiceException;


/***/ }),

/***/ 83621:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(26130), exports);
tslib_1.__exportStar(__webpack_require__(75367), exports);
tslib_1.__exportStar(__webpack_require__(25853), exports);


/***/ }),

/***/ 26130:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.OpsMetadataAlreadyExistsException = exports.OpsItemAlreadyExistsException = exports.OpsItemAccessDeniedException = exports.OpsItemDataType = exports.ResourceLimitExceededException = exports.IdempotentParameterMismatch = exports.MaxDocumentSizeExceeded = exports.InvalidDocumentSchemaVersion = exports.InvalidDocumentContent = exports.DocumentLimitExceeded = exports.DocumentAlreadyExists = exports.DocumentStatus = exports.ReviewStatus = exports.PlatformType = exports.DocumentParameterType = exports.DocumentHashType = exports.DocumentType = exports.DocumentFormat = exports.AttachmentsSourceKey = exports.Fault = exports.UnsupportedPlatformType = exports.InvalidTargetMaps = exports.InvalidTarget = exports.InvalidTag = exports.InvalidSchedule = exports.InvalidOutputLocation = exports.InvalidDocumentVersion = exports.InvalidDocument = exports.AssociationStatusName = exports.AssociationSyncCompliance = exports.AssociationComplianceSeverity = exports.AssociationLimitExceeded = exports.AssociationAlreadyExists = exports.InvalidParameters = exports.DoesNotExistException = exports.InvalidInstanceId = exports.InvalidCommandId = exports.DuplicateInstanceId = exports.OpsItemRelatedItemAlreadyExistsException = exports.OpsItemNotFoundException = exports.OpsItemLimitExceededException = exports.OpsItemInvalidParameterException = exports.AlreadyExistsException = exports.ExternalAlarmState = exports.TooManyUpdates = exports.TooManyTagsError = exports.InvalidResourceType = exports.InvalidResourceId = exports.InternalServerError = exports.ResourceTypeForTagging = void 0;
exports.InstanceInformationFilterKey = exports.UnsupportedOperatingSystem = exports.PatchDeploymentStatus = exports.InvalidPermissionType = exports.DocumentPermissionType = exports.StepExecutionFilterKey = exports.AutomationExecutionNotFoundException = exports.InvalidFilterValue = exports.InvalidFilterKey = exports.ExecutionMode = exports.AutomationType = exports.AutomationSubtype = exports.AutomationExecutionStatus = exports.AutomationExecutionFilterKey = exports.AssociationExecutionTargetsFilterKey = exports.AssociationExecutionDoesNotExist = exports.AssociationFilterOperatorType = exports.AssociationExecutionFilterKey = exports.InvalidAssociationVersion = exports.InvalidNextToken = exports.InvalidFilter = exports.DescribeActivationsFilterKeys = exports.TargetInUseException = exports.ResourcePolicyInvalidParameterException = exports.ResourcePolicyConflictException = exports.ResourceDataSyncNotFoundException = exports.ResourceInUseException = exports.ParameterNotFound = exports.OpsMetadataNotFoundException = exports.InvalidTypeNameException = exports.InvalidOptionException = exports.InvalidInventoryRequestException = exports.InvalidDeleteInventoryParametersException = exports.InventorySchemaDeleteOption = exports.InvalidDocumentOperation = exports.AssociatedInstances = exports.AssociationDoesNotExist = exports.InvalidActivationId = exports.InvalidActivation = exports.ResourceDataSyncInvalidConfigurationException = exports.ResourceDataSyncCountExceededException = exports.ResourceDataSyncAlreadyExistsException = exports.ResourceDataSyncS3Format = exports.PatchAction = exports.OperatingSystem = exports.PatchFilterKey = exports.PatchComplianceLevel = exports.OpsMetadataTooManyUpdatesException = exports.OpsMetadataLimitExceededException = exports.OpsMetadataInvalidArgumentException = void 0;
exports.DescribeMaintenanceWindowTasksResultFilterSensitiveLog = exports.MaintenanceWindowTaskFilterSensitiveLog = exports.MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog = exports.DescribeMaintenanceWindowTargetsResultFilterSensitiveLog = exports.MaintenanceWindowTargetFilterSensitiveLog = exports.DescribeMaintenanceWindowsResultFilterSensitiveLog = exports.MaintenanceWindowIdentityFilterSensitiveLog = exports.DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog = exports.MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog = exports.DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog = exports.DescribeInstancePatchStatesResultFilterSensitiveLog = exports.InstancePatchStateFilterSensitiveLog = exports.DescribeAssociationResultFilterSensitiveLog = exports.CreatePatchBaselineRequestFilterSensitiveLog = exports.PatchSourceFilterSensitiveLog = exports.CreateMaintenanceWindowRequestFilterSensitiveLog = exports.CreateAssociationBatchResultFilterSensitiveLog = exports.FailedCreateAssociationFilterSensitiveLog = exports.CreateAssociationBatchRequestFilterSensitiveLog = exports.CreateAssociationBatchRequestEntryFilterSensitiveLog = exports.CreateAssociationResultFilterSensitiveLog = exports.AssociationDescriptionFilterSensitiveLog = exports.CreateAssociationRequestFilterSensitiveLog = exports.OpsItemFilterOperator = exports.OpsItemFilterKey = exports.MaintenanceWindowTaskCutoffBehavior = exports.MaintenanceWindowResourceType = exports.MaintenanceWindowTaskType = exports.MaintenanceWindowExecutionStatus = exports.InvalidDeletionIdException = exports.InventoryDeletionStatus = exports.InstancePatchStateOperatorType = exports.RebootOption = exports.PatchOperationType = exports.PatchComplianceDataState = exports.InvalidInstanceInformationFilterValue = exports.SourceType = exports.ResourceType = exports.PingStatus = void 0;
const smithy_client_1 = __webpack_require__(69775);
const SSMServiceException_1 = __webpack_require__(94334);
exports.ResourceTypeForTagging = {
    ASSOCIATION: "Association",
    AUTOMATION: "Automation",
    DOCUMENT: "Document",
    MAINTENANCE_WINDOW: "MaintenanceWindow",
    MANAGED_INSTANCE: "ManagedInstance",
    OPSMETADATA: "OpsMetadata",
    OPS_ITEM: "OpsItem",
    PARAMETER: "Parameter",
    PATCH_BASELINE: "PatchBaseline"
};
class InternalServerError extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InternalServerError",
            $fault: "server",
            ...opts
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerError.prototype);
        this.Message = opts.Message;
    }
}
exports.InternalServerError = InternalServerError;
class InvalidResourceId extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidResourceId",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidResourceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResourceId.prototype);
    }
}
exports.InvalidResourceId = InvalidResourceId;
class InvalidResourceType extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidResourceType",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidResourceType";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResourceType.prototype);
    }
}
exports.InvalidResourceType = InvalidResourceType;
class TooManyTagsError extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "TooManyTagsError",
            $fault: "client",
            ...opts
        });
        this.name = "TooManyTagsError";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsError.prototype);
    }
}
exports.TooManyTagsError = TooManyTagsError;
class TooManyUpdates extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "TooManyUpdates",
            $fault: "client",
            ...opts
        });
        this.name = "TooManyUpdates";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyUpdates.prototype);
        this.Message = opts.Message;
    }
}
exports.TooManyUpdates = TooManyUpdates;
exports.ExternalAlarmState = {
    ALARM: "ALARM",
    UNKNOWN: "UNKNOWN"
};
class AlreadyExistsException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "AlreadyExistsException",
            $fault: "client",
            ...opts
        });
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
exports.AlreadyExistsException = AlreadyExistsException;
class OpsItemInvalidParameterException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "OpsItemInvalidParameterException",
            $fault: "client",
            ...opts
        });
        this.name = "OpsItemInvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemInvalidParameterException.prototype);
        this.ParameterNames = opts.ParameterNames;
        this.Message = opts.Message;
    }
}
exports.OpsItemInvalidParameterException = OpsItemInvalidParameterException;
class OpsItemLimitExceededException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "OpsItemLimitExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "OpsItemLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemLimitExceededException.prototype);
        this.ResourceTypes = opts.ResourceTypes;
        this.Limit = opts.Limit;
        this.LimitType = opts.LimitType;
        this.Message = opts.Message;
    }
}
exports.OpsItemLimitExceededException = OpsItemLimitExceededException;
class OpsItemNotFoundException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "OpsItemNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "OpsItemNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.OpsItemNotFoundException = OpsItemNotFoundException;
class OpsItemRelatedItemAlreadyExistsException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "OpsItemRelatedItemAlreadyExistsException",
            $fault: "client",
            ...opts
        });
        this.name = "OpsItemRelatedItemAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemRelatedItemAlreadyExistsException.prototype);
        this.Message = opts.Message;
        this.ResourceUri = opts.ResourceUri;
        this.OpsItemId = opts.OpsItemId;
    }
}
exports.OpsItemRelatedItemAlreadyExistsException = OpsItemRelatedItemAlreadyExistsException;
class DuplicateInstanceId extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "DuplicateInstanceId",
            $fault: "client",
            ...opts
        });
        this.name = "DuplicateInstanceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateInstanceId.prototype);
    }
}
exports.DuplicateInstanceId = DuplicateInstanceId;
class InvalidCommandId extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidCommandId",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidCommandId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidCommandId.prototype);
    }
}
exports.InvalidCommandId = InvalidCommandId;
class InvalidInstanceId extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidInstanceId",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidInstanceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInstanceId.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidInstanceId = InvalidInstanceId;
class DoesNotExistException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "DoesNotExistException",
            $fault: "client",
            ...opts
        });
        this.name = "DoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DoesNotExistException.prototype);
        this.Message = opts.Message;
    }
}
exports.DoesNotExistException = DoesNotExistException;
class InvalidParameters extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidParameters",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidParameters";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameters.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidParameters = InvalidParameters;
class AssociationAlreadyExists extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "AssociationAlreadyExists",
            $fault: "client",
            ...opts
        });
        this.name = "AssociationAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationAlreadyExists.prototype);
    }
}
exports.AssociationAlreadyExists = AssociationAlreadyExists;
class AssociationLimitExceeded extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "AssociationLimitExceeded",
            $fault: "client",
            ...opts
        });
        this.name = "AssociationLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationLimitExceeded.prototype);
    }
}
exports.AssociationLimitExceeded = AssociationLimitExceeded;
exports.AssociationComplianceSeverity = {
    Critical: "CRITICAL",
    High: "HIGH",
    Low: "LOW",
    Medium: "MEDIUM",
    Unspecified: "UNSPECIFIED"
};
exports.AssociationSyncCompliance = {
    Auto: "AUTO",
    Manual: "MANUAL"
};
exports.AssociationStatusName = {
    Failed: "Failed",
    Pending: "Pending",
    Success: "Success"
};
class InvalidDocument extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidDocument",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidDocument";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocument.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidDocument = InvalidDocument;
class InvalidDocumentVersion extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidDocumentVersion",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidDocumentVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentVersion.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidDocumentVersion = InvalidDocumentVersion;
class InvalidOutputLocation extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidOutputLocation",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidOutputLocation";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOutputLocation.prototype);
    }
}
exports.InvalidOutputLocation = InvalidOutputLocation;
class InvalidSchedule extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidSchedule",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidSchedule";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSchedule.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidSchedule = InvalidSchedule;
class InvalidTag extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidTag",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidTag";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTag.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidTag = InvalidTag;
class InvalidTarget extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidTarget",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidTarget";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTarget.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidTarget = InvalidTarget;
class InvalidTargetMaps extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidTargetMaps",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidTargetMaps";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTargetMaps.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidTargetMaps = InvalidTargetMaps;
class UnsupportedPlatformType extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "UnsupportedPlatformType",
            $fault: "client",
            ...opts
        });
        this.name = "UnsupportedPlatformType";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedPlatformType.prototype);
        this.Message = opts.Message;
    }
}
exports.UnsupportedPlatformType = UnsupportedPlatformType;
exports.Fault = {
    Client: "Client",
    Server: "Server",
    Unknown: "Unknown"
};
exports.AttachmentsSourceKey = {
    AttachmentReference: "AttachmentReference",
    S3FileUrl: "S3FileUrl",
    SourceUrl: "SourceUrl"
};
exports.DocumentFormat = {
    JSON: "JSON",
    TEXT: "TEXT",
    YAML: "YAML"
};
exports.DocumentType = {
    ApplicationConfiguration: "ApplicationConfiguration",
    ApplicationConfigurationSchema: "ApplicationConfigurationSchema",
    Automation: "Automation",
    ChangeCalendar: "ChangeCalendar",
    ChangeTemplate: "Automation.ChangeTemplate",
    CloudFormation: "CloudFormation",
    Command: "Command",
    ConformancePackTemplate: "ConformancePackTemplate",
    DeploymentStrategy: "DeploymentStrategy",
    Package: "Package",
    Policy: "Policy",
    ProblemAnalysis: "ProblemAnalysis",
    ProblemAnalysisTemplate: "ProblemAnalysisTemplate",
    QuickSetup: "QuickSetup",
    Session: "Session"
};
exports.DocumentHashType = {
    SHA1: "Sha1",
    SHA256: "Sha256"
};
exports.DocumentParameterType = {
    String: "String",
    StringList: "StringList"
};
exports.PlatformType = {
    LINUX: "Linux",
    MACOS: "MacOS",
    WINDOWS: "Windows"
};
exports.ReviewStatus = {
    APPROVED: "APPROVED",
    NOT_REVIEWED: "NOT_REVIEWED",
    PENDING: "PENDING",
    REJECTED: "REJECTED"
};
exports.DocumentStatus = {
    Active: "Active",
    Creating: "Creating",
    Deleting: "Deleting",
    Failed: "Failed",
    Updating: "Updating"
};
class DocumentAlreadyExists extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "DocumentAlreadyExists",
            $fault: "client",
            ...opts
        });
        this.name = "DocumentAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentAlreadyExists.prototype);
        this.Message = opts.Message;
    }
}
exports.DocumentAlreadyExists = DocumentAlreadyExists;
class DocumentLimitExceeded extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "DocumentLimitExceeded",
            $fault: "client",
            ...opts
        });
        this.name = "DocumentLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentLimitExceeded.prototype);
        this.Message = opts.Message;
    }
}
exports.DocumentLimitExceeded = DocumentLimitExceeded;
class InvalidDocumentContent extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidDocumentContent",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidDocumentContent";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentContent.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidDocumentContent = InvalidDocumentContent;
class InvalidDocumentSchemaVersion extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidDocumentSchemaVersion",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidDocumentSchemaVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentSchemaVersion.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidDocumentSchemaVersion = InvalidDocumentSchemaVersion;
class MaxDocumentSizeExceeded extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "MaxDocumentSizeExceeded",
            $fault: "client",
            ...opts
        });
        this.name = "MaxDocumentSizeExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaxDocumentSizeExceeded.prototype);
        this.Message = opts.Message;
    }
}
exports.MaxDocumentSizeExceeded = MaxDocumentSizeExceeded;
class IdempotentParameterMismatch extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "IdempotentParameterMismatch",
            $fault: "client",
            ...opts
        });
        this.name = "IdempotentParameterMismatch";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatch.prototype);
        this.Message = opts.Message;
    }
}
exports.IdempotentParameterMismatch = IdempotentParameterMismatch;
class ResourceLimitExceededException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ResourceLimitExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "ResourceLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceLimitExceededException = ResourceLimitExceededException;
exports.OpsItemDataType = {
    SEARCHABLE_STRING: "SearchableString",
    STRING: "String"
};
class OpsItemAccessDeniedException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "OpsItemAccessDeniedException",
            $fault: "client",
            ...opts
        });
        this.name = "OpsItemAccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemAccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
exports.OpsItemAccessDeniedException = OpsItemAccessDeniedException;
class OpsItemAlreadyExistsException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "OpsItemAlreadyExistsException",
            $fault: "client",
            ...opts
        });
        this.name = "OpsItemAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemAlreadyExistsException.prototype);
        this.Message = opts.Message;
        this.OpsItemId = opts.OpsItemId;
    }
}
exports.OpsItemAlreadyExistsException = OpsItemAlreadyExistsException;
class OpsMetadataAlreadyExistsException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "OpsMetadataAlreadyExistsException",
            $fault: "client",
            ...opts
        });
        this.name = "OpsMetadataAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataAlreadyExistsException.prototype);
    }
}
exports.OpsMetadataAlreadyExistsException = OpsMetadataAlreadyExistsException;
class OpsMetadataInvalidArgumentException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "OpsMetadataInvalidArgumentException",
            $fault: "client",
            ...opts
        });
        this.name = "OpsMetadataInvalidArgumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataInvalidArgumentException.prototype);
    }
}
exports.OpsMetadataInvalidArgumentException = OpsMetadataInvalidArgumentException;
class OpsMetadataLimitExceededException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "OpsMetadataLimitExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "OpsMetadataLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataLimitExceededException.prototype);
    }
}
exports.OpsMetadataLimitExceededException = OpsMetadataLimitExceededException;
class OpsMetadataTooManyUpdatesException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "OpsMetadataTooManyUpdatesException",
            $fault: "client",
            ...opts
        });
        this.name = "OpsMetadataTooManyUpdatesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataTooManyUpdatesException.prototype);
    }
}
exports.OpsMetadataTooManyUpdatesException = OpsMetadataTooManyUpdatesException;
exports.PatchComplianceLevel = {
    Critical: "CRITICAL",
    High: "HIGH",
    Informational: "INFORMATIONAL",
    Low: "LOW",
    Medium: "MEDIUM",
    Unspecified: "UNSPECIFIED"
};
exports.PatchFilterKey = {
    AdvisoryId: "ADVISORY_ID",
    Arch: "ARCH",
    BugzillaId: "BUGZILLA_ID",
    CVEId: "CVE_ID",
    Classification: "CLASSIFICATION",
    Epoch: "EPOCH",
    MsrcSeverity: "MSRC_SEVERITY",
    Name: "NAME",
    PatchId: "PATCH_ID",
    PatchSet: "PATCH_SET",
    Priority: "PRIORITY",
    Product: "PRODUCT",
    ProductFamily: "PRODUCT_FAMILY",
    Release: "RELEASE",
    Repository: "REPOSITORY",
    Section: "SECTION",
    Security: "SECURITY",
    Severity: "SEVERITY",
    Version: "VERSION"
};
exports.OperatingSystem = {
    AlmaLinux: "ALMA_LINUX",
    AmazonLinux: "AMAZON_LINUX",
    AmazonLinux2: "AMAZON_LINUX_2",
    AmazonLinux2022: "AMAZON_LINUX_2022",
    AmazonLinux2023: "AMAZON_LINUX_2023",
    CentOS: "CENTOS",
    Debian: "DEBIAN",
    MacOS: "MACOS",
    OracleLinux: "ORACLE_LINUX",
    Raspbian: "RASPBIAN",
    RedhatEnterpriseLinux: "REDHAT_ENTERPRISE_LINUX",
    Rocky_Linux: "ROCKY_LINUX",
    Suse: "SUSE",
    Ubuntu: "UBUNTU",
    Windows: "WINDOWS"
};
exports.PatchAction = {
    AllowAsDependency: "ALLOW_AS_DEPENDENCY",
    Block: "BLOCK"
};
exports.ResourceDataSyncS3Format = {
    JSON_SERDE: "JsonSerDe"
};
class ResourceDataSyncAlreadyExistsException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ResourceDataSyncAlreadyExistsException",
            $fault: "client",
            ...opts
        });
        this.name = "ResourceDataSyncAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncAlreadyExistsException.prototype);
        this.SyncName = opts.SyncName;
    }
}
exports.ResourceDataSyncAlreadyExistsException = ResourceDataSyncAlreadyExistsException;
class ResourceDataSyncCountExceededException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ResourceDataSyncCountExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "ResourceDataSyncCountExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncCountExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceDataSyncCountExceededException = ResourceDataSyncCountExceededException;
class ResourceDataSyncInvalidConfigurationException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ResourceDataSyncInvalidConfigurationException",
            $fault: "client",
            ...opts
        });
        this.name = "ResourceDataSyncInvalidConfigurationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncInvalidConfigurationException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceDataSyncInvalidConfigurationException = ResourceDataSyncInvalidConfigurationException;
class InvalidActivation extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidActivation",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidActivation";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidActivation.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidActivation = InvalidActivation;
class InvalidActivationId extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidActivationId",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidActivationId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidActivationId.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidActivationId = InvalidActivationId;
class AssociationDoesNotExist extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "AssociationDoesNotExist",
            $fault: "client",
            ...opts
        });
        this.name = "AssociationDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationDoesNotExist.prototype);
        this.Message = opts.Message;
    }
}
exports.AssociationDoesNotExist = AssociationDoesNotExist;
class AssociatedInstances extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "AssociatedInstances",
            $fault: "client",
            ...opts
        });
        this.name = "AssociatedInstances";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociatedInstances.prototype);
    }
}
exports.AssociatedInstances = AssociatedInstances;
class InvalidDocumentOperation extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidDocumentOperation",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidDocumentOperation";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentOperation.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidDocumentOperation = InvalidDocumentOperation;
exports.InventorySchemaDeleteOption = {
    DELETE_SCHEMA: "DeleteSchema",
    DISABLE_SCHEMA: "DisableSchema"
};
class InvalidDeleteInventoryParametersException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidDeleteInventoryParametersException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidDeleteInventoryParametersException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeleteInventoryParametersException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidDeleteInventoryParametersException = InvalidDeleteInventoryParametersException;
class InvalidInventoryRequestException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidInventoryRequestException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidInventoryRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInventoryRequestException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidInventoryRequestException = InvalidInventoryRequestException;
class InvalidOptionException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidOptionException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidOptionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOptionException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidOptionException = InvalidOptionException;
class InvalidTypeNameException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidTypeNameException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidTypeNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTypeNameException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidTypeNameException = InvalidTypeNameException;
class OpsMetadataNotFoundException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "OpsMetadataNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "OpsMetadataNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataNotFoundException.prototype);
    }
}
exports.OpsMetadataNotFoundException = OpsMetadataNotFoundException;
class ParameterNotFound extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ParameterNotFound",
            $fault: "client",
            ...opts
        });
        this.name = "ParameterNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterNotFound.prototype);
    }
}
exports.ParameterNotFound = ParameterNotFound;
class ResourceInUseException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceInUseException = ResourceInUseException;
class ResourceDataSyncNotFoundException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ResourceDataSyncNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "ResourceDataSyncNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncNotFoundException.prototype);
        this.SyncName = opts.SyncName;
        this.SyncType = opts.SyncType;
        this.Message = opts.Message;
    }
}
exports.ResourceDataSyncNotFoundException = ResourceDataSyncNotFoundException;
class ResourcePolicyConflictException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ResourcePolicyConflictException",
            $fault: "client",
            ...opts
        });
        this.name = "ResourcePolicyConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourcePolicyConflictException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourcePolicyConflictException = ResourcePolicyConflictException;
class ResourcePolicyInvalidParameterException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ResourcePolicyInvalidParameterException",
            $fault: "client",
            ...opts
        });
        this.name = "ResourcePolicyInvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourcePolicyInvalidParameterException.prototype);
        this.ParameterNames = opts.ParameterNames;
        this.Message = opts.Message;
    }
}
exports.ResourcePolicyInvalidParameterException = ResourcePolicyInvalidParameterException;
class TargetInUseException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "TargetInUseException",
            $fault: "client",
            ...opts
        });
        this.name = "TargetInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TargetInUseException.prototype);
        this.Message = opts.Message;
    }
}
exports.TargetInUseException = TargetInUseException;
exports.DescribeActivationsFilterKeys = {
    ACTIVATION_IDS: "ActivationIds",
    DEFAULT_INSTANCE_NAME: "DefaultInstanceName",
    IAM_ROLE: "IamRole"
};
class InvalidFilter extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidFilter",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidFilter";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilter.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidFilter = InvalidFilter;
class InvalidNextToken extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidNextToken",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidNextToken";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextToken.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidNextToken = InvalidNextToken;
class InvalidAssociationVersion extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidAssociationVersion",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidAssociationVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAssociationVersion.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidAssociationVersion = InvalidAssociationVersion;
exports.AssociationExecutionFilterKey = {
    CreatedTime: "CreatedTime",
    ExecutionId: "ExecutionId",
    Status: "Status"
};
exports.AssociationFilterOperatorType = {
    Equal: "EQUAL",
    GreaterThan: "GREATER_THAN",
    LessThan: "LESS_THAN"
};
class AssociationExecutionDoesNotExist extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "AssociationExecutionDoesNotExist",
            $fault: "client",
            ...opts
        });
        this.name = "AssociationExecutionDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationExecutionDoesNotExist.prototype);
        this.Message = opts.Message;
    }
}
exports.AssociationExecutionDoesNotExist = AssociationExecutionDoesNotExist;
exports.AssociationExecutionTargetsFilterKey = {
    ResourceId: "ResourceId",
    ResourceType: "ResourceType",
    Status: "Status"
};
exports.AutomationExecutionFilterKey = {
    AUTOMATION_SUBTYPE: "AutomationSubtype",
    AUTOMATION_TYPE: "AutomationType",
    CURRENT_ACTION: "CurrentAction",
    DOCUMENT_NAME_PREFIX: "DocumentNamePrefix",
    EXECUTION_ID: "ExecutionId",
    EXECUTION_STATUS: "ExecutionStatus",
    OPS_ITEM_ID: "OpsItemId",
    PARENT_EXECUTION_ID: "ParentExecutionId",
    START_TIME_AFTER: "StartTimeAfter",
    START_TIME_BEFORE: "StartTimeBefore",
    TAG_KEY: "TagKey",
    TARGET_RESOURCE_GROUP: "TargetResourceGroup"
};
exports.AutomationExecutionStatus = {
    APPROVED: "Approved",
    CANCELLED: "Cancelled",
    CANCELLING: "Cancelling",
    CHANGE_CALENDAR_OVERRIDE_APPROVED: "ChangeCalendarOverrideApproved",
    CHANGE_CALENDAR_OVERRIDE_REJECTED: "ChangeCalendarOverrideRejected",
    COMPLETED_WITH_FAILURE: "CompletedWithFailure",
    COMPLETED_WITH_SUCCESS: "CompletedWithSuccess",
    FAILED: "Failed",
    INPROGRESS: "InProgress",
    PENDING: "Pending",
    PENDING_APPROVAL: "PendingApproval",
    PENDING_CHANGE_CALENDAR_OVERRIDE: "PendingChangeCalendarOverride",
    REJECTED: "Rejected",
    RUNBOOK_INPROGRESS: "RunbookInProgress",
    SCHEDULED: "Scheduled",
    SUCCESS: "Success",
    TIMEDOUT: "TimedOut",
    WAITING: "Waiting"
};
exports.AutomationSubtype = {
    ChangeRequest: "ChangeRequest"
};
exports.AutomationType = {
    CrossAccount: "CrossAccount",
    Local: "Local"
};
exports.ExecutionMode = {
    Auto: "Auto",
    Interactive: "Interactive"
};
class InvalidFilterKey extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidFilterKey",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidFilterKey";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilterKey.prototype);
    }
}
exports.InvalidFilterKey = InvalidFilterKey;
class InvalidFilterValue extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidFilterValue",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidFilterValue";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilterValue.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidFilterValue = InvalidFilterValue;
class AutomationExecutionNotFoundException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "AutomationExecutionNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "AutomationExecutionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationExecutionNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.AutomationExecutionNotFoundException = AutomationExecutionNotFoundException;
exports.StepExecutionFilterKey = {
    ACTION: "Action",
    START_TIME_AFTER: "StartTimeAfter",
    START_TIME_BEFORE: "StartTimeBefore",
    STEP_EXECUTION_ID: "StepExecutionId",
    STEP_EXECUTION_STATUS: "StepExecutionStatus",
    STEP_NAME: "StepName"
};
exports.DocumentPermissionType = {
    SHARE: "Share"
};
class InvalidPermissionType extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidPermissionType",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidPermissionType";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPermissionType.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidPermissionType = InvalidPermissionType;
exports.PatchDeploymentStatus = {
    Approved: "APPROVED",
    ExplicitApproved: "EXPLICIT_APPROVED",
    ExplicitRejected: "EXPLICIT_REJECTED",
    PendingApproval: "PENDING_APPROVAL"
};
class UnsupportedOperatingSystem extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "UnsupportedOperatingSystem",
            $fault: "client",
            ...opts
        });
        this.name = "UnsupportedOperatingSystem";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedOperatingSystem.prototype);
        this.Message = opts.Message;
    }
}
exports.UnsupportedOperatingSystem = UnsupportedOperatingSystem;
exports.InstanceInformationFilterKey = {
    ACTIVATION_IDS: "ActivationIds",
    AGENT_VERSION: "AgentVersion",
    ASSOCIATION_STATUS: "AssociationStatus",
    IAM_ROLE: "IamRole",
    INSTANCE_IDS: "InstanceIds",
    PING_STATUS: "PingStatus",
    PLATFORM_TYPES: "PlatformTypes",
    RESOURCE_TYPE: "ResourceType"
};
exports.PingStatus = {
    CONNECTION_LOST: "ConnectionLost",
    INACTIVE: "Inactive",
    ONLINE: "Online"
};
exports.ResourceType = {
    DOCUMENT: "Document",
    EC2_INSTANCE: "EC2Instance",
    MANAGED_INSTANCE: "ManagedInstance"
};
exports.SourceType = {
    AWS_EC2_INSTANCE: "AWS::EC2::Instance",
    AWS_IOT_THING: "AWS::IoT::Thing",
    AWS_SSM_MANAGEDINSTANCE: "AWS::SSM::ManagedInstance"
};
class InvalidInstanceInformationFilterValue extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidInstanceInformationFilterValue",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidInstanceInformationFilterValue";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInstanceInformationFilterValue.prototype);
    }
}
exports.InvalidInstanceInformationFilterValue = InvalidInstanceInformationFilterValue;
exports.PatchComplianceDataState = {
    Failed: "FAILED",
    Installed: "INSTALLED",
    InstalledOther: "INSTALLED_OTHER",
    InstalledPendingReboot: "INSTALLED_PENDING_REBOOT",
    InstalledRejected: "INSTALLED_REJECTED",
    Missing: "MISSING",
    NotApplicable: "NOT_APPLICABLE"
};
exports.PatchOperationType = {
    INSTALL: "Install",
    SCAN: "Scan"
};
exports.RebootOption = {
    NO_REBOOT: "NoReboot",
    REBOOT_IF_NEEDED: "RebootIfNeeded"
};
exports.InstancePatchStateOperatorType = {
    EQUAL: "Equal",
    GREATER_THAN: "GreaterThan",
    LESS_THAN: "LessThan",
    NOT_EQUAL: "NotEqual"
};
exports.InventoryDeletionStatus = {
    COMPLETE: "Complete",
    IN_PROGRESS: "InProgress"
};
class InvalidDeletionIdException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidDeletionIdException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidDeletionIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeletionIdException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidDeletionIdException = InvalidDeletionIdException;
exports.MaintenanceWindowExecutionStatus = {
    Cancelled: "CANCELLED",
    Cancelling: "CANCELLING",
    Failed: "FAILED",
    InProgress: "IN_PROGRESS",
    Pending: "PENDING",
    SkippedOverlapping: "SKIPPED_OVERLAPPING",
    Success: "SUCCESS",
    TimedOut: "TIMED_OUT"
};
exports.MaintenanceWindowTaskType = {
    Automation: "AUTOMATION",
    Lambda: "LAMBDA",
    RunCommand: "RUN_COMMAND",
    StepFunctions: "STEP_FUNCTIONS"
};
exports.MaintenanceWindowResourceType = {
    Instance: "INSTANCE",
    ResourceGroup: "RESOURCE_GROUP"
};
exports.MaintenanceWindowTaskCutoffBehavior = {
    CancelTask: "CANCEL_TASK",
    ContinueTask: "CONTINUE_TASK"
};
exports.OpsItemFilterKey = {
    ACCOUNT_ID: "AccountId",
    ACTUAL_END_TIME: "ActualEndTime",
    ACTUAL_START_TIME: "ActualStartTime",
    AUTOMATION_ID: "AutomationId",
    CATEGORY: "Category",
    CHANGE_REQUEST_APPROVER_ARN: "ChangeRequestByApproverArn",
    CHANGE_REQUEST_APPROVER_NAME: "ChangeRequestByApproverName",
    CHANGE_REQUEST_REQUESTER_ARN: "ChangeRequestByRequesterArn",
    CHANGE_REQUEST_REQUESTER_NAME: "ChangeRequestByRequesterName",
    CHANGE_REQUEST_TARGETS_RESOURCE_GROUP: "ChangeRequestByTargetsResourceGroup",
    CHANGE_REQUEST_TEMPLATE: "ChangeRequestByTemplate",
    CREATED_BY: "CreatedBy",
    CREATED_TIME: "CreatedTime",
    INSIGHT_TYPE: "InsightByType",
    LAST_MODIFIED_TIME: "LastModifiedTime",
    OPERATIONAL_DATA: "OperationalData",
    OPERATIONAL_DATA_KEY: "OperationalDataKey",
    OPERATIONAL_DATA_VALUE: "OperationalDataValue",
    OPSITEM_ID: "OpsItemId",
    OPSITEM_TYPE: "OpsItemType",
    PLANNED_END_TIME: "PlannedEndTime",
    PLANNED_START_TIME: "PlannedStartTime",
    PRIORITY: "Priority",
    RESOURCE_ID: "ResourceId",
    SEVERITY: "Severity",
    SOURCE: "Source",
    STATUS: "Status",
    TITLE: "Title"
};
exports.OpsItemFilterOperator = {
    CONTAINS: "Contains",
    EQUAL: "Equal",
    GREATER_THAN: "GreaterThan",
    LESS_THAN: "LessThan"
};
const CreateAssociationRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Parameters && {
            Parameters: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.CreateAssociationRequestFilterSensitiveLog = CreateAssociationRequestFilterSensitiveLog;
const AssociationDescriptionFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Parameters && {
            Parameters: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.AssociationDescriptionFilterSensitiveLog = AssociationDescriptionFilterSensitiveLog;
const CreateAssociationResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.AssociationDescription && {
            AssociationDescription: (0, exports.AssociationDescriptionFilterSensitiveLog)(obj.AssociationDescription)
        }
    });
exports.CreateAssociationResultFilterSensitiveLog = CreateAssociationResultFilterSensitiveLog;
const CreateAssociationBatchRequestEntryFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Parameters && {
            Parameters: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.CreateAssociationBatchRequestEntryFilterSensitiveLog = CreateAssociationBatchRequestEntryFilterSensitiveLog;
const CreateAssociationBatchRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Entries && {
            Entries: obj.Entries.map((item)=>(0, exports.CreateAssociationBatchRequestEntryFilterSensitiveLog)(item))
        }
    });
exports.CreateAssociationBatchRequestFilterSensitiveLog = CreateAssociationBatchRequestFilterSensitiveLog;
const FailedCreateAssociationFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Entry && {
            Entry: (0, exports.CreateAssociationBatchRequestEntryFilterSensitiveLog)(obj.Entry)
        }
    });
exports.FailedCreateAssociationFilterSensitiveLog = FailedCreateAssociationFilterSensitiveLog;
const CreateAssociationBatchResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Successful && {
            Successful: obj.Successful.map((item)=>(0, exports.AssociationDescriptionFilterSensitiveLog)(item))
        },
        ...obj.Failed && {
            Failed: obj.Failed.map((item)=>(0, exports.FailedCreateAssociationFilterSensitiveLog)(item))
        }
    });
exports.CreateAssociationBatchResultFilterSensitiveLog = CreateAssociationBatchResultFilterSensitiveLog;
const CreateMaintenanceWindowRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Description && {
            Description: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.CreateMaintenanceWindowRequestFilterSensitiveLog = CreateMaintenanceWindowRequestFilterSensitiveLog;
const PatchSourceFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Configuration && {
            Configuration: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.PatchSourceFilterSensitiveLog = PatchSourceFilterSensitiveLog;
const CreatePatchBaselineRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Sources && {
            Sources: obj.Sources.map((item)=>(0, exports.PatchSourceFilterSensitiveLog)(item))
        }
    });
exports.CreatePatchBaselineRequestFilterSensitiveLog = CreatePatchBaselineRequestFilterSensitiveLog;
const DescribeAssociationResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.AssociationDescription && {
            AssociationDescription: (0, exports.AssociationDescriptionFilterSensitiveLog)(obj.AssociationDescription)
        }
    });
exports.DescribeAssociationResultFilterSensitiveLog = DescribeAssociationResultFilterSensitiveLog;
const InstancePatchStateFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.OwnerInformation && {
            OwnerInformation: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.InstancePatchStateFilterSensitiveLog = InstancePatchStateFilterSensitiveLog;
const DescribeInstancePatchStatesResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.InstancePatchStates && {
            InstancePatchStates: obj.InstancePatchStates.map((item)=>(0, exports.InstancePatchStateFilterSensitiveLog)(item))
        }
    });
exports.DescribeInstancePatchStatesResultFilterSensitiveLog = DescribeInstancePatchStatesResultFilterSensitiveLog;
const DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.InstancePatchStates && {
            InstancePatchStates: obj.InstancePatchStates.map((item)=>(0, exports.InstancePatchStateFilterSensitiveLog)(item))
        }
    });
exports.DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog = DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog;
const MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Parameters && {
            Parameters: smithy_client_1.SENSITIVE_STRING
        },
        ...obj.OwnerInformation && {
            OwnerInformation: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog = MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog;
const DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.WindowExecutionTaskInvocationIdentities && {
            WindowExecutionTaskInvocationIdentities: obj.WindowExecutionTaskInvocationIdentities.map((item)=>(0, exports.MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog)(item))
        }
    });
exports.DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog = DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog;
const MaintenanceWindowIdentityFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Description && {
            Description: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.MaintenanceWindowIdentityFilterSensitiveLog = MaintenanceWindowIdentityFilterSensitiveLog;
const DescribeMaintenanceWindowsResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.WindowIdentities && {
            WindowIdentities: obj.WindowIdentities.map((item)=>(0, exports.MaintenanceWindowIdentityFilterSensitiveLog)(item))
        }
    });
exports.DescribeMaintenanceWindowsResultFilterSensitiveLog = DescribeMaintenanceWindowsResultFilterSensitiveLog;
const MaintenanceWindowTargetFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.OwnerInformation && {
            OwnerInformation: smithy_client_1.SENSITIVE_STRING
        },
        ...obj.Description && {
            Description: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.MaintenanceWindowTargetFilterSensitiveLog = MaintenanceWindowTargetFilterSensitiveLog;
const DescribeMaintenanceWindowTargetsResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Targets && {
            Targets: obj.Targets.map((item)=>(0, exports.MaintenanceWindowTargetFilterSensitiveLog)(item))
        }
    });
exports.DescribeMaintenanceWindowTargetsResultFilterSensitiveLog = DescribeMaintenanceWindowTargetsResultFilterSensitiveLog;
const MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Values && {
            Values: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog = MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog;
const MaintenanceWindowTaskFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.TaskParameters && {
            TaskParameters: smithy_client_1.SENSITIVE_STRING
        },
        ...obj.Description && {
            Description: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.MaintenanceWindowTaskFilterSensitiveLog = MaintenanceWindowTaskFilterSensitiveLog;
const DescribeMaintenanceWindowTasksResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Tasks && {
            Tasks: obj.Tasks.map((item)=>(0, exports.MaintenanceWindowTaskFilterSensitiveLog)(item))
        }
    });
exports.DescribeMaintenanceWindowTasksResultFilterSensitiveLog = DescribeMaintenanceWindowTasksResultFilterSensitiveLog;


/***/ }),

/***/ 75367:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.InvalidItemContentException = exports.ComplianceTypeCountLimitExceededException = exports.DocumentPermissionLimit = exports.LastResourceDataSyncStatus = exports.OpsItemRelatedItemsFilterOperator = exports.OpsItemRelatedItemsFilterKey = exports.OpsItemEventFilterOperator = exports.OpsItemEventFilterKey = exports.DocumentFilterKey = exports.DocumentReviewCommentType = exports.DocumentMetadataEnum = exports.ComplianceStatus = exports.ComplianceSeverity = exports.ComplianceQueryOperatorType = exports.CommandStatus = exports.CommandPluginStatus = exports.CommandFilterKey = exports.AssociationFilterKey = exports.ParameterVersionLabelLimitExceeded = exports.ServiceSettingNotFound = exports.ParameterVersionNotFound = exports.InvalidKeyId = exports.OpsFilterOperatorType = exports.NotificationType = exports.NotificationEvent = exports.InventoryAttributeDataType = exports.InvalidResultAttributeException = exports.InvalidInventoryGroupException = exports.InvalidAggregatorException = exports.InventoryQueryOperatorType = exports.AttachmentHashType = exports.UnsupportedFeatureRequiredException = exports.ConnectionStatus = exports.InvocationDoesNotExist = exports.InvalidPluginName = exports.CommandInvocationStatus = exports.UnsupportedCalendarException = exports.InvalidDocumentType = exports.CalendarState = exports.OpsItemRelatedItemAssociationNotFoundException = exports.SessionStatus = exports.SessionState = exports.SessionFilterKey = exports.PatchProperty = exports.PatchSet = exports.InvalidFilterOption = exports.ParameterType = exports.ParameterTier = exports.ParametersFilterKey = exports.OpsItemStatus = void 0;
exports.ParameterFilterSensitiveLog = exports.GetMaintenanceWindowTaskResultFilterSensitiveLog = exports.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog = exports.MaintenanceWindowStepFunctionsParametersFilterSensitiveLog = exports.MaintenanceWindowRunCommandParametersFilterSensitiveLog = exports.MaintenanceWindowLambdaParametersFilterSensitiveLog = exports.GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog = exports.GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog = exports.GetMaintenanceWindowResultFilterSensitiveLog = exports.GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog = exports.BaselineOverrideFilterSensitiveLog = exports.AssociationVersionLimitExceeded = exports.StopType = exports.InvalidAutomationStatusUpdateException = exports.TargetNotConnected = exports.AutomationDefinitionNotApprovedException = exports.InvalidAutomationExecutionParametersException = exports.AutomationExecutionLimitExceededException = exports.AutomationDefinitionVersionNotFoundException = exports.AutomationDefinitionNotFoundException = exports.InvalidAssociation = exports.InvalidRole = exports.InvalidOutputFolder = exports.InvalidNotificationConfig = exports.SignalType = exports.InvalidAutomationSignalException = exports.AutomationStepNotFoundException = exports.FeatureNotAvailableException = exports.ResourcePolicyLimitExceededException = exports.UnsupportedParameterType = exports.PoliciesLimitExceededException = exports.ParameterPatternMismatchException = exports.ParameterMaxVersionLimitExceeded = exports.ParameterLimitExceeded = exports.ParameterAlreadyExists = exports.InvalidPolicyTypeException = exports.InvalidPolicyAttributeException = exports.InvalidAllowedPatternException = exports.IncompatiblePolicyException = exports.HierarchyTypeMismatchException = exports.HierarchyLevelLimitExceededException = exports.UnsupportedInventorySchemaVersionException = exports.UnsupportedInventoryItemContextException = exports.SubTypeCountLimitExceededException = exports.ItemContentMismatchException = exports.InvalidInventoryItemContextException = exports.CustomSchemaCountLimitExceededException = exports.TotalSizeLimitExceededException = exports.ComplianceUploadType = exports.ItemSizeLimitExceededException = void 0;
exports.SendCommandResultFilterSensitiveLog = exports.SendCommandRequestFilterSensitiveLog = exports.RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog = exports.RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog = exports.PutParameterRequestFilterSensitiveLog = exports.ListCommandsResultFilterSensitiveLog = exports.CommandFilterSensitiveLog = exports.ListAssociationVersionsResultFilterSensitiveLog = exports.AssociationVersionInfoFilterSensitiveLog = exports.GetPatchBaselineResultFilterSensitiveLog = exports.GetParametersByPathResultFilterSensitiveLog = exports.GetParametersResultFilterSensitiveLog = exports.GetParameterHistoryResultFilterSensitiveLog = exports.ParameterHistoryFilterSensitiveLog = exports.GetParameterResultFilterSensitiveLog = void 0;
const smithy_client_1 = __webpack_require__(69775);
const models_0_1 = __webpack_require__(26130);
const SSMServiceException_1 = __webpack_require__(94334);
exports.OpsItemStatus = {
    APPROVED: "Approved",
    CANCELLED: "Cancelled",
    CANCELLING: "Cancelling",
    CHANGE_CALENDAR_OVERRIDE_APPROVED: "ChangeCalendarOverrideApproved",
    CHANGE_CALENDAR_OVERRIDE_REJECTED: "ChangeCalendarOverrideRejected",
    CLOSED: "Closed",
    COMPLETED_WITH_FAILURE: "CompletedWithFailure",
    COMPLETED_WITH_SUCCESS: "CompletedWithSuccess",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    OPEN: "Open",
    PENDING: "Pending",
    PENDING_APPROVAL: "PendingApproval",
    PENDING_CHANGE_CALENDAR_OVERRIDE: "PendingChangeCalendarOverride",
    REJECTED: "Rejected",
    RESOLVED: "Resolved",
    RUNBOOK_IN_PROGRESS: "RunbookInProgress",
    SCHEDULED: "Scheduled",
    TIMED_OUT: "TimedOut"
};
exports.ParametersFilterKey = {
    KEY_ID: "KeyId",
    NAME: "Name",
    TYPE: "Type"
};
exports.ParameterTier = {
    ADVANCED: "Advanced",
    INTELLIGENT_TIERING: "Intelligent-Tiering",
    STANDARD: "Standard"
};
exports.ParameterType = {
    SECURE_STRING: "SecureString",
    STRING: "String",
    STRING_LIST: "StringList"
};
class InvalidFilterOption extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidFilterOption",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidFilterOption";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilterOption.prototype);
    }
}
exports.InvalidFilterOption = InvalidFilterOption;
exports.PatchSet = {
    Application: "APPLICATION",
    Os: "OS"
};
exports.PatchProperty = {
    PatchClassification: "CLASSIFICATION",
    PatchMsrcSeverity: "MSRC_SEVERITY",
    PatchPriority: "PRIORITY",
    PatchProductFamily: "PRODUCT_FAMILY",
    PatchSeverity: "SEVERITY",
    Product: "PRODUCT"
};
exports.SessionFilterKey = {
    INVOKED_AFTER: "InvokedAfter",
    INVOKED_BEFORE: "InvokedBefore",
    OWNER: "Owner",
    SESSION_ID: "SessionId",
    STATUS: "Status",
    TARGET_ID: "Target"
};
exports.SessionState = {
    ACTIVE: "Active",
    HISTORY: "History"
};
exports.SessionStatus = {
    CONNECTED: "Connected",
    CONNECTING: "Connecting",
    DISCONNECTED: "Disconnected",
    FAILED: "Failed",
    TERMINATED: "Terminated",
    TERMINATING: "Terminating"
};
class OpsItemRelatedItemAssociationNotFoundException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "OpsItemRelatedItemAssociationNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "OpsItemRelatedItemAssociationNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemRelatedItemAssociationNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.OpsItemRelatedItemAssociationNotFoundException = OpsItemRelatedItemAssociationNotFoundException;
exports.CalendarState = {
    CLOSED: "CLOSED",
    OPEN: "OPEN"
};
class InvalidDocumentType extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidDocumentType",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidDocumentType";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentType.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidDocumentType = InvalidDocumentType;
class UnsupportedCalendarException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "UnsupportedCalendarException",
            $fault: "client",
            ...opts
        });
        this.name = "UnsupportedCalendarException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedCalendarException.prototype);
        this.Message = opts.Message;
    }
}
exports.UnsupportedCalendarException = UnsupportedCalendarException;
exports.CommandInvocationStatus = {
    CANCELLED: "Cancelled",
    CANCELLING: "Cancelling",
    DELAYED: "Delayed",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    PENDING: "Pending",
    SUCCESS: "Success",
    TIMED_OUT: "TimedOut"
};
class InvalidPluginName extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidPluginName",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidPluginName";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPluginName.prototype);
    }
}
exports.InvalidPluginName = InvalidPluginName;
class InvocationDoesNotExist extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvocationDoesNotExist",
            $fault: "client",
            ...opts
        });
        this.name = "InvocationDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvocationDoesNotExist.prototype);
    }
}
exports.InvocationDoesNotExist = InvocationDoesNotExist;
exports.ConnectionStatus = {
    CONNECTED: "Connected",
    NOT_CONNECTED: "NotConnected"
};
class UnsupportedFeatureRequiredException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "UnsupportedFeatureRequiredException",
            $fault: "client",
            ...opts
        });
        this.name = "UnsupportedFeatureRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedFeatureRequiredException.prototype);
        this.Message = opts.Message;
    }
}
exports.UnsupportedFeatureRequiredException = UnsupportedFeatureRequiredException;
exports.AttachmentHashType = {
    SHA256: "Sha256"
};
exports.InventoryQueryOperatorType = {
    BEGIN_WITH: "BeginWith",
    EQUAL: "Equal",
    EXISTS: "Exists",
    GREATER_THAN: "GreaterThan",
    LESS_THAN: "LessThan",
    NOT_EQUAL: "NotEqual"
};
class InvalidAggregatorException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidAggregatorException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidAggregatorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAggregatorException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidAggregatorException = InvalidAggregatorException;
class InvalidInventoryGroupException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidInventoryGroupException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidInventoryGroupException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInventoryGroupException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidInventoryGroupException = InvalidInventoryGroupException;
class InvalidResultAttributeException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidResultAttributeException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidResultAttributeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResultAttributeException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidResultAttributeException = InvalidResultAttributeException;
exports.InventoryAttributeDataType = {
    NUMBER: "number",
    STRING: "string"
};
exports.NotificationEvent = {
    ALL: "All",
    CANCELLED: "Cancelled",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    SUCCESS: "Success",
    TIMED_OUT: "TimedOut"
};
exports.NotificationType = {
    Command: "Command",
    Invocation: "Invocation"
};
exports.OpsFilterOperatorType = {
    BEGIN_WITH: "BeginWith",
    EQUAL: "Equal",
    EXISTS: "Exists",
    GREATER_THAN: "GreaterThan",
    LESS_THAN: "LessThan",
    NOT_EQUAL: "NotEqual"
};
class InvalidKeyId extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidKeyId",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidKeyId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidKeyId.prototype);
    }
}
exports.InvalidKeyId = InvalidKeyId;
class ParameterVersionNotFound extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ParameterVersionNotFound",
            $fault: "client",
            ...opts
        });
        this.name = "ParameterVersionNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterVersionNotFound.prototype);
    }
}
exports.ParameterVersionNotFound = ParameterVersionNotFound;
class ServiceSettingNotFound extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ServiceSettingNotFound",
            $fault: "client",
            ...opts
        });
        this.name = "ServiceSettingNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceSettingNotFound.prototype);
        this.Message = opts.Message;
    }
}
exports.ServiceSettingNotFound = ServiceSettingNotFound;
class ParameterVersionLabelLimitExceeded extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ParameterVersionLabelLimitExceeded",
            $fault: "client",
            ...opts
        });
        this.name = "ParameterVersionLabelLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterVersionLabelLimitExceeded.prototype);
    }
}
exports.ParameterVersionLabelLimitExceeded = ParameterVersionLabelLimitExceeded;
exports.AssociationFilterKey = {
    AssociationId: "AssociationId",
    AssociationName: "AssociationName",
    InstanceId: "InstanceId",
    LastExecutedAfter: "LastExecutedAfter",
    LastExecutedBefore: "LastExecutedBefore",
    Name: "Name",
    ResourceGroupName: "ResourceGroupName",
    Status: "AssociationStatusName"
};
exports.CommandFilterKey = {
    DOCUMENT_NAME: "DocumentName",
    EXECUTION_STAGE: "ExecutionStage",
    INVOKED_AFTER: "InvokedAfter",
    INVOKED_BEFORE: "InvokedBefore",
    STATUS: "Status"
};
exports.CommandPluginStatus = {
    CANCELLED: "Cancelled",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    PENDING: "Pending",
    SUCCESS: "Success",
    TIMED_OUT: "TimedOut"
};
exports.CommandStatus = {
    CANCELLED: "Cancelled",
    CANCELLING: "Cancelling",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    PENDING: "Pending",
    SUCCESS: "Success",
    TIMED_OUT: "TimedOut"
};
exports.ComplianceQueryOperatorType = {
    BeginWith: "BEGIN_WITH",
    Equal: "EQUAL",
    GreaterThan: "GREATER_THAN",
    LessThan: "LESS_THAN",
    NotEqual: "NOT_EQUAL"
};
exports.ComplianceSeverity = {
    Critical: "CRITICAL",
    High: "HIGH",
    Informational: "INFORMATIONAL",
    Low: "LOW",
    Medium: "MEDIUM",
    Unspecified: "UNSPECIFIED"
};
exports.ComplianceStatus = {
    Compliant: "COMPLIANT",
    NonCompliant: "NON_COMPLIANT"
};
exports.DocumentMetadataEnum = {
    DocumentReviews: "DocumentReviews"
};
exports.DocumentReviewCommentType = {
    Comment: "Comment"
};
exports.DocumentFilterKey = {
    DocumentType: "DocumentType",
    Name: "Name",
    Owner: "Owner",
    PlatformTypes: "PlatformTypes"
};
exports.OpsItemEventFilterKey = {
    OPSITEM_ID: "OpsItemId"
};
exports.OpsItemEventFilterOperator = {
    EQUAL: "Equal"
};
exports.OpsItemRelatedItemsFilterKey = {
    ASSOCIATION_ID: "AssociationId",
    RESOURCE_TYPE: "ResourceType",
    RESOURCE_URI: "ResourceUri"
};
exports.OpsItemRelatedItemsFilterOperator = {
    EQUAL: "Equal"
};
exports.LastResourceDataSyncStatus = {
    FAILED: "Failed",
    INPROGRESS: "InProgress",
    SUCCESSFUL: "Successful"
};
class DocumentPermissionLimit extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "DocumentPermissionLimit",
            $fault: "client",
            ...opts
        });
        this.name = "DocumentPermissionLimit";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentPermissionLimit.prototype);
        this.Message = opts.Message;
    }
}
exports.DocumentPermissionLimit = DocumentPermissionLimit;
class ComplianceTypeCountLimitExceededException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ComplianceTypeCountLimitExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "ComplianceTypeCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ComplianceTypeCountLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.ComplianceTypeCountLimitExceededException = ComplianceTypeCountLimitExceededException;
class InvalidItemContentException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidItemContentException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidItemContentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidItemContentException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
    }
}
exports.InvalidItemContentException = InvalidItemContentException;
class ItemSizeLimitExceededException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ItemSizeLimitExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "ItemSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ItemSizeLimitExceededException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
    }
}
exports.ItemSizeLimitExceededException = ItemSizeLimitExceededException;
exports.ComplianceUploadType = {
    Complete: "COMPLETE",
    Partial: "PARTIAL"
};
class TotalSizeLimitExceededException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "TotalSizeLimitExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "TotalSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TotalSizeLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.TotalSizeLimitExceededException = TotalSizeLimitExceededException;
class CustomSchemaCountLimitExceededException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "CustomSchemaCountLimitExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "CustomSchemaCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomSchemaCountLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.CustomSchemaCountLimitExceededException = CustomSchemaCountLimitExceededException;
class InvalidInventoryItemContextException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidInventoryItemContextException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidInventoryItemContextException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInventoryItemContextException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidInventoryItemContextException = InvalidInventoryItemContextException;
class ItemContentMismatchException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ItemContentMismatchException",
            $fault: "client",
            ...opts
        });
        this.name = "ItemContentMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ItemContentMismatchException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
    }
}
exports.ItemContentMismatchException = ItemContentMismatchException;
class SubTypeCountLimitExceededException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "SubTypeCountLimitExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "SubTypeCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SubTypeCountLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.SubTypeCountLimitExceededException = SubTypeCountLimitExceededException;
class UnsupportedInventoryItemContextException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "UnsupportedInventoryItemContextException",
            $fault: "client",
            ...opts
        });
        this.name = "UnsupportedInventoryItemContextException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedInventoryItemContextException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
    }
}
exports.UnsupportedInventoryItemContextException = UnsupportedInventoryItemContextException;
class UnsupportedInventorySchemaVersionException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "UnsupportedInventorySchemaVersionException",
            $fault: "client",
            ...opts
        });
        this.name = "UnsupportedInventorySchemaVersionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedInventorySchemaVersionException.prototype);
        this.Message = opts.Message;
    }
}
exports.UnsupportedInventorySchemaVersionException = UnsupportedInventorySchemaVersionException;
class HierarchyLevelLimitExceededException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "HierarchyLevelLimitExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "HierarchyLevelLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, HierarchyLevelLimitExceededException.prototype);
    }
}
exports.HierarchyLevelLimitExceededException = HierarchyLevelLimitExceededException;
class HierarchyTypeMismatchException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "HierarchyTypeMismatchException",
            $fault: "client",
            ...opts
        });
        this.name = "HierarchyTypeMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, HierarchyTypeMismatchException.prototype);
    }
}
exports.HierarchyTypeMismatchException = HierarchyTypeMismatchException;
class IncompatiblePolicyException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "IncompatiblePolicyException",
            $fault: "client",
            ...opts
        });
        this.name = "IncompatiblePolicyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IncompatiblePolicyException.prototype);
    }
}
exports.IncompatiblePolicyException = IncompatiblePolicyException;
class InvalidAllowedPatternException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidAllowedPatternException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidAllowedPatternException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAllowedPatternException.prototype);
    }
}
exports.InvalidAllowedPatternException = InvalidAllowedPatternException;
class InvalidPolicyAttributeException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidPolicyAttributeException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidPolicyAttributeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPolicyAttributeException.prototype);
    }
}
exports.InvalidPolicyAttributeException = InvalidPolicyAttributeException;
class InvalidPolicyTypeException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidPolicyTypeException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidPolicyTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPolicyTypeException.prototype);
    }
}
exports.InvalidPolicyTypeException = InvalidPolicyTypeException;
class ParameterAlreadyExists extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ParameterAlreadyExists",
            $fault: "client",
            ...opts
        });
        this.name = "ParameterAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterAlreadyExists.prototype);
    }
}
exports.ParameterAlreadyExists = ParameterAlreadyExists;
class ParameterLimitExceeded extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ParameterLimitExceeded",
            $fault: "client",
            ...opts
        });
        this.name = "ParameterLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterLimitExceeded.prototype);
    }
}
exports.ParameterLimitExceeded = ParameterLimitExceeded;
class ParameterMaxVersionLimitExceeded extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ParameterMaxVersionLimitExceeded",
            $fault: "client",
            ...opts
        });
        this.name = "ParameterMaxVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterMaxVersionLimitExceeded.prototype);
    }
}
exports.ParameterMaxVersionLimitExceeded = ParameterMaxVersionLimitExceeded;
class ParameterPatternMismatchException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ParameterPatternMismatchException",
            $fault: "client",
            ...opts
        });
        this.name = "ParameterPatternMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterPatternMismatchException.prototype);
    }
}
exports.ParameterPatternMismatchException = ParameterPatternMismatchException;
class PoliciesLimitExceededException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "PoliciesLimitExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "PoliciesLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PoliciesLimitExceededException.prototype);
    }
}
exports.PoliciesLimitExceededException = PoliciesLimitExceededException;
class UnsupportedParameterType extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "UnsupportedParameterType",
            $fault: "client",
            ...opts
        });
        this.name = "UnsupportedParameterType";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedParameterType.prototype);
    }
}
exports.UnsupportedParameterType = UnsupportedParameterType;
class ResourcePolicyLimitExceededException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ResourcePolicyLimitExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "ResourcePolicyLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourcePolicyLimitExceededException.prototype);
        this.Limit = opts.Limit;
        this.LimitType = opts.LimitType;
        this.Message = opts.Message;
    }
}
exports.ResourcePolicyLimitExceededException = ResourcePolicyLimitExceededException;
class FeatureNotAvailableException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "FeatureNotAvailableException",
            $fault: "client",
            ...opts
        });
        this.name = "FeatureNotAvailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FeatureNotAvailableException.prototype);
        this.Message = opts.Message;
    }
}
exports.FeatureNotAvailableException = FeatureNotAvailableException;
class AutomationStepNotFoundException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "AutomationStepNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "AutomationStepNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationStepNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.AutomationStepNotFoundException = AutomationStepNotFoundException;
class InvalidAutomationSignalException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidAutomationSignalException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidAutomationSignalException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAutomationSignalException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidAutomationSignalException = InvalidAutomationSignalException;
exports.SignalType = {
    APPROVE: "Approve",
    REJECT: "Reject",
    RESUME: "Resume",
    START_STEP: "StartStep",
    STOP_STEP: "StopStep"
};
class InvalidNotificationConfig extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidNotificationConfig",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidNotificationConfig";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNotificationConfig.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidNotificationConfig = InvalidNotificationConfig;
class InvalidOutputFolder extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidOutputFolder",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidOutputFolder";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOutputFolder.prototype);
    }
}
exports.InvalidOutputFolder = InvalidOutputFolder;
class InvalidRole extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidRole",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidRole";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRole.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidRole = InvalidRole;
class InvalidAssociation extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidAssociation",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidAssociation";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAssociation.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidAssociation = InvalidAssociation;
class AutomationDefinitionNotFoundException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "AutomationDefinitionNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "AutomationDefinitionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationDefinitionNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.AutomationDefinitionNotFoundException = AutomationDefinitionNotFoundException;
class AutomationDefinitionVersionNotFoundException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "AutomationDefinitionVersionNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "AutomationDefinitionVersionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationDefinitionVersionNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.AutomationDefinitionVersionNotFoundException = AutomationDefinitionVersionNotFoundException;
class AutomationExecutionLimitExceededException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "AutomationExecutionLimitExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "AutomationExecutionLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationExecutionLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.AutomationExecutionLimitExceededException = AutomationExecutionLimitExceededException;
class InvalidAutomationExecutionParametersException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidAutomationExecutionParametersException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidAutomationExecutionParametersException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAutomationExecutionParametersException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidAutomationExecutionParametersException = InvalidAutomationExecutionParametersException;
class AutomationDefinitionNotApprovedException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "AutomationDefinitionNotApprovedException",
            $fault: "client",
            ...opts
        });
        this.name = "AutomationDefinitionNotApprovedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationDefinitionNotApprovedException.prototype);
        this.Message = opts.Message;
    }
}
exports.AutomationDefinitionNotApprovedException = AutomationDefinitionNotApprovedException;
class TargetNotConnected extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "TargetNotConnected",
            $fault: "client",
            ...opts
        });
        this.name = "TargetNotConnected";
        this.$fault = "client";
        Object.setPrototypeOf(this, TargetNotConnected.prototype);
        this.Message = opts.Message;
    }
}
exports.TargetNotConnected = TargetNotConnected;
class InvalidAutomationStatusUpdateException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidAutomationStatusUpdateException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidAutomationStatusUpdateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAutomationStatusUpdateException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidAutomationStatusUpdateException = InvalidAutomationStatusUpdateException;
exports.StopType = {
    CANCEL: "Cancel",
    COMPLETE: "Complete"
};
class AssociationVersionLimitExceeded extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "AssociationVersionLimitExceeded",
            $fault: "client",
            ...opts
        });
        this.name = "AssociationVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationVersionLimitExceeded.prototype);
        this.Message = opts.Message;
    }
}
exports.AssociationVersionLimitExceeded = AssociationVersionLimitExceeded;
const BaselineOverrideFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Sources && {
            Sources: obj.Sources.map((item)=>(0, models_0_1.PatchSourceFilterSensitiveLog)(item))
        }
    });
exports.BaselineOverrideFilterSensitiveLog = BaselineOverrideFilterSensitiveLog;
const GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog = (obj)=>({
        ...obj
    });
exports.GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog = GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog;
const GetMaintenanceWindowResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Description && {
            Description: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.GetMaintenanceWindowResultFilterSensitiveLog = GetMaintenanceWindowResultFilterSensitiveLog;
const GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.TaskParameters && {
            TaskParameters: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog = GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog;
const GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Parameters && {
            Parameters: smithy_client_1.SENSITIVE_STRING
        },
        ...obj.OwnerInformation && {
            OwnerInformation: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog = GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog;
const MaintenanceWindowLambdaParametersFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Payload && {
            Payload: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.MaintenanceWindowLambdaParametersFilterSensitiveLog = MaintenanceWindowLambdaParametersFilterSensitiveLog;
const MaintenanceWindowRunCommandParametersFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Parameters && {
            Parameters: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.MaintenanceWindowRunCommandParametersFilterSensitiveLog = MaintenanceWindowRunCommandParametersFilterSensitiveLog;
const MaintenanceWindowStepFunctionsParametersFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Input && {
            Input: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.MaintenanceWindowStepFunctionsParametersFilterSensitiveLog = MaintenanceWindowStepFunctionsParametersFilterSensitiveLog;
const MaintenanceWindowTaskInvocationParametersFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.RunCommand && {
            RunCommand: (0, exports.MaintenanceWindowRunCommandParametersFilterSensitiveLog)(obj.RunCommand)
        },
        ...obj.StepFunctions && {
            StepFunctions: (0, exports.MaintenanceWindowStepFunctionsParametersFilterSensitiveLog)(obj.StepFunctions)
        },
        ...obj.Lambda && {
            Lambda: (0, exports.MaintenanceWindowLambdaParametersFilterSensitiveLog)(obj.Lambda)
        }
    });
exports.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog = MaintenanceWindowTaskInvocationParametersFilterSensitiveLog;
const GetMaintenanceWindowTaskResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.TaskParameters && {
            TaskParameters: smithy_client_1.SENSITIVE_STRING
        },
        ...obj.TaskInvocationParameters && {
            TaskInvocationParameters: (0, exports.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog)(obj.TaskInvocationParameters)
        },
        ...obj.Description && {
            Description: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.GetMaintenanceWindowTaskResultFilterSensitiveLog = GetMaintenanceWindowTaskResultFilterSensitiveLog;
const ParameterFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Value && {
            Value: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.ParameterFilterSensitiveLog = ParameterFilterSensitiveLog;
const GetParameterResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Parameter && {
            Parameter: (0, exports.ParameterFilterSensitiveLog)(obj.Parameter)
        }
    });
exports.GetParameterResultFilterSensitiveLog = GetParameterResultFilterSensitiveLog;
const ParameterHistoryFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Value && {
            Value: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.ParameterHistoryFilterSensitiveLog = ParameterHistoryFilterSensitiveLog;
const GetParameterHistoryResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Parameters && {
            Parameters: obj.Parameters.map((item)=>(0, exports.ParameterHistoryFilterSensitiveLog)(item))
        }
    });
exports.GetParameterHistoryResultFilterSensitiveLog = GetParameterHistoryResultFilterSensitiveLog;
const GetParametersResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Parameters && {
            Parameters: obj.Parameters.map((item)=>(0, exports.ParameterFilterSensitiveLog)(item))
        }
    });
exports.GetParametersResultFilterSensitiveLog = GetParametersResultFilterSensitiveLog;
const GetParametersByPathResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Parameters && {
            Parameters: obj.Parameters.map((item)=>(0, exports.ParameterFilterSensitiveLog)(item))
        }
    });
exports.GetParametersByPathResultFilterSensitiveLog = GetParametersByPathResultFilterSensitiveLog;
const GetPatchBaselineResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Sources && {
            Sources: obj.Sources.map((item)=>(0, models_0_1.PatchSourceFilterSensitiveLog)(item))
        }
    });
exports.GetPatchBaselineResultFilterSensitiveLog = GetPatchBaselineResultFilterSensitiveLog;
const AssociationVersionInfoFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Parameters && {
            Parameters: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.AssociationVersionInfoFilterSensitiveLog = AssociationVersionInfoFilterSensitiveLog;
const ListAssociationVersionsResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.AssociationVersions && {
            AssociationVersions: obj.AssociationVersions.map((item)=>(0, exports.AssociationVersionInfoFilterSensitiveLog)(item))
        }
    });
exports.ListAssociationVersionsResultFilterSensitiveLog = ListAssociationVersionsResultFilterSensitiveLog;
const CommandFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Parameters && {
            Parameters: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.CommandFilterSensitiveLog = CommandFilterSensitiveLog;
const ListCommandsResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Commands && {
            Commands: obj.Commands.map((item)=>(0, exports.CommandFilterSensitiveLog)(item))
        }
    });
exports.ListCommandsResultFilterSensitiveLog = ListCommandsResultFilterSensitiveLog;
const PutParameterRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Value && {
            Value: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.PutParameterRequestFilterSensitiveLog = PutParameterRequestFilterSensitiveLog;
const RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.OwnerInformation && {
            OwnerInformation: smithy_client_1.SENSITIVE_STRING
        },
        ...obj.Description && {
            Description: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog = RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog;
const RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.TaskParameters && {
            TaskParameters: smithy_client_1.SENSITIVE_STRING
        },
        ...obj.TaskInvocationParameters && {
            TaskInvocationParameters: (0, exports.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog)(obj.TaskInvocationParameters)
        },
        ...obj.Description && {
            Description: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog = RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog;
const SendCommandRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Parameters && {
            Parameters: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.SendCommandRequestFilterSensitiveLog = SendCommandRequestFilterSensitiveLog;
const SendCommandResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Command && {
            Command: (0, exports.CommandFilterSensitiveLog)(obj.Command)
        }
    });
exports.SendCommandResultFilterSensitiveLog = SendCommandResultFilterSensitiveLog;


/***/ }),

/***/ 25853:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.UpdatePatchBaselineResultFilterSensitiveLog = exports.UpdatePatchBaselineRequestFilterSensitiveLog = exports.UpdateMaintenanceWindowTaskResultFilterSensitiveLog = exports.UpdateMaintenanceWindowTaskRequestFilterSensitiveLog = exports.UpdateMaintenanceWindowTargetResultFilterSensitiveLog = exports.UpdateMaintenanceWindowTargetRequestFilterSensitiveLog = exports.UpdateMaintenanceWindowResultFilterSensitiveLog = exports.UpdateMaintenanceWindowRequestFilterSensitiveLog = exports.UpdateAssociationStatusResultFilterSensitiveLog = exports.UpdateAssociationResultFilterSensitiveLog = exports.UpdateAssociationRequestFilterSensitiveLog = exports.ResourceDataSyncConflictException = exports.OpsMetadataKeyLimitExceededException = exports.DocumentReviewAction = exports.DuplicateDocumentVersionName = exports.DuplicateDocumentContent = exports.DocumentVersionLimitExceeded = exports.StatusUnchanged = exports.InvalidUpdate = void 0;
const smithy_client_1 = __webpack_require__(69775);
const models_0_1 = __webpack_require__(26130);
const models_1_1 = __webpack_require__(75367);
const SSMServiceException_1 = __webpack_require__(94334);
class InvalidUpdate extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "InvalidUpdate",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidUpdate";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidUpdate.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidUpdate = InvalidUpdate;
class StatusUnchanged extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "StatusUnchanged",
            $fault: "client",
            ...opts
        });
        this.name = "StatusUnchanged";
        this.$fault = "client";
        Object.setPrototypeOf(this, StatusUnchanged.prototype);
    }
}
exports.StatusUnchanged = StatusUnchanged;
class DocumentVersionLimitExceeded extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "DocumentVersionLimitExceeded",
            $fault: "client",
            ...opts
        });
        this.name = "DocumentVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentVersionLimitExceeded.prototype);
        this.Message = opts.Message;
    }
}
exports.DocumentVersionLimitExceeded = DocumentVersionLimitExceeded;
class DuplicateDocumentContent extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "DuplicateDocumentContent",
            $fault: "client",
            ...opts
        });
        this.name = "DuplicateDocumentContent";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateDocumentContent.prototype);
        this.Message = opts.Message;
    }
}
exports.DuplicateDocumentContent = DuplicateDocumentContent;
class DuplicateDocumentVersionName extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "DuplicateDocumentVersionName",
            $fault: "client",
            ...opts
        });
        this.name = "DuplicateDocumentVersionName";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateDocumentVersionName.prototype);
        this.Message = opts.Message;
    }
}
exports.DuplicateDocumentVersionName = DuplicateDocumentVersionName;
exports.DocumentReviewAction = {
    Approve: "Approve",
    Reject: "Reject",
    SendForReview: "SendForReview",
    UpdateReview: "UpdateReview"
};
class OpsMetadataKeyLimitExceededException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "OpsMetadataKeyLimitExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "OpsMetadataKeyLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataKeyLimitExceededException.prototype);
    }
}
exports.OpsMetadataKeyLimitExceededException = OpsMetadataKeyLimitExceededException;
class ResourceDataSyncConflictException extends SSMServiceException_1.SSMServiceException {
    constructor(opts){
        super({
            name: "ResourceDataSyncConflictException",
            $fault: "client",
            ...opts
        });
        this.name = "ResourceDataSyncConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncConflictException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceDataSyncConflictException = ResourceDataSyncConflictException;
const UpdateAssociationRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Parameters && {
            Parameters: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.UpdateAssociationRequestFilterSensitiveLog = UpdateAssociationRequestFilterSensitiveLog;
const UpdateAssociationResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.AssociationDescription && {
            AssociationDescription: (0, models_0_1.AssociationDescriptionFilterSensitiveLog)(obj.AssociationDescription)
        }
    });
exports.UpdateAssociationResultFilterSensitiveLog = UpdateAssociationResultFilterSensitiveLog;
const UpdateAssociationStatusResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.AssociationDescription && {
            AssociationDescription: (0, models_0_1.AssociationDescriptionFilterSensitiveLog)(obj.AssociationDescription)
        }
    });
exports.UpdateAssociationStatusResultFilterSensitiveLog = UpdateAssociationStatusResultFilterSensitiveLog;
const UpdateMaintenanceWindowRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Description && {
            Description: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.UpdateMaintenanceWindowRequestFilterSensitiveLog = UpdateMaintenanceWindowRequestFilterSensitiveLog;
const UpdateMaintenanceWindowResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Description && {
            Description: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.UpdateMaintenanceWindowResultFilterSensitiveLog = UpdateMaintenanceWindowResultFilterSensitiveLog;
const UpdateMaintenanceWindowTargetRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.OwnerInformation && {
            OwnerInformation: smithy_client_1.SENSITIVE_STRING
        },
        ...obj.Description && {
            Description: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.UpdateMaintenanceWindowTargetRequestFilterSensitiveLog = UpdateMaintenanceWindowTargetRequestFilterSensitiveLog;
const UpdateMaintenanceWindowTargetResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.OwnerInformation && {
            OwnerInformation: smithy_client_1.SENSITIVE_STRING
        },
        ...obj.Description && {
            Description: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.UpdateMaintenanceWindowTargetResultFilterSensitiveLog = UpdateMaintenanceWindowTargetResultFilterSensitiveLog;
const UpdateMaintenanceWindowTaskRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.TaskParameters && {
            TaskParameters: smithy_client_1.SENSITIVE_STRING
        },
        ...obj.TaskInvocationParameters && {
            TaskInvocationParameters: (0, models_1_1.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog)(obj.TaskInvocationParameters)
        },
        ...obj.Description && {
            Description: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.UpdateMaintenanceWindowTaskRequestFilterSensitiveLog = UpdateMaintenanceWindowTaskRequestFilterSensitiveLog;
const UpdateMaintenanceWindowTaskResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.TaskParameters && {
            TaskParameters: smithy_client_1.SENSITIVE_STRING
        },
        ...obj.TaskInvocationParameters && {
            TaskInvocationParameters: (0, models_1_1.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog)(obj.TaskInvocationParameters)
        },
        ...obj.Description && {
            Description: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.UpdateMaintenanceWindowTaskResultFilterSensitiveLog = UpdateMaintenanceWindowTaskResultFilterSensitiveLog;
const UpdatePatchBaselineRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Sources && {
            Sources: obj.Sources.map((item)=>(0, models_0_1.PatchSourceFilterSensitiveLog)(item))
        }
    });
exports.UpdatePatchBaselineRequestFilterSensitiveLog = UpdatePatchBaselineRequestFilterSensitiveLog;
const UpdatePatchBaselineResultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Sources && {
            Sources: obj.Sources.map((item)=>(0, models_0_1.PatchSourceFilterSensitiveLog)(item))
        }
    });
exports.UpdatePatchBaselineResultFilterSensitiveLog = UpdatePatchBaselineResultFilterSensitiveLog;


/***/ }),

/***/ 4503:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeActivations = void 0;
const DescribeActivationsCommand_1 = __webpack_require__(63259);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeActivationsCommand_1.DescribeActivationsCommand(input), ...args);
};
async function* paginateDescribeActivations(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeActivations = paginateDescribeActivations;


/***/ }),

/***/ 36796:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeAssociationExecutionTargets = void 0;
const DescribeAssociationExecutionTargetsCommand_1 = __webpack_require__(16889);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeAssociationExecutionTargetsCommand_1.DescribeAssociationExecutionTargetsCommand(input), ...args);
};
async function* paginateDescribeAssociationExecutionTargets(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeAssociationExecutionTargets = paginateDescribeAssociationExecutionTargets;


/***/ }),

/***/ 31767:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeAssociationExecutions = void 0;
const DescribeAssociationExecutionsCommand_1 = __webpack_require__(1873);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeAssociationExecutionsCommand_1.DescribeAssociationExecutionsCommand(input), ...args);
};
async function* paginateDescribeAssociationExecutions(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeAssociationExecutions = paginateDescribeAssociationExecutions;


/***/ }),

/***/ 70415:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeAutomationExecutions = void 0;
const DescribeAutomationExecutionsCommand_1 = __webpack_require__(84054);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeAutomationExecutionsCommand_1.DescribeAutomationExecutionsCommand(input), ...args);
};
async function* paginateDescribeAutomationExecutions(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeAutomationExecutions = paginateDescribeAutomationExecutions;


/***/ }),

/***/ 25054:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeAutomationStepExecutions = void 0;
const DescribeAutomationStepExecutionsCommand_1 = __webpack_require__(50471);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeAutomationStepExecutionsCommand_1.DescribeAutomationStepExecutionsCommand(input), ...args);
};
async function* paginateDescribeAutomationStepExecutions(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeAutomationStepExecutions = paginateDescribeAutomationStepExecutions;


/***/ }),

/***/ 95420:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeAvailablePatches = void 0;
const DescribeAvailablePatchesCommand_1 = __webpack_require__(95146);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeAvailablePatchesCommand_1.DescribeAvailablePatchesCommand(input), ...args);
};
async function* paginateDescribeAvailablePatches(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeAvailablePatches = paginateDescribeAvailablePatches;


/***/ }),

/***/ 89140:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeEffectiveInstanceAssociations = void 0;
const DescribeEffectiveInstanceAssociationsCommand_1 = __webpack_require__(85938);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeEffectiveInstanceAssociationsCommand_1.DescribeEffectiveInstanceAssociationsCommand(input), ...args);
};
async function* paginateDescribeEffectiveInstanceAssociations(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeEffectiveInstanceAssociations = paginateDescribeEffectiveInstanceAssociations;


/***/ }),

/***/ 35571:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeEffectivePatchesForPatchBaseline = void 0;
const DescribeEffectivePatchesForPatchBaselineCommand_1 = __webpack_require__(26277);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeEffectivePatchesForPatchBaselineCommand_1.DescribeEffectivePatchesForPatchBaselineCommand(input), ...args);
};
async function* paginateDescribeEffectivePatchesForPatchBaseline(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeEffectivePatchesForPatchBaseline = paginateDescribeEffectivePatchesForPatchBaseline;


/***/ }),

/***/ 50228:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeInstanceAssociationsStatus = void 0;
const DescribeInstanceAssociationsStatusCommand_1 = __webpack_require__(12411);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeInstanceAssociationsStatusCommand_1.DescribeInstanceAssociationsStatusCommand(input), ...args);
};
async function* paginateDescribeInstanceAssociationsStatus(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeInstanceAssociationsStatus = paginateDescribeInstanceAssociationsStatus;


/***/ }),

/***/ 34103:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeInstanceInformation = void 0;
const DescribeInstanceInformationCommand_1 = __webpack_require__(15894);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeInstanceInformationCommand_1.DescribeInstanceInformationCommand(input), ...args);
};
async function* paginateDescribeInstanceInformation(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeInstanceInformation = paginateDescribeInstanceInformation;


/***/ }),

/***/ 92303:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeInstancePatchStatesForPatchGroup = void 0;
const DescribeInstancePatchStatesForPatchGroupCommand_1 = __webpack_require__(3854);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeInstancePatchStatesForPatchGroupCommand_1.DescribeInstancePatchStatesForPatchGroupCommand(input), ...args);
};
async function* paginateDescribeInstancePatchStatesForPatchGroup(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeInstancePatchStatesForPatchGroup = paginateDescribeInstancePatchStatesForPatchGroup;


/***/ }),

/***/ 95871:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeInstancePatchStates = void 0;
const DescribeInstancePatchStatesCommand_1 = __webpack_require__(11430);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeInstancePatchStatesCommand_1.DescribeInstancePatchStatesCommand(input), ...args);
};
async function* paginateDescribeInstancePatchStates(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeInstancePatchStates = paginateDescribeInstancePatchStates;


/***/ }),

/***/ 36716:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeInstancePatches = void 0;
const DescribeInstancePatchesCommand_1 = __webpack_require__(89400);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeInstancePatchesCommand_1.DescribeInstancePatchesCommand(input), ...args);
};
async function* paginateDescribeInstancePatches(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeInstancePatches = paginateDescribeInstancePatches;


/***/ }),

/***/ 33741:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeInventoryDeletions = void 0;
const DescribeInventoryDeletionsCommand_1 = __webpack_require__(585);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeInventoryDeletionsCommand_1.DescribeInventoryDeletionsCommand(input), ...args);
};
async function* paginateDescribeInventoryDeletions(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeInventoryDeletions = paginateDescribeInventoryDeletions;


/***/ }),

/***/ 57707:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeMaintenanceWindowExecutionTaskInvocations = void 0;
const DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1 = __webpack_require__(39528);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1.DescribeMaintenanceWindowExecutionTaskInvocationsCommand(input), ...args);
};
async function* paginateDescribeMaintenanceWindowExecutionTaskInvocations(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeMaintenanceWindowExecutionTaskInvocations = paginateDescribeMaintenanceWindowExecutionTaskInvocations;


/***/ }),

/***/ 44182:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeMaintenanceWindowExecutionTasks = void 0;
const DescribeMaintenanceWindowExecutionTasksCommand_1 = __webpack_require__(53946);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeMaintenanceWindowExecutionTasksCommand_1.DescribeMaintenanceWindowExecutionTasksCommand(input), ...args);
};
async function* paginateDescribeMaintenanceWindowExecutionTasks(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeMaintenanceWindowExecutionTasks = paginateDescribeMaintenanceWindowExecutionTasks;


/***/ }),

/***/ 24773:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeMaintenanceWindowExecutions = void 0;
const DescribeMaintenanceWindowExecutionsCommand_1 = __webpack_require__(19925);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeMaintenanceWindowExecutionsCommand_1.DescribeMaintenanceWindowExecutionsCommand(input), ...args);
};
async function* paginateDescribeMaintenanceWindowExecutions(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeMaintenanceWindowExecutions = paginateDescribeMaintenanceWindowExecutions;


/***/ }),

/***/ 90995:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeMaintenanceWindowSchedule = void 0;
const DescribeMaintenanceWindowScheduleCommand_1 = __webpack_require__(60928);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeMaintenanceWindowScheduleCommand_1.DescribeMaintenanceWindowScheduleCommand(input), ...args);
};
async function* paginateDescribeMaintenanceWindowSchedule(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeMaintenanceWindowSchedule = paginateDescribeMaintenanceWindowSchedule;


/***/ }),

/***/ 13639:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeMaintenanceWindowTargets = void 0;
const DescribeMaintenanceWindowTargetsCommand_1 = __webpack_require__(30048);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeMaintenanceWindowTargetsCommand_1.DescribeMaintenanceWindowTargetsCommand(input), ...args);
};
async function* paginateDescribeMaintenanceWindowTargets(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeMaintenanceWindowTargets = paginateDescribeMaintenanceWindowTargets;


/***/ }),

/***/ 3354:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeMaintenanceWindowTasks = void 0;
const DescribeMaintenanceWindowTasksCommand_1 = __webpack_require__(26665);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeMaintenanceWindowTasksCommand_1.DescribeMaintenanceWindowTasksCommand(input), ...args);
};
async function* paginateDescribeMaintenanceWindowTasks(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeMaintenanceWindowTasks = paginateDescribeMaintenanceWindowTasks;


/***/ }),

/***/ 33159:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeMaintenanceWindowsForTarget = void 0;
const DescribeMaintenanceWindowsForTargetCommand_1 = __webpack_require__(72249);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeMaintenanceWindowsForTargetCommand_1.DescribeMaintenanceWindowsForTargetCommand(input), ...args);
};
async function* paginateDescribeMaintenanceWindowsForTarget(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeMaintenanceWindowsForTarget = paginateDescribeMaintenanceWindowsForTarget;


/***/ }),

/***/ 50542:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeMaintenanceWindows = void 0;
const DescribeMaintenanceWindowsCommand_1 = __webpack_require__(57977);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeMaintenanceWindowsCommand_1.DescribeMaintenanceWindowsCommand(input), ...args);
};
async function* paginateDescribeMaintenanceWindows(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeMaintenanceWindows = paginateDescribeMaintenanceWindows;


/***/ }),

/***/ 56338:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeOpsItems = void 0;
const DescribeOpsItemsCommand_1 = __webpack_require__(61344);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeOpsItemsCommand_1.DescribeOpsItemsCommand(input), ...args);
};
async function* paginateDescribeOpsItems(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeOpsItems = paginateDescribeOpsItems;


/***/ }),

/***/ 3713:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeParameters = void 0;
const DescribeParametersCommand_1 = __webpack_require__(6047);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeParametersCommand_1.DescribeParametersCommand(input), ...args);
};
async function* paginateDescribeParameters(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeParameters = paginateDescribeParameters;


/***/ }),

/***/ 97725:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribePatchBaselines = void 0;
const DescribePatchBaselinesCommand_1 = __webpack_require__(78214);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribePatchBaselinesCommand_1.DescribePatchBaselinesCommand(input), ...args);
};
async function* paginateDescribePatchBaselines(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribePatchBaselines = paginateDescribePatchBaselines;


/***/ }),

/***/ 81006:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribePatchGroups = void 0;
const DescribePatchGroupsCommand_1 = __webpack_require__(60505);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribePatchGroupsCommand_1.DescribePatchGroupsCommand(input), ...args);
};
async function* paginateDescribePatchGroups(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribePatchGroups = paginateDescribePatchGroups;


/***/ }),

/***/ 35498:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribePatchProperties = void 0;
const DescribePatchPropertiesCommand_1 = __webpack_require__(69513);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribePatchPropertiesCommand_1.DescribePatchPropertiesCommand(input), ...args);
};
async function* paginateDescribePatchProperties(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribePatchProperties = paginateDescribePatchProperties;


/***/ }),

/***/ 61018:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateDescribeSessions = void 0;
const DescribeSessionsCommand_1 = __webpack_require__(12826);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new DescribeSessionsCommand_1.DescribeSessionsCommand(input), ...args);
};
async function* paginateDescribeSessions(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateDescribeSessions = paginateDescribeSessions;


/***/ }),

/***/ 74281:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateGetInventory = void 0;
const GetInventoryCommand_1 = __webpack_require__(90803);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new GetInventoryCommand_1.GetInventoryCommand(input), ...args);
};
async function* paginateGetInventory(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateGetInventory = paginateGetInventory;


/***/ }),

/***/ 74154:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateGetInventorySchema = void 0;
const GetInventorySchemaCommand_1 = __webpack_require__(87500);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new GetInventorySchemaCommand_1.GetInventorySchemaCommand(input), ...args);
};
async function* paginateGetInventorySchema(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateGetInventorySchema = paginateGetInventorySchema;


/***/ }),

/***/ 53524:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateGetOpsSummary = void 0;
const GetOpsSummaryCommand_1 = __webpack_require__(27696);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new GetOpsSummaryCommand_1.GetOpsSummaryCommand(input), ...args);
};
async function* paginateGetOpsSummary(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateGetOpsSummary = paginateGetOpsSummary;


/***/ }),

/***/ 61460:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateGetParameterHistory = void 0;
const GetParameterHistoryCommand_1 = __webpack_require__(89414);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new GetParameterHistoryCommand_1.GetParameterHistoryCommand(input), ...args);
};
async function* paginateGetParameterHistory(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateGetParameterHistory = paginateGetParameterHistory;


/***/ }),

/***/ 57033:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateGetParametersByPath = void 0;
const GetParametersByPathCommand_1 = __webpack_require__(44446);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new GetParametersByPathCommand_1.GetParametersByPathCommand(input), ...args);
};
async function* paginateGetParametersByPath(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateGetParametersByPath = paginateGetParametersByPath;


/***/ }),

/***/ 19025:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateGetResourcePolicies = void 0;
const GetResourcePoliciesCommand_1 = __webpack_require__(64306);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new GetResourcePoliciesCommand_1.GetResourcePoliciesCommand(input), ...args);
};
async function* paginateGetResourcePolicies(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateGetResourcePolicies = paginateGetResourcePolicies;


/***/ }),

/***/ 78235:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 11267:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateListAssociationVersions = void 0;
const ListAssociationVersionsCommand_1 = __webpack_require__(61634);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new ListAssociationVersionsCommand_1.ListAssociationVersionsCommand(input), ...args);
};
async function* paginateListAssociationVersions(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateListAssociationVersions = paginateListAssociationVersions;


/***/ }),

/***/ 22692:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateListAssociations = void 0;
const ListAssociationsCommand_1 = __webpack_require__(62636);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new ListAssociationsCommand_1.ListAssociationsCommand(input), ...args);
};
async function* paginateListAssociations(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateListAssociations = paginateListAssociations;


/***/ }),

/***/ 7783:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateListCommandInvocations = void 0;
const ListCommandInvocationsCommand_1 = __webpack_require__(71481);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new ListCommandInvocationsCommand_1.ListCommandInvocationsCommand(input), ...args);
};
async function* paginateListCommandInvocations(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateListCommandInvocations = paginateListCommandInvocations;


/***/ }),

/***/ 57670:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateListCommands = void 0;
const ListCommandsCommand_1 = __webpack_require__(72637);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new ListCommandsCommand_1.ListCommandsCommand(input), ...args);
};
async function* paginateListCommands(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateListCommands = paginateListCommands;


/***/ }),

/***/ 84789:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateListComplianceItems = void 0;
const ListComplianceItemsCommand_1 = __webpack_require__(45910);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new ListComplianceItemsCommand_1.ListComplianceItemsCommand(input), ...args);
};
async function* paginateListComplianceItems(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateListComplianceItems = paginateListComplianceItems;


/***/ }),

/***/ 37161:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateListComplianceSummaries = void 0;
const ListComplianceSummariesCommand_1 = __webpack_require__(34401);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new ListComplianceSummariesCommand_1.ListComplianceSummariesCommand(input), ...args);
};
async function* paginateListComplianceSummaries(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateListComplianceSummaries = paginateListComplianceSummaries;


/***/ }),

/***/ 26823:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateListDocumentVersions = void 0;
const ListDocumentVersionsCommand_1 = __webpack_require__(88029);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new ListDocumentVersionsCommand_1.ListDocumentVersionsCommand(input), ...args);
};
async function* paginateListDocumentVersions(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateListDocumentVersions = paginateListDocumentVersions;


/***/ }),

/***/ 11336:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateListDocuments = void 0;
const ListDocumentsCommand_1 = __webpack_require__(57275);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new ListDocumentsCommand_1.ListDocumentsCommand(input), ...args);
};
async function* paginateListDocuments(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateListDocuments = paginateListDocuments;


/***/ }),

/***/ 68250:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateListOpsItemEvents = void 0;
const ListOpsItemEventsCommand_1 = __webpack_require__(59144);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new ListOpsItemEventsCommand_1.ListOpsItemEventsCommand(input), ...args);
};
async function* paginateListOpsItemEvents(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateListOpsItemEvents = paginateListOpsItemEvents;


/***/ }),

/***/ 66646:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateListOpsItemRelatedItems = void 0;
const ListOpsItemRelatedItemsCommand_1 = __webpack_require__(73539);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new ListOpsItemRelatedItemsCommand_1.ListOpsItemRelatedItemsCommand(input), ...args);
};
async function* paginateListOpsItemRelatedItems(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateListOpsItemRelatedItems = paginateListOpsItemRelatedItems;


/***/ }),

/***/ 70044:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateListOpsMetadata = void 0;
const ListOpsMetadataCommand_1 = __webpack_require__(20114);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new ListOpsMetadataCommand_1.ListOpsMetadataCommand(input), ...args);
};
async function* paginateListOpsMetadata(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateListOpsMetadata = paginateListOpsMetadata;


/***/ }),

/***/ 40630:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateListResourceComplianceSummaries = void 0;
const ListResourceComplianceSummariesCommand_1 = __webpack_require__(8602);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new ListResourceComplianceSummariesCommand_1.ListResourceComplianceSummariesCommand(input), ...args);
};
async function* paginateListResourceComplianceSummaries(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateListResourceComplianceSummaries = paginateListResourceComplianceSummaries;


/***/ }),

/***/ 15210:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateListResourceDataSync = void 0;
const ListResourceDataSyncCommand_1 = __webpack_require__(17168);
const SSMClient_1 = __webpack_require__(70171);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new ListResourceDataSyncCommand_1.ListResourceDataSyncCommand(input), ...args);
};
async function* paginateListResourceDataSync(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateListResourceDataSync = paginateListResourceDataSync;


/***/ }),

/***/ 97381:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(4503), exports);
tslib_1.__exportStar(__webpack_require__(36796), exports);
tslib_1.__exportStar(__webpack_require__(31767), exports);
tslib_1.__exportStar(__webpack_require__(70415), exports);
tslib_1.__exportStar(__webpack_require__(25054), exports);
tslib_1.__exportStar(__webpack_require__(95420), exports);
tslib_1.__exportStar(__webpack_require__(89140), exports);
tslib_1.__exportStar(__webpack_require__(35571), exports);
tslib_1.__exportStar(__webpack_require__(50228), exports);
tslib_1.__exportStar(__webpack_require__(34103), exports);
tslib_1.__exportStar(__webpack_require__(78235), exports);
tslib_1.__exportStar(__webpack_require__(92303), exports);
tslib_1.__exportStar(__webpack_require__(95871), exports);
tslib_1.__exportStar(__webpack_require__(36716), exports);
tslib_1.__exportStar(__webpack_require__(33741), exports);
tslib_1.__exportStar(__webpack_require__(57707), exports);
tslib_1.__exportStar(__webpack_require__(44182), exports);
tslib_1.__exportStar(__webpack_require__(24773), exports);
tslib_1.__exportStar(__webpack_require__(90995), exports);
tslib_1.__exportStar(__webpack_require__(13639), exports);
tslib_1.__exportStar(__webpack_require__(3354), exports);
tslib_1.__exportStar(__webpack_require__(33159), exports);
tslib_1.__exportStar(__webpack_require__(50542), exports);
tslib_1.__exportStar(__webpack_require__(56338), exports);
tslib_1.__exportStar(__webpack_require__(3713), exports);
tslib_1.__exportStar(__webpack_require__(97725), exports);
tslib_1.__exportStar(__webpack_require__(81006), exports);
tslib_1.__exportStar(__webpack_require__(35498), exports);
tslib_1.__exportStar(__webpack_require__(61018), exports);
tslib_1.__exportStar(__webpack_require__(74281), exports);
tslib_1.__exportStar(__webpack_require__(74154), exports);
tslib_1.__exportStar(__webpack_require__(53524), exports);
tslib_1.__exportStar(__webpack_require__(61460), exports);
tslib_1.__exportStar(__webpack_require__(57033), exports);
tslib_1.__exportStar(__webpack_require__(19025), exports);
tslib_1.__exportStar(__webpack_require__(11267), exports);
tslib_1.__exportStar(__webpack_require__(22692), exports);
tslib_1.__exportStar(__webpack_require__(7783), exports);
tslib_1.__exportStar(__webpack_require__(57670), exports);
tslib_1.__exportStar(__webpack_require__(84789), exports);
tslib_1.__exportStar(__webpack_require__(37161), exports);
tslib_1.__exportStar(__webpack_require__(26823), exports);
tslib_1.__exportStar(__webpack_require__(11336), exports);
tslib_1.__exportStar(__webpack_require__(68250), exports);
tslib_1.__exportStar(__webpack_require__(66646), exports);
tslib_1.__exportStar(__webpack_require__(70044), exports);
tslib_1.__exportStar(__webpack_require__(40630), exports);
tslib_1.__exportStar(__webpack_require__(15210), exports);


/***/ }),

/***/ 2490:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.se_DescribeMaintenanceWindowScheduleCommand = exports.se_DescribeMaintenanceWindowsCommand = exports.se_DescribeMaintenanceWindowExecutionTasksCommand = exports.se_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = exports.se_DescribeMaintenanceWindowExecutionsCommand = exports.se_DescribeInventoryDeletionsCommand = exports.se_DescribeInstancePatchStatesForPatchGroupCommand = exports.se_DescribeInstancePatchStatesCommand = exports.se_DescribeInstancePatchesCommand = exports.se_DescribeInstanceInformationCommand = exports.se_DescribeInstanceAssociationsStatusCommand = exports.se_DescribeEffectivePatchesForPatchBaselineCommand = exports.se_DescribeEffectiveInstanceAssociationsCommand = exports.se_DescribeDocumentPermissionCommand = exports.se_DescribeDocumentCommand = exports.se_DescribeAvailablePatchesCommand = exports.se_DescribeAutomationStepExecutionsCommand = exports.se_DescribeAutomationExecutionsCommand = exports.se_DescribeAssociationExecutionTargetsCommand = exports.se_DescribeAssociationExecutionsCommand = exports.se_DescribeAssociationCommand = exports.se_DescribeActivationsCommand = exports.se_DeregisterTaskFromMaintenanceWindowCommand = exports.se_DeregisterTargetFromMaintenanceWindowCommand = exports.se_DeregisterPatchBaselineForPatchGroupCommand = exports.se_DeregisterManagedInstanceCommand = exports.se_DeleteResourcePolicyCommand = exports.se_DeleteResourceDataSyncCommand = exports.se_DeletePatchBaselineCommand = exports.se_DeleteParametersCommand = exports.se_DeleteParameterCommand = exports.se_DeleteOpsMetadataCommand = exports.se_DeleteMaintenanceWindowCommand = exports.se_DeleteInventoryCommand = exports.se_DeleteDocumentCommand = exports.se_DeleteAssociationCommand = exports.se_DeleteActivationCommand = exports.se_CreateResourceDataSyncCommand = exports.se_CreatePatchBaselineCommand = exports.se_CreateOpsMetadataCommand = exports.se_CreateOpsItemCommand = exports.se_CreateMaintenanceWindowCommand = exports.se_CreateDocumentCommand = exports.se_CreateAssociationBatchCommand = exports.se_CreateAssociationCommand = exports.se_CreateActivationCommand = exports.se_CancelMaintenanceWindowExecutionCommand = exports.se_CancelCommandCommand = exports.se_AssociateOpsItemRelatedItemCommand = exports.se_AddTagsToResourceCommand = void 0;
exports.se_ListOpsMetadataCommand = exports.se_ListOpsItemRelatedItemsCommand = exports.se_ListOpsItemEventsCommand = exports.se_ListInventoryEntriesCommand = exports.se_ListDocumentVersionsCommand = exports.se_ListDocumentsCommand = exports.se_ListDocumentMetadataHistoryCommand = exports.se_ListComplianceSummariesCommand = exports.se_ListComplianceItemsCommand = exports.se_ListCommandsCommand = exports.se_ListCommandInvocationsCommand = exports.se_ListAssociationVersionsCommand = exports.se_ListAssociationsCommand = exports.se_LabelParameterVersionCommand = exports.se_GetServiceSettingCommand = exports.se_GetResourcePoliciesCommand = exports.se_GetPatchBaselineForPatchGroupCommand = exports.se_GetPatchBaselineCommand = exports.se_GetParametersByPathCommand = exports.se_GetParametersCommand = exports.se_GetParameterHistoryCommand = exports.se_GetParameterCommand = exports.se_GetOpsSummaryCommand = exports.se_GetOpsMetadataCommand = exports.se_GetOpsItemCommand = exports.se_GetMaintenanceWindowTaskCommand = exports.se_GetMaintenanceWindowExecutionTaskInvocationCommand = exports.se_GetMaintenanceWindowExecutionTaskCommand = exports.se_GetMaintenanceWindowExecutionCommand = exports.se_GetMaintenanceWindowCommand = exports.se_GetInventorySchemaCommand = exports.se_GetInventoryCommand = exports.se_GetDocumentCommand = exports.se_GetDeployablePatchSnapshotForInstanceCommand = exports.se_GetDefaultPatchBaselineCommand = exports.se_GetConnectionStatusCommand = exports.se_GetCommandInvocationCommand = exports.se_GetCalendarStateCommand = exports.se_GetAutomationExecutionCommand = exports.se_DisassociateOpsItemRelatedItemCommand = exports.se_DescribeSessionsCommand = exports.se_DescribePatchPropertiesCommand = exports.se_DescribePatchGroupStateCommand = exports.se_DescribePatchGroupsCommand = exports.se_DescribePatchBaselinesCommand = exports.se_DescribeParametersCommand = exports.se_DescribeOpsItemsCommand = exports.se_DescribeMaintenanceWindowTasksCommand = exports.se_DescribeMaintenanceWindowTargetsCommand = exports.se_DescribeMaintenanceWindowsForTargetCommand = void 0;
exports.de_CreatePatchBaselineCommand = exports.de_CreateOpsMetadataCommand = exports.de_CreateOpsItemCommand = exports.de_CreateMaintenanceWindowCommand = exports.de_CreateDocumentCommand = exports.de_CreateAssociationBatchCommand = exports.de_CreateAssociationCommand = exports.de_CreateActivationCommand = exports.de_CancelMaintenanceWindowExecutionCommand = exports.de_CancelCommandCommand = exports.de_AssociateOpsItemRelatedItemCommand = exports.de_AddTagsToResourceCommand = exports.se_UpdateServiceSettingCommand = exports.se_UpdateResourceDataSyncCommand = exports.se_UpdatePatchBaselineCommand = exports.se_UpdateOpsMetadataCommand = exports.se_UpdateOpsItemCommand = exports.se_UpdateManagedInstanceRoleCommand = exports.se_UpdateMaintenanceWindowTaskCommand = exports.se_UpdateMaintenanceWindowTargetCommand = exports.se_UpdateMaintenanceWindowCommand = exports.se_UpdateDocumentMetadataCommand = exports.se_UpdateDocumentDefaultVersionCommand = exports.se_UpdateDocumentCommand = exports.se_UpdateAssociationStatusCommand = exports.se_UpdateAssociationCommand = exports.se_UnlabelParameterVersionCommand = exports.se_TerminateSessionCommand = exports.se_StopAutomationExecutionCommand = exports.se_StartSessionCommand = exports.se_StartChangeRequestExecutionCommand = exports.se_StartAutomationExecutionCommand = exports.se_StartAssociationsOnceCommand = exports.se_SendCommandCommand = exports.se_SendAutomationSignalCommand = exports.se_ResumeSessionCommand = exports.se_ResetServiceSettingCommand = exports.se_RemoveTagsFromResourceCommand = exports.se_RegisterTaskWithMaintenanceWindowCommand = exports.se_RegisterTargetWithMaintenanceWindowCommand = exports.se_RegisterPatchBaselineForPatchGroupCommand = exports.se_RegisterDefaultPatchBaselineCommand = exports.se_PutResourcePolicyCommand = exports.se_PutParameterCommand = exports.se_PutInventoryCommand = exports.se_PutComplianceItemsCommand = exports.se_ModifyDocumentPermissionCommand = exports.se_ListTagsForResourceCommand = exports.se_ListResourceDataSyncCommand = exports.se_ListResourceComplianceSummariesCommand = void 0;
exports.de_GetAutomationExecutionCommand = exports.de_DisassociateOpsItemRelatedItemCommand = exports.de_DescribeSessionsCommand = exports.de_DescribePatchPropertiesCommand = exports.de_DescribePatchGroupStateCommand = exports.de_DescribePatchGroupsCommand = exports.de_DescribePatchBaselinesCommand = exports.de_DescribeParametersCommand = exports.de_DescribeOpsItemsCommand = exports.de_DescribeMaintenanceWindowTasksCommand = exports.de_DescribeMaintenanceWindowTargetsCommand = exports.de_DescribeMaintenanceWindowsForTargetCommand = exports.de_DescribeMaintenanceWindowScheduleCommand = exports.de_DescribeMaintenanceWindowsCommand = exports.de_DescribeMaintenanceWindowExecutionTasksCommand = exports.de_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = exports.de_DescribeMaintenanceWindowExecutionsCommand = exports.de_DescribeInventoryDeletionsCommand = exports.de_DescribeInstancePatchStatesForPatchGroupCommand = exports.de_DescribeInstancePatchStatesCommand = exports.de_DescribeInstancePatchesCommand = exports.de_DescribeInstanceInformationCommand = exports.de_DescribeInstanceAssociationsStatusCommand = exports.de_DescribeEffectivePatchesForPatchBaselineCommand = exports.de_DescribeEffectiveInstanceAssociationsCommand = exports.de_DescribeDocumentPermissionCommand = exports.de_DescribeDocumentCommand = exports.de_DescribeAvailablePatchesCommand = exports.de_DescribeAutomationStepExecutionsCommand = exports.de_DescribeAutomationExecutionsCommand = exports.de_DescribeAssociationExecutionTargetsCommand = exports.de_DescribeAssociationExecutionsCommand = exports.de_DescribeAssociationCommand = exports.de_DescribeActivationsCommand = exports.de_DeregisterTaskFromMaintenanceWindowCommand = exports.de_DeregisterTargetFromMaintenanceWindowCommand = exports.de_DeregisterPatchBaselineForPatchGroupCommand = exports.de_DeregisterManagedInstanceCommand = exports.de_DeleteResourcePolicyCommand = exports.de_DeleteResourceDataSyncCommand = exports.de_DeletePatchBaselineCommand = exports.de_DeleteParametersCommand = exports.de_DeleteParameterCommand = exports.de_DeleteOpsMetadataCommand = exports.de_DeleteMaintenanceWindowCommand = exports.de_DeleteInventoryCommand = exports.de_DeleteDocumentCommand = exports.de_DeleteAssociationCommand = exports.de_DeleteActivationCommand = exports.de_CreateResourceDataSyncCommand = void 0;
exports.de_RegisterTaskWithMaintenanceWindowCommand = exports.de_RegisterTargetWithMaintenanceWindowCommand = exports.de_RegisterPatchBaselineForPatchGroupCommand = exports.de_RegisterDefaultPatchBaselineCommand = exports.de_PutResourcePolicyCommand = exports.de_PutParameterCommand = exports.de_PutInventoryCommand = exports.de_PutComplianceItemsCommand = exports.de_ModifyDocumentPermissionCommand = exports.de_ListTagsForResourceCommand = exports.de_ListResourceDataSyncCommand = exports.de_ListResourceComplianceSummariesCommand = exports.de_ListOpsMetadataCommand = exports.de_ListOpsItemRelatedItemsCommand = exports.de_ListOpsItemEventsCommand = exports.de_ListInventoryEntriesCommand = exports.de_ListDocumentVersionsCommand = exports.de_ListDocumentsCommand = exports.de_ListDocumentMetadataHistoryCommand = exports.de_ListComplianceSummariesCommand = exports.de_ListComplianceItemsCommand = exports.de_ListCommandsCommand = exports.de_ListCommandInvocationsCommand = exports.de_ListAssociationVersionsCommand = exports.de_ListAssociationsCommand = exports.de_LabelParameterVersionCommand = exports.de_GetServiceSettingCommand = exports.de_GetResourcePoliciesCommand = exports.de_GetPatchBaselineForPatchGroupCommand = exports.de_GetPatchBaselineCommand = exports.de_GetParametersByPathCommand = exports.de_GetParametersCommand = exports.de_GetParameterHistoryCommand = exports.de_GetParameterCommand = exports.de_GetOpsSummaryCommand = exports.de_GetOpsMetadataCommand = exports.de_GetOpsItemCommand = exports.de_GetMaintenanceWindowTaskCommand = exports.de_GetMaintenanceWindowExecutionTaskInvocationCommand = exports.de_GetMaintenanceWindowExecutionTaskCommand = exports.de_GetMaintenanceWindowExecutionCommand = exports.de_GetMaintenanceWindowCommand = exports.de_GetInventorySchemaCommand = exports.de_GetInventoryCommand = exports.de_GetDocumentCommand = exports.de_GetDeployablePatchSnapshotForInstanceCommand = exports.de_GetDefaultPatchBaselineCommand = exports.de_GetConnectionStatusCommand = exports.de_GetCommandInvocationCommand = exports.de_GetCalendarStateCommand = void 0;
exports.de_UpdateServiceSettingCommand = exports.de_UpdateResourceDataSyncCommand = exports.de_UpdatePatchBaselineCommand = exports.de_UpdateOpsMetadataCommand = exports.de_UpdateOpsItemCommand = exports.de_UpdateManagedInstanceRoleCommand = exports.de_UpdateMaintenanceWindowTaskCommand = exports.de_UpdateMaintenanceWindowTargetCommand = exports.de_UpdateMaintenanceWindowCommand = exports.de_UpdateDocumentMetadataCommand = exports.de_UpdateDocumentDefaultVersionCommand = exports.de_UpdateDocumentCommand = exports.de_UpdateAssociationStatusCommand = exports.de_UpdateAssociationCommand = exports.de_UnlabelParameterVersionCommand = exports.de_TerminateSessionCommand = exports.de_StopAutomationExecutionCommand = exports.de_StartSessionCommand = exports.de_StartChangeRequestExecutionCommand = exports.de_StartAutomationExecutionCommand = exports.de_StartAssociationsOnceCommand = exports.de_SendCommandCommand = exports.de_SendAutomationSignalCommand = exports.de_ResumeSessionCommand = exports.de_ResetServiceSettingCommand = exports.de_RemoveTagsFromResourceCommand = void 0;
const protocol_http_1 = __webpack_require__(45395);
const smithy_client_1 = __webpack_require__(69775);
const uuid_1 = __webpack_require__(62040);
const models_0_1 = __webpack_require__(26130);
const models_1_1 = __webpack_require__(75367);
const models_2_1 = __webpack_require__(25853);
const SSMServiceException_1 = __webpack_require__(94334);
const se_AddTagsToResourceCommand = async (input, context)=>{
    const headers = sharedHeaders("AddTagsToResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AddTagsToResourceCommand = se_AddTagsToResourceCommand;
const se_AssociateOpsItemRelatedItemCommand = async (input, context)=>{
    const headers = sharedHeaders("AssociateOpsItemRelatedItem");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AssociateOpsItemRelatedItemCommand = se_AssociateOpsItemRelatedItemCommand;
const se_CancelCommandCommand = async (input, context)=>{
    const headers = sharedHeaders("CancelCommand");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CancelCommandCommand = se_CancelCommandCommand;
const se_CancelMaintenanceWindowExecutionCommand = async (input, context)=>{
    const headers = sharedHeaders("CancelMaintenanceWindowExecution");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CancelMaintenanceWindowExecutionCommand = se_CancelMaintenanceWindowExecutionCommand;
const se_CreateActivationCommand = async (input, context)=>{
    const headers = sharedHeaders("CreateActivation");
    let body;
    body = JSON.stringify(se_CreateActivationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateActivationCommand = se_CreateActivationCommand;
const se_CreateAssociationCommand = async (input, context)=>{
    const headers = sharedHeaders("CreateAssociation");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateAssociationCommand = se_CreateAssociationCommand;
const se_CreateAssociationBatchCommand = async (input, context)=>{
    const headers = sharedHeaders("CreateAssociationBatch");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateAssociationBatchCommand = se_CreateAssociationBatchCommand;
const se_CreateDocumentCommand = async (input, context)=>{
    const headers = sharedHeaders("CreateDocument");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDocumentCommand = se_CreateDocumentCommand;
const se_CreateMaintenanceWindowCommand = async (input, context)=>{
    const headers = sharedHeaders("CreateMaintenanceWindow");
    let body;
    body = JSON.stringify(se_CreateMaintenanceWindowRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateMaintenanceWindowCommand = se_CreateMaintenanceWindowCommand;
const se_CreateOpsItemCommand = async (input, context)=>{
    const headers = sharedHeaders("CreateOpsItem");
    let body;
    body = JSON.stringify(se_CreateOpsItemRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateOpsItemCommand = se_CreateOpsItemCommand;
const se_CreateOpsMetadataCommand = async (input, context)=>{
    const headers = sharedHeaders("CreateOpsMetadata");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateOpsMetadataCommand = se_CreateOpsMetadataCommand;
const se_CreatePatchBaselineCommand = async (input, context)=>{
    const headers = sharedHeaders("CreatePatchBaseline");
    let body;
    body = JSON.stringify(se_CreatePatchBaselineRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreatePatchBaselineCommand = se_CreatePatchBaselineCommand;
const se_CreateResourceDataSyncCommand = async (input, context)=>{
    const headers = sharedHeaders("CreateResourceDataSync");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateResourceDataSyncCommand = se_CreateResourceDataSyncCommand;
const se_DeleteActivationCommand = async (input, context)=>{
    const headers = sharedHeaders("DeleteActivation");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteActivationCommand = se_DeleteActivationCommand;
const se_DeleteAssociationCommand = async (input, context)=>{
    const headers = sharedHeaders("DeleteAssociation");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteAssociationCommand = se_DeleteAssociationCommand;
const se_DeleteDocumentCommand = async (input, context)=>{
    const headers = sharedHeaders("DeleteDocument");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDocumentCommand = se_DeleteDocumentCommand;
const se_DeleteInventoryCommand = async (input, context)=>{
    const headers = sharedHeaders("DeleteInventory");
    let body;
    body = JSON.stringify(se_DeleteInventoryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteInventoryCommand = se_DeleteInventoryCommand;
const se_DeleteMaintenanceWindowCommand = async (input, context)=>{
    const headers = sharedHeaders("DeleteMaintenanceWindow");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteMaintenanceWindowCommand = se_DeleteMaintenanceWindowCommand;
const se_DeleteOpsMetadataCommand = async (input, context)=>{
    const headers = sharedHeaders("DeleteOpsMetadata");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteOpsMetadataCommand = se_DeleteOpsMetadataCommand;
const se_DeleteParameterCommand = async (input, context)=>{
    const headers = sharedHeaders("DeleteParameter");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteParameterCommand = se_DeleteParameterCommand;
const se_DeleteParametersCommand = async (input, context)=>{
    const headers = sharedHeaders("DeleteParameters");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteParametersCommand = se_DeleteParametersCommand;
const se_DeletePatchBaselineCommand = async (input, context)=>{
    const headers = sharedHeaders("DeletePatchBaseline");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeletePatchBaselineCommand = se_DeletePatchBaselineCommand;
const se_DeleteResourceDataSyncCommand = async (input, context)=>{
    const headers = sharedHeaders("DeleteResourceDataSync");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteResourceDataSyncCommand = se_DeleteResourceDataSyncCommand;
const se_DeleteResourcePolicyCommand = async (input, context)=>{
    const headers = sharedHeaders("DeleteResourcePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteResourcePolicyCommand = se_DeleteResourcePolicyCommand;
const se_DeregisterManagedInstanceCommand = async (input, context)=>{
    const headers = sharedHeaders("DeregisterManagedInstance");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeregisterManagedInstanceCommand = se_DeregisterManagedInstanceCommand;
const se_DeregisterPatchBaselineForPatchGroupCommand = async (input, context)=>{
    const headers = sharedHeaders("DeregisterPatchBaselineForPatchGroup");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeregisterPatchBaselineForPatchGroupCommand = se_DeregisterPatchBaselineForPatchGroupCommand;
const se_DeregisterTargetFromMaintenanceWindowCommand = async (input, context)=>{
    const headers = sharedHeaders("DeregisterTargetFromMaintenanceWindow");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeregisterTargetFromMaintenanceWindowCommand = se_DeregisterTargetFromMaintenanceWindowCommand;
const se_DeregisterTaskFromMaintenanceWindowCommand = async (input, context)=>{
    const headers = sharedHeaders("DeregisterTaskFromMaintenanceWindow");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeregisterTaskFromMaintenanceWindowCommand = se_DeregisterTaskFromMaintenanceWindowCommand;
const se_DescribeActivationsCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeActivations");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeActivationsCommand = se_DescribeActivationsCommand;
const se_DescribeAssociationCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeAssociation");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeAssociationCommand = se_DescribeAssociationCommand;
const se_DescribeAssociationExecutionsCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeAssociationExecutions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeAssociationExecutionsCommand = se_DescribeAssociationExecutionsCommand;
const se_DescribeAssociationExecutionTargetsCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeAssociationExecutionTargets");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeAssociationExecutionTargetsCommand = se_DescribeAssociationExecutionTargetsCommand;
const se_DescribeAutomationExecutionsCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeAutomationExecutions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeAutomationExecutionsCommand = se_DescribeAutomationExecutionsCommand;
const se_DescribeAutomationStepExecutionsCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeAutomationStepExecutions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeAutomationStepExecutionsCommand = se_DescribeAutomationStepExecutionsCommand;
const se_DescribeAvailablePatchesCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeAvailablePatches");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeAvailablePatchesCommand = se_DescribeAvailablePatchesCommand;
const se_DescribeDocumentCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeDocument");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDocumentCommand = se_DescribeDocumentCommand;
const se_DescribeDocumentPermissionCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeDocumentPermission");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDocumentPermissionCommand = se_DescribeDocumentPermissionCommand;
const se_DescribeEffectiveInstanceAssociationsCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeEffectiveInstanceAssociations");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeEffectiveInstanceAssociationsCommand = se_DescribeEffectiveInstanceAssociationsCommand;
const se_DescribeEffectivePatchesForPatchBaselineCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeEffectivePatchesForPatchBaseline");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeEffectivePatchesForPatchBaselineCommand = se_DescribeEffectivePatchesForPatchBaselineCommand;
const se_DescribeInstanceAssociationsStatusCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeInstanceAssociationsStatus");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeInstanceAssociationsStatusCommand = se_DescribeInstanceAssociationsStatusCommand;
const se_DescribeInstanceInformationCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeInstanceInformation");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeInstanceInformationCommand = se_DescribeInstanceInformationCommand;
const se_DescribeInstancePatchesCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeInstancePatches");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeInstancePatchesCommand = se_DescribeInstancePatchesCommand;
const se_DescribeInstancePatchStatesCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeInstancePatchStates");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeInstancePatchStatesCommand = se_DescribeInstancePatchStatesCommand;
const se_DescribeInstancePatchStatesForPatchGroupCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeInstancePatchStatesForPatchGroup");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeInstancePatchStatesForPatchGroupCommand = se_DescribeInstancePatchStatesForPatchGroupCommand;
const se_DescribeInventoryDeletionsCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeInventoryDeletions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeInventoryDeletionsCommand = se_DescribeInventoryDeletionsCommand;
const se_DescribeMaintenanceWindowExecutionsCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeMaintenanceWindowExecutions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeMaintenanceWindowExecutionsCommand = se_DescribeMaintenanceWindowExecutionsCommand;
const se_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeMaintenanceWindowExecutionTaskInvocations");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = se_DescribeMaintenanceWindowExecutionTaskInvocationsCommand;
const se_DescribeMaintenanceWindowExecutionTasksCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeMaintenanceWindowExecutionTasks");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeMaintenanceWindowExecutionTasksCommand = se_DescribeMaintenanceWindowExecutionTasksCommand;
const se_DescribeMaintenanceWindowsCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeMaintenanceWindows");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeMaintenanceWindowsCommand = se_DescribeMaintenanceWindowsCommand;
const se_DescribeMaintenanceWindowScheduleCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeMaintenanceWindowSchedule");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeMaintenanceWindowScheduleCommand = se_DescribeMaintenanceWindowScheduleCommand;
const se_DescribeMaintenanceWindowsForTargetCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeMaintenanceWindowsForTarget");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeMaintenanceWindowsForTargetCommand = se_DescribeMaintenanceWindowsForTargetCommand;
const se_DescribeMaintenanceWindowTargetsCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeMaintenanceWindowTargets");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeMaintenanceWindowTargetsCommand = se_DescribeMaintenanceWindowTargetsCommand;
const se_DescribeMaintenanceWindowTasksCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeMaintenanceWindowTasks");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeMaintenanceWindowTasksCommand = se_DescribeMaintenanceWindowTasksCommand;
const se_DescribeOpsItemsCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeOpsItems");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeOpsItemsCommand = se_DescribeOpsItemsCommand;
const se_DescribeParametersCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeParameters");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeParametersCommand = se_DescribeParametersCommand;
const se_DescribePatchBaselinesCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribePatchBaselines");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribePatchBaselinesCommand = se_DescribePatchBaselinesCommand;
const se_DescribePatchGroupsCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribePatchGroups");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribePatchGroupsCommand = se_DescribePatchGroupsCommand;
const se_DescribePatchGroupStateCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribePatchGroupState");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribePatchGroupStateCommand = se_DescribePatchGroupStateCommand;
const se_DescribePatchPropertiesCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribePatchProperties");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribePatchPropertiesCommand = se_DescribePatchPropertiesCommand;
const se_DescribeSessionsCommand = async (input, context)=>{
    const headers = sharedHeaders("DescribeSessions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeSessionsCommand = se_DescribeSessionsCommand;
const se_DisassociateOpsItemRelatedItemCommand = async (input, context)=>{
    const headers = sharedHeaders("DisassociateOpsItemRelatedItem");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DisassociateOpsItemRelatedItemCommand = se_DisassociateOpsItemRelatedItemCommand;
const se_GetAutomationExecutionCommand = async (input, context)=>{
    const headers = sharedHeaders("GetAutomationExecution");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAutomationExecutionCommand = se_GetAutomationExecutionCommand;
const se_GetCalendarStateCommand = async (input, context)=>{
    const headers = sharedHeaders("GetCalendarState");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCalendarStateCommand = se_GetCalendarStateCommand;
const se_GetCommandInvocationCommand = async (input, context)=>{
    const headers = sharedHeaders("GetCommandInvocation");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCommandInvocationCommand = se_GetCommandInvocationCommand;
const se_GetConnectionStatusCommand = async (input, context)=>{
    const headers = sharedHeaders("GetConnectionStatus");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetConnectionStatusCommand = se_GetConnectionStatusCommand;
const se_GetDefaultPatchBaselineCommand = async (input, context)=>{
    const headers = sharedHeaders("GetDefaultPatchBaseline");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDefaultPatchBaselineCommand = se_GetDefaultPatchBaselineCommand;
const se_GetDeployablePatchSnapshotForInstanceCommand = async (input, context)=>{
    const headers = sharedHeaders("GetDeployablePatchSnapshotForInstance");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDeployablePatchSnapshotForInstanceCommand = se_GetDeployablePatchSnapshotForInstanceCommand;
const se_GetDocumentCommand = async (input, context)=>{
    const headers = sharedHeaders("GetDocument");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDocumentCommand = se_GetDocumentCommand;
const se_GetInventoryCommand = async (input, context)=>{
    const headers = sharedHeaders("GetInventory");
    let body;
    body = JSON.stringify(se_GetInventoryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInventoryCommand = se_GetInventoryCommand;
const se_GetInventorySchemaCommand = async (input, context)=>{
    const headers = sharedHeaders("GetInventorySchema");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInventorySchemaCommand = se_GetInventorySchemaCommand;
const se_GetMaintenanceWindowCommand = async (input, context)=>{
    const headers = sharedHeaders("GetMaintenanceWindow");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetMaintenanceWindowCommand = se_GetMaintenanceWindowCommand;
const se_GetMaintenanceWindowExecutionCommand = async (input, context)=>{
    const headers = sharedHeaders("GetMaintenanceWindowExecution");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetMaintenanceWindowExecutionCommand = se_GetMaintenanceWindowExecutionCommand;
const se_GetMaintenanceWindowExecutionTaskCommand = async (input, context)=>{
    const headers = sharedHeaders("GetMaintenanceWindowExecutionTask");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetMaintenanceWindowExecutionTaskCommand = se_GetMaintenanceWindowExecutionTaskCommand;
const se_GetMaintenanceWindowExecutionTaskInvocationCommand = async (input, context)=>{
    const headers = sharedHeaders("GetMaintenanceWindowExecutionTaskInvocation");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetMaintenanceWindowExecutionTaskInvocationCommand = se_GetMaintenanceWindowExecutionTaskInvocationCommand;
const se_GetMaintenanceWindowTaskCommand = async (input, context)=>{
    const headers = sharedHeaders("GetMaintenanceWindowTask");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetMaintenanceWindowTaskCommand = se_GetMaintenanceWindowTaskCommand;
const se_GetOpsItemCommand = async (input, context)=>{
    const headers = sharedHeaders("GetOpsItem");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetOpsItemCommand = se_GetOpsItemCommand;
const se_GetOpsMetadataCommand = async (input, context)=>{
    const headers = sharedHeaders("GetOpsMetadata");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetOpsMetadataCommand = se_GetOpsMetadataCommand;
const se_GetOpsSummaryCommand = async (input, context)=>{
    const headers = sharedHeaders("GetOpsSummary");
    let body;
    body = JSON.stringify(se_GetOpsSummaryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetOpsSummaryCommand = se_GetOpsSummaryCommand;
const se_GetParameterCommand = async (input, context)=>{
    const headers = sharedHeaders("GetParameter");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetParameterCommand = se_GetParameterCommand;
const se_GetParameterHistoryCommand = async (input, context)=>{
    const headers = sharedHeaders("GetParameterHistory");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetParameterHistoryCommand = se_GetParameterHistoryCommand;
const se_GetParametersCommand = async (input, context)=>{
    const headers = sharedHeaders("GetParameters");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetParametersCommand = se_GetParametersCommand;
const se_GetParametersByPathCommand = async (input, context)=>{
    const headers = sharedHeaders("GetParametersByPath");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetParametersByPathCommand = se_GetParametersByPathCommand;
const se_GetPatchBaselineCommand = async (input, context)=>{
    const headers = sharedHeaders("GetPatchBaseline");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetPatchBaselineCommand = se_GetPatchBaselineCommand;
const se_GetPatchBaselineForPatchGroupCommand = async (input, context)=>{
    const headers = sharedHeaders("GetPatchBaselineForPatchGroup");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetPatchBaselineForPatchGroupCommand = se_GetPatchBaselineForPatchGroupCommand;
const se_GetResourcePoliciesCommand = async (input, context)=>{
    const headers = sharedHeaders("GetResourcePolicies");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetResourcePoliciesCommand = se_GetResourcePoliciesCommand;
const se_GetServiceSettingCommand = async (input, context)=>{
    const headers = sharedHeaders("GetServiceSetting");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetServiceSettingCommand = se_GetServiceSettingCommand;
const se_LabelParameterVersionCommand = async (input, context)=>{
    const headers = sharedHeaders("LabelParameterVersion");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_LabelParameterVersionCommand = se_LabelParameterVersionCommand;
const se_ListAssociationsCommand = async (input, context)=>{
    const headers = sharedHeaders("ListAssociations");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListAssociationsCommand = se_ListAssociationsCommand;
const se_ListAssociationVersionsCommand = async (input, context)=>{
    const headers = sharedHeaders("ListAssociationVersions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListAssociationVersionsCommand = se_ListAssociationVersionsCommand;
const se_ListCommandInvocationsCommand = async (input, context)=>{
    const headers = sharedHeaders("ListCommandInvocations");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListCommandInvocationsCommand = se_ListCommandInvocationsCommand;
const se_ListCommandsCommand = async (input, context)=>{
    const headers = sharedHeaders("ListCommands");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListCommandsCommand = se_ListCommandsCommand;
const se_ListComplianceItemsCommand = async (input, context)=>{
    const headers = sharedHeaders("ListComplianceItems");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListComplianceItemsCommand = se_ListComplianceItemsCommand;
const se_ListComplianceSummariesCommand = async (input, context)=>{
    const headers = sharedHeaders("ListComplianceSummaries");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListComplianceSummariesCommand = se_ListComplianceSummariesCommand;
const se_ListDocumentMetadataHistoryCommand = async (input, context)=>{
    const headers = sharedHeaders("ListDocumentMetadataHistory");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListDocumentMetadataHistoryCommand = se_ListDocumentMetadataHistoryCommand;
const se_ListDocumentsCommand = async (input, context)=>{
    const headers = sharedHeaders("ListDocuments");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListDocumentsCommand = se_ListDocumentsCommand;
const se_ListDocumentVersionsCommand = async (input, context)=>{
    const headers = sharedHeaders("ListDocumentVersions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListDocumentVersionsCommand = se_ListDocumentVersionsCommand;
const se_ListInventoryEntriesCommand = async (input, context)=>{
    const headers = sharedHeaders("ListInventoryEntries");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListInventoryEntriesCommand = se_ListInventoryEntriesCommand;
const se_ListOpsItemEventsCommand = async (input, context)=>{
    const headers = sharedHeaders("ListOpsItemEvents");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListOpsItemEventsCommand = se_ListOpsItemEventsCommand;
const se_ListOpsItemRelatedItemsCommand = async (input, context)=>{
    const headers = sharedHeaders("ListOpsItemRelatedItems");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListOpsItemRelatedItemsCommand = se_ListOpsItemRelatedItemsCommand;
const se_ListOpsMetadataCommand = async (input, context)=>{
    const headers = sharedHeaders("ListOpsMetadata");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListOpsMetadataCommand = se_ListOpsMetadataCommand;
const se_ListResourceComplianceSummariesCommand = async (input, context)=>{
    const headers = sharedHeaders("ListResourceComplianceSummaries");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListResourceComplianceSummariesCommand = se_ListResourceComplianceSummariesCommand;
const se_ListResourceDataSyncCommand = async (input, context)=>{
    const headers = sharedHeaders("ListResourceDataSync");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListResourceDataSyncCommand = se_ListResourceDataSyncCommand;
const se_ListTagsForResourceCommand = async (input, context)=>{
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
const se_ModifyDocumentPermissionCommand = async (input, context)=>{
    const headers = sharedHeaders("ModifyDocumentPermission");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyDocumentPermissionCommand = se_ModifyDocumentPermissionCommand;
const se_PutComplianceItemsCommand = async (input, context)=>{
    const headers = sharedHeaders("PutComplianceItems");
    let body;
    body = JSON.stringify(se_PutComplianceItemsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutComplianceItemsCommand = se_PutComplianceItemsCommand;
const se_PutInventoryCommand = async (input, context)=>{
    const headers = sharedHeaders("PutInventory");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutInventoryCommand = se_PutInventoryCommand;
const se_PutParameterCommand = async (input, context)=>{
    const headers = sharedHeaders("PutParameter");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutParameterCommand = se_PutParameterCommand;
const se_PutResourcePolicyCommand = async (input, context)=>{
    const headers = sharedHeaders("PutResourcePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutResourcePolicyCommand = se_PutResourcePolicyCommand;
const se_RegisterDefaultPatchBaselineCommand = async (input, context)=>{
    const headers = sharedHeaders("RegisterDefaultPatchBaseline");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RegisterDefaultPatchBaselineCommand = se_RegisterDefaultPatchBaselineCommand;
const se_RegisterPatchBaselineForPatchGroupCommand = async (input, context)=>{
    const headers = sharedHeaders("RegisterPatchBaselineForPatchGroup");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RegisterPatchBaselineForPatchGroupCommand = se_RegisterPatchBaselineForPatchGroupCommand;
const se_RegisterTargetWithMaintenanceWindowCommand = async (input, context)=>{
    const headers = sharedHeaders("RegisterTargetWithMaintenanceWindow");
    let body;
    body = JSON.stringify(se_RegisterTargetWithMaintenanceWindowRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RegisterTargetWithMaintenanceWindowCommand = se_RegisterTargetWithMaintenanceWindowCommand;
const se_RegisterTaskWithMaintenanceWindowCommand = async (input, context)=>{
    const headers = sharedHeaders("RegisterTaskWithMaintenanceWindow");
    let body;
    body = JSON.stringify(se_RegisterTaskWithMaintenanceWindowRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RegisterTaskWithMaintenanceWindowCommand = se_RegisterTaskWithMaintenanceWindowCommand;
const se_RemoveTagsFromResourceCommand = async (input, context)=>{
    const headers = sharedHeaders("RemoveTagsFromResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RemoveTagsFromResourceCommand = se_RemoveTagsFromResourceCommand;
const se_ResetServiceSettingCommand = async (input, context)=>{
    const headers = sharedHeaders("ResetServiceSetting");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ResetServiceSettingCommand = se_ResetServiceSettingCommand;
const se_ResumeSessionCommand = async (input, context)=>{
    const headers = sharedHeaders("ResumeSession");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ResumeSessionCommand = se_ResumeSessionCommand;
const se_SendAutomationSignalCommand = async (input, context)=>{
    const headers = sharedHeaders("SendAutomationSignal");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SendAutomationSignalCommand = se_SendAutomationSignalCommand;
const se_SendCommandCommand = async (input, context)=>{
    const headers = sharedHeaders("SendCommand");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SendCommandCommand = se_SendCommandCommand;
const se_StartAssociationsOnceCommand = async (input, context)=>{
    const headers = sharedHeaders("StartAssociationsOnce");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartAssociationsOnceCommand = se_StartAssociationsOnceCommand;
const se_StartAutomationExecutionCommand = async (input, context)=>{
    const headers = sharedHeaders("StartAutomationExecution");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartAutomationExecutionCommand = se_StartAutomationExecutionCommand;
const se_StartChangeRequestExecutionCommand = async (input, context)=>{
    const headers = sharedHeaders("StartChangeRequestExecution");
    let body;
    body = JSON.stringify(se_StartChangeRequestExecutionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartChangeRequestExecutionCommand = se_StartChangeRequestExecutionCommand;
const se_StartSessionCommand = async (input, context)=>{
    const headers = sharedHeaders("StartSession");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartSessionCommand = se_StartSessionCommand;
const se_StopAutomationExecutionCommand = async (input, context)=>{
    const headers = sharedHeaders("StopAutomationExecution");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopAutomationExecutionCommand = se_StopAutomationExecutionCommand;
const se_TerminateSessionCommand = async (input, context)=>{
    const headers = sharedHeaders("TerminateSession");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_TerminateSessionCommand = se_TerminateSessionCommand;
const se_UnlabelParameterVersionCommand = async (input, context)=>{
    const headers = sharedHeaders("UnlabelParameterVersion");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UnlabelParameterVersionCommand = se_UnlabelParameterVersionCommand;
const se_UpdateAssociationCommand = async (input, context)=>{
    const headers = sharedHeaders("UpdateAssociation");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateAssociationCommand = se_UpdateAssociationCommand;
const se_UpdateAssociationStatusCommand = async (input, context)=>{
    const headers = sharedHeaders("UpdateAssociationStatus");
    let body;
    body = JSON.stringify(se_UpdateAssociationStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateAssociationStatusCommand = se_UpdateAssociationStatusCommand;
const se_UpdateDocumentCommand = async (input, context)=>{
    const headers = sharedHeaders("UpdateDocument");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateDocumentCommand = se_UpdateDocumentCommand;
const se_UpdateDocumentDefaultVersionCommand = async (input, context)=>{
    const headers = sharedHeaders("UpdateDocumentDefaultVersion");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateDocumentDefaultVersionCommand = se_UpdateDocumentDefaultVersionCommand;
const se_UpdateDocumentMetadataCommand = async (input, context)=>{
    const headers = sharedHeaders("UpdateDocumentMetadata");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateDocumentMetadataCommand = se_UpdateDocumentMetadataCommand;
const se_UpdateMaintenanceWindowCommand = async (input, context)=>{
    const headers = sharedHeaders("UpdateMaintenanceWindow");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateMaintenanceWindowCommand = se_UpdateMaintenanceWindowCommand;
const se_UpdateMaintenanceWindowTargetCommand = async (input, context)=>{
    const headers = sharedHeaders("UpdateMaintenanceWindowTarget");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateMaintenanceWindowTargetCommand = se_UpdateMaintenanceWindowTargetCommand;
const se_UpdateMaintenanceWindowTaskCommand = async (input, context)=>{
    const headers = sharedHeaders("UpdateMaintenanceWindowTask");
    let body;
    body = JSON.stringify(se_UpdateMaintenanceWindowTaskRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateMaintenanceWindowTaskCommand = se_UpdateMaintenanceWindowTaskCommand;
const se_UpdateManagedInstanceRoleCommand = async (input, context)=>{
    const headers = sharedHeaders("UpdateManagedInstanceRole");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateManagedInstanceRoleCommand = se_UpdateManagedInstanceRoleCommand;
const se_UpdateOpsItemCommand = async (input, context)=>{
    const headers = sharedHeaders("UpdateOpsItem");
    let body;
    body = JSON.stringify(se_UpdateOpsItemRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateOpsItemCommand = se_UpdateOpsItemCommand;
const se_UpdateOpsMetadataCommand = async (input, context)=>{
    const headers = sharedHeaders("UpdateOpsMetadata");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateOpsMetadataCommand = se_UpdateOpsMetadataCommand;
const se_UpdatePatchBaselineCommand = async (input, context)=>{
    const headers = sharedHeaders("UpdatePatchBaseline");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdatePatchBaselineCommand = se_UpdatePatchBaselineCommand;
const se_UpdateResourceDataSyncCommand = async (input, context)=>{
    const headers = sharedHeaders("UpdateResourceDataSync");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateResourceDataSyncCommand = se_UpdateResourceDataSyncCommand;
const se_UpdateServiceSettingCommand = async (input, context)=>{
    const headers = sharedHeaders("UpdateServiceSetting");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateServiceSettingCommand = se_UpdateServiceSettingCommand;
const de_AddTagsToResourceCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_AddTagsToResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_AddTagsToResourceCommand = de_AddTagsToResourceCommand;
const de_AddTagsToResourceCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
            throw await de_InvalidResourceIdRes(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
            throw await de_InvalidResourceTypeRes(parsedOutput, context);
        case "TooManyTagsError":
        case "com.amazonaws.ssm#TooManyTagsError":
            throw await de_TooManyTagsErrorRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
            throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_AssociateOpsItemRelatedItemCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_AssociateOpsItemRelatedItemCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_AssociateOpsItemRelatedItemCommand = de_AssociateOpsItemRelatedItemCommand;
const de_AssociateOpsItemRelatedItemCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
            throw await de_OpsItemLimitExceededExceptionRes(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
            throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);
        case "OpsItemRelatedItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemRelatedItemAlreadyExistsException":
            throw await de_OpsItemRelatedItemAlreadyExistsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_CancelCommandCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_CancelCommandCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_CancelCommandCommand = de_CancelCommandCommand;
const de_CancelCommandCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DuplicateInstanceId":
        case "com.amazonaws.ssm#DuplicateInstanceId":
            throw await de_DuplicateInstanceIdRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
            throw await de_InvalidCommandIdRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_CancelMaintenanceWindowExecutionCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_CancelMaintenanceWindowExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_CancelMaintenanceWindowExecutionCommand = de_CancelMaintenanceWindowExecutionCommand;
const de_CancelMaintenanceWindowExecutionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_CreateActivationCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_CreateActivationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_CreateActivationCommand = de_CreateActivationCommand;
const de_CreateActivationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
            throw await de_InvalidParametersRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_CreateAssociationCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_CreateAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateAssociationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_CreateAssociationCommand = de_CreateAssociationCommand;
const de_CreateAssociationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AssociationAlreadyExists":
        case "com.amazonaws.ssm#AssociationAlreadyExists":
            throw await de_AssociationAlreadyExistsRes(parsedOutput, context);
        case "AssociationLimitExceeded":
        case "com.amazonaws.ssm#AssociationLimitExceeded":
            throw await de_AssociationLimitExceededRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
            throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidOutputLocation":
        case "com.amazonaws.ssm#InvalidOutputLocation":
            throw await de_InvalidOutputLocationRes(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
            throw await de_InvalidParametersRes(parsedOutput, context);
        case "InvalidSchedule":
        case "com.amazonaws.ssm#InvalidSchedule":
            throw await de_InvalidScheduleRes(parsedOutput, context);
        case "InvalidTag":
        case "com.amazonaws.ssm#InvalidTag":
            throw await de_InvalidTagRes(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
            throw await de_InvalidTargetRes(parsedOutput, context);
        case "InvalidTargetMaps":
        case "com.amazonaws.ssm#InvalidTargetMaps":
            throw await de_InvalidTargetMapsRes(parsedOutput, context);
        case "UnsupportedPlatformType":
        case "com.amazonaws.ssm#UnsupportedPlatformType":
            throw await de_UnsupportedPlatformTypeRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_CreateAssociationBatchCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_CreateAssociationBatchCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateAssociationBatchResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_CreateAssociationBatchCommand = de_CreateAssociationBatchCommand;
const de_CreateAssociationBatchCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AssociationLimitExceeded":
        case "com.amazonaws.ssm#AssociationLimitExceeded":
            throw await de_AssociationLimitExceededRes(parsedOutput, context);
        case "DuplicateInstanceId":
        case "com.amazonaws.ssm#DuplicateInstanceId":
            throw await de_DuplicateInstanceIdRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
            throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidOutputLocation":
        case "com.amazonaws.ssm#InvalidOutputLocation":
            throw await de_InvalidOutputLocationRes(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
            throw await de_InvalidParametersRes(parsedOutput, context);
        case "InvalidSchedule":
        case "com.amazonaws.ssm#InvalidSchedule":
            throw await de_InvalidScheduleRes(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
            throw await de_InvalidTargetRes(parsedOutput, context);
        case "InvalidTargetMaps":
        case "com.amazonaws.ssm#InvalidTargetMaps":
            throw await de_InvalidTargetMapsRes(parsedOutput, context);
        case "UnsupportedPlatformType":
        case "com.amazonaws.ssm#UnsupportedPlatformType":
            throw await de_UnsupportedPlatformTypeRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_CreateDocumentCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_CreateDocumentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDocumentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_CreateDocumentCommand = de_CreateDocumentCommand;
const de_CreateDocumentCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DocumentAlreadyExists":
        case "com.amazonaws.ssm#DocumentAlreadyExists":
            throw await de_DocumentAlreadyExistsRes(parsedOutput, context);
        case "DocumentLimitExceeded":
        case "com.amazonaws.ssm#DocumentLimitExceeded":
            throw await de_DocumentLimitExceededRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocumentContent":
        case "com.amazonaws.ssm#InvalidDocumentContent":
            throw await de_InvalidDocumentContentRes(parsedOutput, context);
        case "InvalidDocumentSchemaVersion":
        case "com.amazonaws.ssm#InvalidDocumentSchemaVersion":
            throw await de_InvalidDocumentSchemaVersionRes(parsedOutput, context);
        case "MaxDocumentSizeExceeded":
        case "com.amazonaws.ssm#MaxDocumentSizeExceeded":
            throw await de_MaxDocumentSizeExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_CreateMaintenanceWindowCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_CreateMaintenanceWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_CreateMaintenanceWindowCommand = de_CreateMaintenanceWindowCommand;
const de_CreateMaintenanceWindowCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_CreateOpsItemCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_CreateOpsItemCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_CreateOpsItemCommand = de_CreateOpsItemCommand;
const de_CreateOpsItemCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsItemAccessDeniedException":
        case "com.amazonaws.ssm#OpsItemAccessDeniedException":
            throw await de_OpsItemAccessDeniedExceptionRes(parsedOutput, context);
        case "OpsItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemAlreadyExistsException":
            throw await de_OpsItemAlreadyExistsExceptionRes(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
            throw await de_OpsItemLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_CreateOpsMetadataCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_CreateOpsMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_CreateOpsMetadataCommand = de_CreateOpsMetadataCommand;
const de_CreateOpsMetadataCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsMetadataAlreadyExistsException":
        case "com.amazonaws.ssm#OpsMetadataAlreadyExistsException":
            throw await de_OpsMetadataAlreadyExistsExceptionRes(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
            throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);
        case "OpsMetadataLimitExceededException":
        case "com.amazonaws.ssm#OpsMetadataLimitExceededException":
            throw await de_OpsMetadataLimitExceededExceptionRes(parsedOutput, context);
        case "OpsMetadataTooManyUpdatesException":
        case "com.amazonaws.ssm#OpsMetadataTooManyUpdatesException":
            throw await de_OpsMetadataTooManyUpdatesExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_CreatePatchBaselineCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_CreatePatchBaselineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_CreatePatchBaselineCommand = de_CreatePatchBaselineCommand;
const de_CreatePatchBaselineCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_CreateResourceDataSyncCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_CreateResourceDataSyncCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_CreateResourceDataSyncCommand = de_CreateResourceDataSyncCommand;
const de_CreateResourceDataSyncCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceDataSyncAlreadyExistsException":
        case "com.amazonaws.ssm#ResourceDataSyncAlreadyExistsException":
            throw await de_ResourceDataSyncAlreadyExistsExceptionRes(parsedOutput, context);
        case "ResourceDataSyncCountExceededException":
        case "com.amazonaws.ssm#ResourceDataSyncCountExceededException":
            throw await de_ResourceDataSyncCountExceededExceptionRes(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
            throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DeleteActivationCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DeleteActivationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DeleteActivationCommand = de_DeleteActivationCommand;
const de_DeleteActivationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidActivation":
        case "com.amazonaws.ssm#InvalidActivation":
            throw await de_InvalidActivationRes(parsedOutput, context);
        case "InvalidActivationId":
        case "com.amazonaws.ssm#InvalidActivationId":
            throw await de_InvalidActivationIdRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
            throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DeleteAssociationCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DeleteAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DeleteAssociationCommand = de_DeleteAssociationCommand;
const de_DeleteAssociationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
            throw await de_AssociationDoesNotExistRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
            throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DeleteDocumentCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DeleteDocumentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DeleteDocumentCommand = de_DeleteDocumentCommand;
const de_DeleteDocumentCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AssociatedInstances":
        case "com.amazonaws.ssm#AssociatedInstances":
            throw await de_AssociatedInstancesRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
            throw await de_InvalidDocumentOperationRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DeleteInventoryCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DeleteInventoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DeleteInventoryCommand = de_DeleteInventoryCommand;
const de_DeleteInventoryCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDeleteInventoryParametersException":
        case "com.amazonaws.ssm#InvalidDeleteInventoryParametersException":
            throw await de_InvalidDeleteInventoryParametersExceptionRes(parsedOutput, context);
        case "InvalidInventoryRequestException":
        case "com.amazonaws.ssm#InvalidInventoryRequestException":
            throw await de_InvalidInventoryRequestExceptionRes(parsedOutput, context);
        case "InvalidOptionException":
        case "com.amazonaws.ssm#InvalidOptionException":
            throw await de_InvalidOptionExceptionRes(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DeleteMaintenanceWindowCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DeleteMaintenanceWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DeleteMaintenanceWindowCommand = de_DeleteMaintenanceWindowCommand;
const de_DeleteMaintenanceWindowCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DeleteOpsMetadataCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DeleteOpsMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DeleteOpsMetadataCommand = de_DeleteOpsMetadataCommand;
const de_DeleteOpsMetadataCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
            throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);
        case "OpsMetadataNotFoundException":
        case "com.amazonaws.ssm#OpsMetadataNotFoundException":
            throw await de_OpsMetadataNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DeleteParameterCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DeleteParameterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DeleteParameterCommand = de_DeleteParameterCommand;
const de_DeleteParameterCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
            throw await de_ParameterNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DeleteParametersCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DeleteParametersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DeleteParametersCommand = de_DeleteParametersCommand;
const de_DeleteParametersCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DeletePatchBaselineCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DeletePatchBaselineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DeletePatchBaselineCommand = de_DeletePatchBaselineCommand;
const de_DeletePatchBaselineCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.ssm#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DeleteResourceDataSyncCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DeleteResourceDataSyncCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DeleteResourceDataSyncCommand = de_DeleteResourceDataSyncCommand;
const de_DeleteResourceDataSyncCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
            throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput, context);
        case "ResourceDataSyncNotFoundException":
        case "com.amazonaws.ssm#ResourceDataSyncNotFoundException":
            throw await de_ResourceDataSyncNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DeleteResourcePolicyCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DeleteResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DeleteResourcePolicyCommand = de_DeleteResourcePolicyCommand;
const de_DeleteResourcePolicyCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourcePolicyConflictException":
        case "com.amazonaws.ssm#ResourcePolicyConflictException":
            throw await de_ResourcePolicyConflictExceptionRes(parsedOutput, context);
        case "ResourcePolicyInvalidParameterException":
        case "com.amazonaws.ssm#ResourcePolicyInvalidParameterException":
            throw await de_ResourcePolicyInvalidParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DeregisterManagedInstanceCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DeregisterManagedInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DeregisterManagedInstanceCommand = de_DeregisterManagedInstanceCommand;
const de_DeregisterManagedInstanceCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DeregisterPatchBaselineForPatchGroupCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DeregisterPatchBaselineForPatchGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DeregisterPatchBaselineForPatchGroupCommand = de_DeregisterPatchBaselineForPatchGroupCommand;
const de_DeregisterPatchBaselineForPatchGroupCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
            throw await de_InvalidResourceIdRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DeregisterTargetFromMaintenanceWindowCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DeregisterTargetFromMaintenanceWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DeregisterTargetFromMaintenanceWindowCommand = de_DeregisterTargetFromMaintenanceWindowCommand;
const de_DeregisterTargetFromMaintenanceWindowCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "TargetInUseException":
        case "com.amazonaws.ssm#TargetInUseException":
            throw await de_TargetInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DeregisterTaskFromMaintenanceWindowCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DeregisterTaskFromMaintenanceWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DeregisterTaskFromMaintenanceWindowCommand = de_DeregisterTaskFromMaintenanceWindowCommand;
const de_DeregisterTaskFromMaintenanceWindowCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeActivationsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeActivationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeActivationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeActivationsCommand = de_DescribeActivationsCommand;
const de_DescribeActivationsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
            throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeAssociationCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAssociationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeAssociationCommand = de_DescribeAssociationCommand;
const de_DescribeAssociationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
            throw await de_AssociationDoesNotExistRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAssociationVersion":
        case "com.amazonaws.ssm#InvalidAssociationVersion":
            throw await de_InvalidAssociationVersionRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeAssociationExecutionsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeAssociationExecutionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAssociationExecutionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeAssociationExecutionsCommand = de_DescribeAssociationExecutionsCommand;
const de_DescribeAssociationExecutionsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
            throw await de_AssociationDoesNotExistRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeAssociationExecutionTargetsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeAssociationExecutionTargetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAssociationExecutionTargetsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeAssociationExecutionTargetsCommand = de_DescribeAssociationExecutionTargetsCommand;
const de_DescribeAssociationExecutionTargetsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
            throw await de_AssociationDoesNotExistRes(parsedOutput, context);
        case "AssociationExecutionDoesNotExist":
        case "com.amazonaws.ssm#AssociationExecutionDoesNotExist":
            throw await de_AssociationExecutionDoesNotExistRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeAutomationExecutionsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeAutomationExecutionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAutomationExecutionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeAutomationExecutionsCommand = de_DescribeAutomationExecutionsCommand;
const de_DescribeAutomationExecutionsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
            throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
            throw await de_InvalidFilterValueRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeAutomationStepExecutionsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeAutomationStepExecutionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAutomationStepExecutionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeAutomationStepExecutionsCommand = de_DescribeAutomationStepExecutionsCommand;
const de_DescribeAutomationStepExecutionsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
            throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
            throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
            throw await de_InvalidFilterValueRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeAvailablePatchesCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeAvailablePatchesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAvailablePatchesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeAvailablePatchesCommand = de_DescribeAvailablePatchesCommand;
const de_DescribeAvailablePatchesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeDocumentCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeDocumentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDocumentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeDocumentCommand = de_DescribeDocumentCommand;
const de_DescribeDocumentCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
            throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeDocumentPermissionCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeDocumentPermissionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeDocumentPermissionCommand = de_DescribeDocumentPermissionCommand;
const de_DescribeDocumentPermissionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
            throw await de_InvalidDocumentOperationRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "InvalidPermissionType":
        case "com.amazonaws.ssm#InvalidPermissionType":
            throw await de_InvalidPermissionTypeRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeEffectiveInstanceAssociationsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeEffectiveInstanceAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeEffectiveInstanceAssociationsCommand = de_DescribeEffectiveInstanceAssociationsCommand;
const de_DescribeEffectiveInstanceAssociationsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeEffectivePatchesForPatchBaselineCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeEffectivePatchesForPatchBaselineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEffectivePatchesForPatchBaselineResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeEffectivePatchesForPatchBaselineCommand = de_DescribeEffectivePatchesForPatchBaselineCommand;
const de_DescribeEffectivePatchesForPatchBaselineCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
            throw await de_InvalidResourceIdRes(parsedOutput, context);
        case "UnsupportedOperatingSystem":
        case "com.amazonaws.ssm#UnsupportedOperatingSystem":
            throw await de_UnsupportedOperatingSystemRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeInstanceAssociationsStatusCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeInstanceAssociationsStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceAssociationsStatusResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeInstanceAssociationsStatusCommand = de_DescribeInstanceAssociationsStatusCommand;
const de_DescribeInstanceAssociationsStatusCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeInstanceInformationCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeInstanceInformationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceInformationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeInstanceInformationCommand = de_DescribeInstanceInformationCommand;
const de_DescribeInstanceInformationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
            throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidInstanceInformationFilterValue":
        case "com.amazonaws.ssm#InvalidInstanceInformationFilterValue":
            throw await de_InvalidInstanceInformationFilterValueRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeInstancePatchesCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeInstancePatchesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstancePatchesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeInstancePatchesCommand = de_DescribeInstancePatchesCommand;
const de_DescribeInstancePatchesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
            throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeInstancePatchStatesCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeInstancePatchStatesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstancePatchStatesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeInstancePatchStatesCommand = de_DescribeInstancePatchStatesCommand;
const de_DescribeInstancePatchStatesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeInstancePatchStatesForPatchGroupCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeInstancePatchStatesForPatchGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstancePatchStatesForPatchGroupResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeInstancePatchStatesForPatchGroupCommand = de_DescribeInstancePatchStatesForPatchGroupCommand;
const de_DescribeInstancePatchStatesForPatchGroupCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
            throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeInventoryDeletionsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeInventoryDeletionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInventoryDeletionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeInventoryDeletionsCommand = de_DescribeInventoryDeletionsCommand;
const de_DescribeInventoryDeletionsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDeletionIdException":
        case "com.amazonaws.ssm#InvalidDeletionIdException":
            throw await de_InvalidDeletionIdExceptionRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeMaintenanceWindowExecutionsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeMaintenanceWindowExecutionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeMaintenanceWindowExecutionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeMaintenanceWindowExecutionsCommand = de_DescribeMaintenanceWindowExecutionsCommand;
const de_DescribeMaintenanceWindowExecutionsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeMaintenanceWindowExecutionTaskInvocationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeMaintenanceWindowExecutionTaskInvocationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = de_DescribeMaintenanceWindowExecutionTaskInvocationsCommand;
const de_DescribeMaintenanceWindowExecutionTaskInvocationsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeMaintenanceWindowExecutionTasksCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeMaintenanceWindowExecutionTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeMaintenanceWindowExecutionTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeMaintenanceWindowExecutionTasksCommand = de_DescribeMaintenanceWindowExecutionTasksCommand;
const de_DescribeMaintenanceWindowExecutionTasksCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeMaintenanceWindowsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeMaintenanceWindowsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeMaintenanceWindowsCommand = de_DescribeMaintenanceWindowsCommand;
const de_DescribeMaintenanceWindowsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeMaintenanceWindowScheduleCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeMaintenanceWindowScheduleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeMaintenanceWindowScheduleCommand = de_DescribeMaintenanceWindowScheduleCommand;
const de_DescribeMaintenanceWindowScheduleCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeMaintenanceWindowsForTargetCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeMaintenanceWindowsForTargetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeMaintenanceWindowsForTargetCommand = de_DescribeMaintenanceWindowsForTargetCommand;
const de_DescribeMaintenanceWindowsForTargetCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeMaintenanceWindowTargetsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeMaintenanceWindowTargetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeMaintenanceWindowTargetsCommand = de_DescribeMaintenanceWindowTargetsCommand;
const de_DescribeMaintenanceWindowTargetsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeMaintenanceWindowTasksCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeMaintenanceWindowTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeMaintenanceWindowTasksCommand = de_DescribeMaintenanceWindowTasksCommand;
const de_DescribeMaintenanceWindowTasksCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeOpsItemsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeOpsItemsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeOpsItemsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeOpsItemsCommand = de_DescribeOpsItemsCommand;
const de_DescribeOpsItemsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeParametersCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeParametersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeParametersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeParametersCommand = de_DescribeParametersCommand;
const de_DescribeParametersCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
            throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidFilterOption":
        case "com.amazonaws.ssm#InvalidFilterOption":
            throw await de_InvalidFilterOptionRes(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
            throw await de_InvalidFilterValueRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribePatchBaselinesCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribePatchBaselinesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribePatchBaselinesCommand = de_DescribePatchBaselinesCommand;
const de_DescribePatchBaselinesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribePatchGroupsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribePatchGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribePatchGroupsCommand = de_DescribePatchGroupsCommand;
const de_DescribePatchGroupsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribePatchGroupStateCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribePatchGroupStateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribePatchGroupStateCommand = de_DescribePatchGroupStateCommand;
const de_DescribePatchGroupStateCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribePatchPropertiesCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribePatchPropertiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribePatchPropertiesCommand = de_DescribePatchPropertiesCommand;
const de_DescribePatchPropertiesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DescribeSessionsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DescribeSessionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSessionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DescribeSessionsCommand = de_DescribeSessionsCommand;
const de_DescribeSessionsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
            throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_DisassociateOpsItemRelatedItemCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DisassociateOpsItemRelatedItemCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DisassociateOpsItemRelatedItemCommand = de_DisassociateOpsItemRelatedItemCommand;
const de_DisassociateOpsItemRelatedItemCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
            throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);
        case "OpsItemRelatedItemAssociationNotFoundException":
        case "com.amazonaws.ssm#OpsItemRelatedItemAssociationNotFoundException":
            throw await de_OpsItemRelatedItemAssociationNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetAutomationExecutionCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetAutomationExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAutomationExecutionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetAutomationExecutionCommand = de_GetAutomationExecutionCommand;
const de_GetAutomationExecutionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
            throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetCalendarStateCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetCalendarStateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetCalendarStateCommand = de_GetCalendarStateCommand;
const de_GetCalendarStateCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentType":
        case "com.amazonaws.ssm#InvalidDocumentType":
            throw await de_InvalidDocumentTypeRes(parsedOutput, context);
        case "UnsupportedCalendarException":
        case "com.amazonaws.ssm#UnsupportedCalendarException":
            throw await de_UnsupportedCalendarExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetCommandInvocationCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetCommandInvocationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetCommandInvocationCommand = de_GetCommandInvocationCommand;
const de_GetCommandInvocationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
            throw await de_InvalidCommandIdRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidPluginName":
        case "com.amazonaws.ssm#InvalidPluginName":
            throw await de_InvalidPluginNameRes(parsedOutput, context);
        case "InvocationDoesNotExist":
        case "com.amazonaws.ssm#InvocationDoesNotExist":
            throw await de_InvocationDoesNotExistRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetConnectionStatusCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetConnectionStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetConnectionStatusCommand = de_GetConnectionStatusCommand;
const de_GetConnectionStatusCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetDefaultPatchBaselineCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetDefaultPatchBaselineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetDefaultPatchBaselineCommand = de_GetDefaultPatchBaselineCommand;
const de_GetDefaultPatchBaselineCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetDeployablePatchSnapshotForInstanceCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetDeployablePatchSnapshotForInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetDeployablePatchSnapshotForInstanceCommand = de_GetDeployablePatchSnapshotForInstanceCommand;
const de_GetDeployablePatchSnapshotForInstanceCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "UnsupportedFeatureRequiredException":
        case "com.amazonaws.ssm#UnsupportedFeatureRequiredException":
            throw await de_UnsupportedFeatureRequiredExceptionRes(parsedOutput, context);
        case "UnsupportedOperatingSystem":
        case "com.amazonaws.ssm#UnsupportedOperatingSystem":
            throw await de_UnsupportedOperatingSystemRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetDocumentCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetDocumentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDocumentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetDocumentCommand = de_GetDocumentCommand;
const de_GetDocumentCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
            throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetInventoryCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetInventoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetInventoryCommand = de_GetInventoryCommand;
const de_GetInventoryCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAggregatorException":
        case "com.amazonaws.ssm#InvalidAggregatorException":
            throw await de_InvalidAggregatorExceptionRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
            throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidInventoryGroupException":
        case "com.amazonaws.ssm#InvalidInventoryGroupException":
            throw await de_InvalidInventoryGroupExceptionRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "InvalidResultAttributeException":
        case "com.amazonaws.ssm#InvalidResultAttributeException":
            throw await de_InvalidResultAttributeExceptionRes(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetInventorySchemaCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetInventorySchemaCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetInventorySchemaCommand = de_GetInventorySchemaCommand;
const de_GetInventorySchemaCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetMaintenanceWindowCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetMaintenanceWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMaintenanceWindowResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetMaintenanceWindowCommand = de_GetMaintenanceWindowCommand;
const de_GetMaintenanceWindowCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetMaintenanceWindowExecutionCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetMaintenanceWindowExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMaintenanceWindowExecutionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetMaintenanceWindowExecutionCommand = de_GetMaintenanceWindowExecutionCommand;
const de_GetMaintenanceWindowExecutionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetMaintenanceWindowExecutionTaskCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetMaintenanceWindowExecutionTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMaintenanceWindowExecutionTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetMaintenanceWindowExecutionTaskCommand = de_GetMaintenanceWindowExecutionTaskCommand;
const de_GetMaintenanceWindowExecutionTaskCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetMaintenanceWindowExecutionTaskInvocationCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetMaintenanceWindowExecutionTaskInvocationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMaintenanceWindowExecutionTaskInvocationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetMaintenanceWindowExecutionTaskInvocationCommand = de_GetMaintenanceWindowExecutionTaskInvocationCommand;
const de_GetMaintenanceWindowExecutionTaskInvocationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetMaintenanceWindowTaskCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetMaintenanceWindowTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMaintenanceWindowTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetMaintenanceWindowTaskCommand = de_GetMaintenanceWindowTaskCommand;
const de_GetMaintenanceWindowTaskCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetOpsItemCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetOpsItemCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOpsItemResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetOpsItemCommand = de_GetOpsItemCommand;
const de_GetOpsItemCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsItemAccessDeniedException":
        case "com.amazonaws.ssm#OpsItemAccessDeniedException":
            throw await de_OpsItemAccessDeniedExceptionRes(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
            throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetOpsMetadataCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetOpsMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetOpsMetadataCommand = de_GetOpsMetadataCommand;
const de_GetOpsMetadataCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
            throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);
        case "OpsMetadataNotFoundException":
        case "com.amazonaws.ssm#OpsMetadataNotFoundException":
            throw await de_OpsMetadataNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetOpsSummaryCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetOpsSummaryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetOpsSummaryCommand = de_GetOpsSummaryCommand;
const de_GetOpsSummaryCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAggregatorException":
        case "com.amazonaws.ssm#InvalidAggregatorException":
            throw await de_InvalidAggregatorExceptionRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
            throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);
        case "ResourceDataSyncNotFoundException":
        case "com.amazonaws.ssm#ResourceDataSyncNotFoundException":
            throw await de_ResourceDataSyncNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetParameterCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetParameterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetParameterResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetParameterCommand = de_GetParameterCommand;
const de_GetParameterCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
            throw await de_InvalidKeyIdRes(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
            throw await de_ParameterNotFoundRes(parsedOutput, context);
        case "ParameterVersionNotFound":
        case "com.amazonaws.ssm#ParameterVersionNotFound":
            throw await de_ParameterVersionNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetParameterHistoryCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetParameterHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetParameterHistoryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetParameterHistoryCommand = de_GetParameterHistoryCommand;
const de_GetParameterHistoryCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
            throw await de_InvalidKeyIdRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
            throw await de_ParameterNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetParametersCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetParametersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetParametersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetParametersCommand = de_GetParametersCommand;
const de_GetParametersCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
            throw await de_InvalidKeyIdRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetParametersByPathCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetParametersByPathCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetParametersByPathResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetParametersByPathCommand = de_GetParametersByPathCommand;
const de_GetParametersByPathCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
            throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidFilterOption":
        case "com.amazonaws.ssm#InvalidFilterOption":
            throw await de_InvalidFilterOptionRes(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
            throw await de_InvalidFilterValueRes(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
            throw await de_InvalidKeyIdRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetPatchBaselineCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetPatchBaselineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetPatchBaselineResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetPatchBaselineCommand = de_GetPatchBaselineCommand;
const de_GetPatchBaselineCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
            throw await de_InvalidResourceIdRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetPatchBaselineForPatchGroupCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetPatchBaselineForPatchGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetPatchBaselineForPatchGroupCommand = de_GetPatchBaselineForPatchGroupCommand;
const de_GetPatchBaselineForPatchGroupCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetResourcePoliciesCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetResourcePoliciesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetResourcePoliciesCommand = de_GetResourcePoliciesCommand;
const de_GetResourcePoliciesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourcePolicyInvalidParameterException":
        case "com.amazonaws.ssm#ResourcePolicyInvalidParameterException":
            throw await de_ResourcePolicyInvalidParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetServiceSettingCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetServiceSettingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetServiceSettingResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetServiceSettingCommand = de_GetServiceSettingCommand;
const de_GetServiceSettingCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ServiceSettingNotFound":
        case "com.amazonaws.ssm#ServiceSettingNotFound":
            throw await de_ServiceSettingNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_LabelParameterVersionCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_LabelParameterVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_LabelParameterVersionCommand = de_LabelParameterVersionCommand;
const de_LabelParameterVersionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
            throw await de_ParameterNotFoundRes(parsedOutput, context);
        case "ParameterVersionLabelLimitExceeded":
        case "com.amazonaws.ssm#ParameterVersionLabelLimitExceeded":
            throw await de_ParameterVersionLabelLimitExceededRes(parsedOutput, context);
        case "ParameterVersionNotFound":
        case "com.amazonaws.ssm#ParameterVersionNotFound":
            throw await de_ParameterVersionNotFoundRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
            throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListAssociationsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ListAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ListAssociationsCommand = de_ListAssociationsCommand;
const de_ListAssociationsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListAssociationVersionsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ListAssociationVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAssociationVersionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ListAssociationVersionsCommand = de_ListAssociationVersionsCommand;
const de_ListAssociationVersionsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
            throw await de_AssociationDoesNotExistRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListCommandInvocationsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ListCommandInvocationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListCommandInvocationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ListCommandInvocationsCommand = de_ListCommandInvocationsCommand;
const de_ListCommandInvocationsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
            throw await de_InvalidCommandIdRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
            throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListCommandsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ListCommandsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListCommandsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ListCommandsCommand = de_ListCommandsCommand;
const de_ListCommandsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
            throw await de_InvalidCommandIdRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
            throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListComplianceItemsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ListComplianceItemsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListComplianceItemsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ListComplianceItemsCommand = de_ListComplianceItemsCommand;
const de_ListComplianceItemsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
            throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
            throw await de_InvalidResourceIdRes(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
            throw await de_InvalidResourceTypeRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListComplianceSummariesCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ListComplianceSummariesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ListComplianceSummariesCommand = de_ListComplianceSummariesCommand;
const de_ListComplianceSummariesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
            throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListDocumentMetadataHistoryCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ListDocumentMetadataHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDocumentMetadataHistoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ListDocumentMetadataHistoryCommand = de_ListDocumentMetadataHistoryCommand;
const de_ListDocumentMetadataHistoryCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
            throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListDocumentsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ListDocumentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDocumentsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ListDocumentsCommand = de_ListDocumentsCommand;
const de_ListDocumentsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
            throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListDocumentVersionsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ListDocumentVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDocumentVersionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ListDocumentVersionsCommand = de_ListDocumentVersionsCommand;
const de_ListDocumentVersionsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListInventoryEntriesCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ListInventoryEntriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ListInventoryEntriesCommand = de_ListInventoryEntriesCommand;
const de_ListInventoryEntriesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
            throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListOpsItemEventsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ListOpsItemEventsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListOpsItemEventsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ListOpsItemEventsCommand = de_ListOpsItemEventsCommand;
const de_ListOpsItemEventsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
            throw await de_OpsItemLimitExceededExceptionRes(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
            throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListOpsItemRelatedItemsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ListOpsItemRelatedItemsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListOpsItemRelatedItemsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ListOpsItemRelatedItemsCommand = de_ListOpsItemRelatedItemsCommand;
const de_ListOpsItemRelatedItemsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListOpsMetadataCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ListOpsMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListOpsMetadataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ListOpsMetadataCommand = de_ListOpsMetadataCommand;
const de_ListOpsMetadataCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
            throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListResourceComplianceSummariesCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ListResourceComplianceSummariesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListResourceComplianceSummariesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ListResourceComplianceSummariesCommand = de_ListResourceComplianceSummariesCommand;
const de_ListResourceComplianceSummariesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
            throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListResourceDataSyncCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ListResourceDataSyncCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListResourceDataSyncResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ListResourceDataSyncCommand = de_ListResourceDataSyncCommand;
const de_ListResourceDataSyncCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
            throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListTagsForResourceCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
const de_ListTagsForResourceCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
            throw await de_InvalidResourceIdRes(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
            throw await de_InvalidResourceTypeRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ModifyDocumentPermissionCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ModifyDocumentPermissionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ModifyDocumentPermissionCommand = de_ModifyDocumentPermissionCommand;
const de_ModifyDocumentPermissionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DocumentLimitExceeded":
        case "com.amazonaws.ssm#DocumentLimitExceeded":
            throw await de_DocumentLimitExceededRes(parsedOutput, context);
        case "DocumentPermissionLimit":
        case "com.amazonaws.ssm#DocumentPermissionLimit":
            throw await de_DocumentPermissionLimitRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidPermissionType":
        case "com.amazonaws.ssm#InvalidPermissionType":
            throw await de_InvalidPermissionTypeRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_PutComplianceItemsCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_PutComplianceItemsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_PutComplianceItemsCommand = de_PutComplianceItemsCommand;
const de_PutComplianceItemsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ComplianceTypeCountLimitExceededException":
        case "com.amazonaws.ssm#ComplianceTypeCountLimitExceededException":
            throw await de_ComplianceTypeCountLimitExceededExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidItemContentException":
        case "com.amazonaws.ssm#InvalidItemContentException":
            throw await de_InvalidItemContentExceptionRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
            throw await de_InvalidResourceIdRes(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
            throw await de_InvalidResourceTypeRes(parsedOutput, context);
        case "ItemSizeLimitExceededException":
        case "com.amazonaws.ssm#ItemSizeLimitExceededException":
            throw await de_ItemSizeLimitExceededExceptionRes(parsedOutput, context);
        case "TotalSizeLimitExceededException":
        case "com.amazonaws.ssm#TotalSizeLimitExceededException":
            throw await de_TotalSizeLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_PutInventoryCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_PutInventoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_PutInventoryCommand = de_PutInventoryCommand;
const de_PutInventoryCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "CustomSchemaCountLimitExceededException":
        case "com.amazonaws.ssm#CustomSchemaCountLimitExceededException":
            throw await de_CustomSchemaCountLimitExceededExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidInventoryItemContextException":
        case "com.amazonaws.ssm#InvalidInventoryItemContextException":
            throw await de_InvalidInventoryItemContextExceptionRes(parsedOutput, context);
        case "InvalidItemContentException":
        case "com.amazonaws.ssm#InvalidItemContentException":
            throw await de_InvalidItemContentExceptionRes(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);
        case "ItemContentMismatchException":
        case "com.amazonaws.ssm#ItemContentMismatchException":
            throw await de_ItemContentMismatchExceptionRes(parsedOutput, context);
        case "ItemSizeLimitExceededException":
        case "com.amazonaws.ssm#ItemSizeLimitExceededException":
            throw await de_ItemSizeLimitExceededExceptionRes(parsedOutput, context);
        case "SubTypeCountLimitExceededException":
        case "com.amazonaws.ssm#SubTypeCountLimitExceededException":
            throw await de_SubTypeCountLimitExceededExceptionRes(parsedOutput, context);
        case "TotalSizeLimitExceededException":
        case "com.amazonaws.ssm#TotalSizeLimitExceededException":
            throw await de_TotalSizeLimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedInventoryItemContextException":
        case "com.amazonaws.ssm#UnsupportedInventoryItemContextException":
            throw await de_UnsupportedInventoryItemContextExceptionRes(parsedOutput, context);
        case "UnsupportedInventorySchemaVersionException":
        case "com.amazonaws.ssm#UnsupportedInventorySchemaVersionException":
            throw await de_UnsupportedInventorySchemaVersionExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_PutParameterCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_PutParameterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_PutParameterCommand = de_PutParameterCommand;
const de_PutParameterCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "HierarchyLevelLimitExceededException":
        case "com.amazonaws.ssm#HierarchyLevelLimitExceededException":
            throw await de_HierarchyLevelLimitExceededExceptionRes(parsedOutput, context);
        case "HierarchyTypeMismatchException":
        case "com.amazonaws.ssm#HierarchyTypeMismatchException":
            throw await de_HierarchyTypeMismatchExceptionRes(parsedOutput, context);
        case "IncompatiblePolicyException":
        case "com.amazonaws.ssm#IncompatiblePolicyException":
            throw await de_IncompatiblePolicyExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAllowedPatternException":
        case "com.amazonaws.ssm#InvalidAllowedPatternException":
            throw await de_InvalidAllowedPatternExceptionRes(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
            throw await de_InvalidKeyIdRes(parsedOutput, context);
        case "InvalidPolicyAttributeException":
        case "com.amazonaws.ssm#InvalidPolicyAttributeException":
            throw await de_InvalidPolicyAttributeExceptionRes(parsedOutput, context);
        case "InvalidPolicyTypeException":
        case "com.amazonaws.ssm#InvalidPolicyTypeException":
            throw await de_InvalidPolicyTypeExceptionRes(parsedOutput, context);
        case "ParameterAlreadyExists":
        case "com.amazonaws.ssm#ParameterAlreadyExists":
            throw await de_ParameterAlreadyExistsRes(parsedOutput, context);
        case "ParameterLimitExceeded":
        case "com.amazonaws.ssm#ParameterLimitExceeded":
            throw await de_ParameterLimitExceededRes(parsedOutput, context);
        case "ParameterMaxVersionLimitExceeded":
        case "com.amazonaws.ssm#ParameterMaxVersionLimitExceeded":
            throw await de_ParameterMaxVersionLimitExceededRes(parsedOutput, context);
        case "ParameterPatternMismatchException":
        case "com.amazonaws.ssm#ParameterPatternMismatchException":
            throw await de_ParameterPatternMismatchExceptionRes(parsedOutput, context);
        case "PoliciesLimitExceededException":
        case "com.amazonaws.ssm#PoliciesLimitExceededException":
            throw await de_PoliciesLimitExceededExceptionRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
            throw await de_TooManyUpdatesRes(parsedOutput, context);
        case "UnsupportedParameterType":
        case "com.amazonaws.ssm#UnsupportedParameterType":
            throw await de_UnsupportedParameterTypeRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_PutResourcePolicyCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_PutResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_PutResourcePolicyCommand = de_PutResourcePolicyCommand;
const de_PutResourcePolicyCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourcePolicyConflictException":
        case "com.amazonaws.ssm#ResourcePolicyConflictException":
            throw await de_ResourcePolicyConflictExceptionRes(parsedOutput, context);
        case "ResourcePolicyInvalidParameterException":
        case "com.amazonaws.ssm#ResourcePolicyInvalidParameterException":
            throw await de_ResourcePolicyInvalidParameterExceptionRes(parsedOutput, context);
        case "ResourcePolicyLimitExceededException":
        case "com.amazonaws.ssm#ResourcePolicyLimitExceededException":
            throw await de_ResourcePolicyLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_RegisterDefaultPatchBaselineCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_RegisterDefaultPatchBaselineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_RegisterDefaultPatchBaselineCommand = de_RegisterDefaultPatchBaselineCommand;
const de_RegisterDefaultPatchBaselineCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
            throw await de_InvalidResourceIdRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_RegisterPatchBaselineForPatchGroupCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_RegisterPatchBaselineForPatchGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_RegisterPatchBaselineForPatchGroupCommand = de_RegisterPatchBaselineForPatchGroupCommand;
const de_RegisterPatchBaselineForPatchGroupCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AlreadyExistsException":
        case "com.amazonaws.ssm#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
            throw await de_InvalidResourceIdRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_RegisterTargetWithMaintenanceWindowCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_RegisterTargetWithMaintenanceWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_RegisterTargetWithMaintenanceWindowCommand = de_RegisterTargetWithMaintenanceWindowCommand;
const de_RegisterTargetWithMaintenanceWindowCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_RegisterTaskWithMaintenanceWindowCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_RegisterTaskWithMaintenanceWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_RegisterTaskWithMaintenanceWindowCommand = de_RegisterTaskWithMaintenanceWindowCommand;
const de_RegisterTaskWithMaintenanceWindowCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "FeatureNotAvailableException":
        case "com.amazonaws.ssm#FeatureNotAvailableException":
            throw await de_FeatureNotAvailableExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_RemoveTagsFromResourceCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_RemoveTagsFromResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_RemoveTagsFromResourceCommand = de_RemoveTagsFromResourceCommand;
const de_RemoveTagsFromResourceCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
            throw await de_InvalidResourceIdRes(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
            throw await de_InvalidResourceTypeRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
            throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ResetServiceSettingCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ResetServiceSettingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ResetServiceSettingResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ResetServiceSettingCommand = de_ResetServiceSettingCommand;
const de_ResetServiceSettingCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ServiceSettingNotFound":
        case "com.amazonaws.ssm#ServiceSettingNotFound":
            throw await de_ServiceSettingNotFoundRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
            throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ResumeSessionCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_ResumeSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_ResumeSessionCommand = de_ResumeSessionCommand;
const de_ResumeSessionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_SendAutomationSignalCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_SendAutomationSignalCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_SendAutomationSignalCommand = de_SendAutomationSignalCommand;
const de_SendAutomationSignalCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
            throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput, context);
        case "AutomationStepNotFoundException":
        case "com.amazonaws.ssm#AutomationStepNotFoundException":
            throw await de_AutomationStepNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAutomationSignalException":
        case "com.amazonaws.ssm#InvalidAutomationSignalException":
            throw await de_InvalidAutomationSignalExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_SendCommandCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_SendCommandCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SendCommandResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_SendCommandCommand = de_SendCommandCommand;
const de_SendCommandCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DuplicateInstanceId":
        case "com.amazonaws.ssm#DuplicateInstanceId":
            throw await de_DuplicateInstanceIdRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
            throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidNotificationConfig":
        case "com.amazonaws.ssm#InvalidNotificationConfig":
            throw await de_InvalidNotificationConfigRes(parsedOutput, context);
        case "InvalidOutputFolder":
        case "com.amazonaws.ssm#InvalidOutputFolder":
            throw await de_InvalidOutputFolderRes(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
            throw await de_InvalidParametersRes(parsedOutput, context);
        case "InvalidRole":
        case "com.amazonaws.ssm#InvalidRole":
            throw await de_InvalidRoleRes(parsedOutput, context);
        case "MaxDocumentSizeExceeded":
        case "com.amazonaws.ssm#MaxDocumentSizeExceeded":
            throw await de_MaxDocumentSizeExceededRes(parsedOutput, context);
        case "UnsupportedPlatformType":
        case "com.amazonaws.ssm#UnsupportedPlatformType":
            throw await de_UnsupportedPlatformTypeRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_StartAssociationsOnceCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_StartAssociationsOnceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_StartAssociationsOnceCommand = de_StartAssociationsOnceCommand;
const de_StartAssociationsOnceCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
            throw await de_AssociationDoesNotExistRes(parsedOutput, context);
        case "InvalidAssociation":
        case "com.amazonaws.ssm#InvalidAssociation":
            throw await de_InvalidAssociationRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_StartAutomationExecutionCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_StartAutomationExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_StartAutomationExecutionCommand = de_StartAutomationExecutionCommand;
const de_StartAutomationExecutionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AutomationDefinitionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionNotFoundException":
            throw await de_AutomationDefinitionNotFoundExceptionRes(parsedOutput, context);
        case "AutomationDefinitionVersionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionVersionNotFoundException":
            throw await de_AutomationDefinitionVersionNotFoundExceptionRes(parsedOutput, context);
        case "AutomationExecutionLimitExceededException":
        case "com.amazonaws.ssm#AutomationExecutionLimitExceededException":
            throw await de_AutomationExecutionLimitExceededExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAutomationExecutionParametersException":
        case "com.amazonaws.ssm#InvalidAutomationExecutionParametersException":
            throw await de_InvalidAutomationExecutionParametersExceptionRes(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
            throw await de_InvalidTargetRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_StartChangeRequestExecutionCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_StartChangeRequestExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_StartChangeRequestExecutionCommand = de_StartChangeRequestExecutionCommand;
const de_StartChangeRequestExecutionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AutomationDefinitionNotApprovedException":
        case "com.amazonaws.ssm#AutomationDefinitionNotApprovedException":
            throw await de_AutomationDefinitionNotApprovedExceptionRes(parsedOutput, context);
        case "AutomationDefinitionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionNotFoundException":
            throw await de_AutomationDefinitionNotFoundExceptionRes(parsedOutput, context);
        case "AutomationDefinitionVersionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionVersionNotFoundException":
            throw await de_AutomationDefinitionVersionNotFoundExceptionRes(parsedOutput, context);
        case "AutomationExecutionLimitExceededException":
        case "com.amazonaws.ssm#AutomationExecutionLimitExceededException":
            throw await de_AutomationExecutionLimitExceededExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAutomationExecutionParametersException":
        case "com.amazonaws.ssm#InvalidAutomationExecutionParametersException":
            throw await de_InvalidAutomationExecutionParametersExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_StartSessionCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_StartSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_StartSessionCommand = de_StartSessionCommand;
const de_StartSessionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "TargetNotConnected":
        case "com.amazonaws.ssm#TargetNotConnected":
            throw await de_TargetNotConnectedRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_StopAutomationExecutionCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_StopAutomationExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_StopAutomationExecutionCommand = de_StopAutomationExecutionCommand;
const de_StopAutomationExecutionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
            throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAutomationStatusUpdateException":
        case "com.amazonaws.ssm#InvalidAutomationStatusUpdateException":
            throw await de_InvalidAutomationStatusUpdateExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_TerminateSessionCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_TerminateSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_TerminateSessionCommand = de_TerminateSessionCommand;
const de_TerminateSessionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_UnlabelParameterVersionCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_UnlabelParameterVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_UnlabelParameterVersionCommand = de_UnlabelParameterVersionCommand;
const de_UnlabelParameterVersionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
            throw await de_ParameterNotFoundRes(parsedOutput, context);
        case "ParameterVersionNotFound":
        case "com.amazonaws.ssm#ParameterVersionNotFound":
            throw await de_ParameterVersionNotFoundRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
            throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_UpdateAssociationCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_UpdateAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateAssociationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_UpdateAssociationCommand = de_UpdateAssociationCommand;
const de_UpdateAssociationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
            throw await de_AssociationDoesNotExistRes(parsedOutput, context);
        case "AssociationVersionLimitExceeded":
        case "com.amazonaws.ssm#AssociationVersionLimitExceeded":
            throw await de_AssociationVersionLimitExceededRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAssociationVersion":
        case "com.amazonaws.ssm#InvalidAssociationVersion":
            throw await de_InvalidAssociationVersionRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
            throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        case "InvalidOutputLocation":
        case "com.amazonaws.ssm#InvalidOutputLocation":
            throw await de_InvalidOutputLocationRes(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
            throw await de_InvalidParametersRes(parsedOutput, context);
        case "InvalidSchedule":
        case "com.amazonaws.ssm#InvalidSchedule":
            throw await de_InvalidScheduleRes(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
            throw await de_InvalidTargetRes(parsedOutput, context);
        case "InvalidTargetMaps":
        case "com.amazonaws.ssm#InvalidTargetMaps":
            throw await de_InvalidTargetMapsRes(parsedOutput, context);
        case "InvalidUpdate":
        case "com.amazonaws.ssm#InvalidUpdate":
            throw await de_InvalidUpdateRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
            throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_UpdateAssociationStatusCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_UpdateAssociationStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateAssociationStatusResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_UpdateAssociationStatusCommand = de_UpdateAssociationStatusCommand;
const de_UpdateAssociationStatusCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
            throw await de_AssociationDoesNotExistRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "StatusUnchanged":
        case "com.amazonaws.ssm#StatusUnchanged":
            throw await de_StatusUnchangedRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
            throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_UpdateDocumentCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_UpdateDocumentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateDocumentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_UpdateDocumentCommand = de_UpdateDocumentCommand;
const de_UpdateDocumentCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DocumentVersionLimitExceeded":
        case "com.amazonaws.ssm#DocumentVersionLimitExceeded":
            throw await de_DocumentVersionLimitExceededRes(parsedOutput, context);
        case "DuplicateDocumentContent":
        case "com.amazonaws.ssm#DuplicateDocumentContent":
            throw await de_DuplicateDocumentContentRes(parsedOutput, context);
        case "DuplicateDocumentVersionName":
        case "com.amazonaws.ssm#DuplicateDocumentVersionName":
            throw await de_DuplicateDocumentVersionNameRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentContent":
        case "com.amazonaws.ssm#InvalidDocumentContent":
            throw await de_InvalidDocumentContentRes(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
            throw await de_InvalidDocumentOperationRes(parsedOutput, context);
        case "InvalidDocumentSchemaVersion":
        case "com.amazonaws.ssm#InvalidDocumentSchemaVersion":
            throw await de_InvalidDocumentSchemaVersionRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
            throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        case "MaxDocumentSizeExceeded":
        case "com.amazonaws.ssm#MaxDocumentSizeExceeded":
            throw await de_MaxDocumentSizeExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_UpdateDocumentDefaultVersionCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_UpdateDocumentDefaultVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_UpdateDocumentDefaultVersionCommand = de_UpdateDocumentDefaultVersionCommand;
const de_UpdateDocumentDefaultVersionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentSchemaVersion":
        case "com.amazonaws.ssm#InvalidDocumentSchemaVersion":
            throw await de_InvalidDocumentSchemaVersionRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
            throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_UpdateDocumentMetadataCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_UpdateDocumentMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_UpdateDocumentMetadataCommand = de_UpdateDocumentMetadataCommand;
const de_UpdateDocumentMetadataCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
            throw await de_InvalidDocumentOperationRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
            throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_UpdateMaintenanceWindowCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_UpdateMaintenanceWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_UpdateMaintenanceWindowCommand = de_UpdateMaintenanceWindowCommand;
const de_UpdateMaintenanceWindowCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_UpdateMaintenanceWindowTargetCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_UpdateMaintenanceWindowTargetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_UpdateMaintenanceWindowTargetCommand = de_UpdateMaintenanceWindowTargetCommand;
const de_UpdateMaintenanceWindowTargetCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_UpdateMaintenanceWindowTaskCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_UpdateMaintenanceWindowTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateMaintenanceWindowTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_UpdateMaintenanceWindowTaskCommand = de_UpdateMaintenanceWindowTaskCommand;
const de_UpdateMaintenanceWindowTaskCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_UpdateManagedInstanceRoleCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_UpdateManagedInstanceRoleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_UpdateManagedInstanceRoleCommand = de_UpdateManagedInstanceRoleCommand;
const de_UpdateManagedInstanceRoleCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_UpdateOpsItemCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_UpdateOpsItemCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_UpdateOpsItemCommand = de_UpdateOpsItemCommand;
const de_UpdateOpsItemCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsItemAccessDeniedException":
        case "com.amazonaws.ssm#OpsItemAccessDeniedException":
            throw await de_OpsItemAccessDeniedExceptionRes(parsedOutput, context);
        case "OpsItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemAlreadyExistsException":
            throw await de_OpsItemAlreadyExistsExceptionRes(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
            throw await de_OpsItemLimitExceededExceptionRes(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
            throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_UpdateOpsMetadataCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_UpdateOpsMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_UpdateOpsMetadataCommand = de_UpdateOpsMetadataCommand;
const de_UpdateOpsMetadataCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
            throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);
        case "OpsMetadataKeyLimitExceededException":
        case "com.amazonaws.ssm#OpsMetadataKeyLimitExceededException":
            throw await de_OpsMetadataKeyLimitExceededExceptionRes(parsedOutput, context);
        case "OpsMetadataNotFoundException":
        case "com.amazonaws.ssm#OpsMetadataNotFoundException":
            throw await de_OpsMetadataNotFoundExceptionRes(parsedOutput, context);
        case "OpsMetadataTooManyUpdatesException":
        case "com.amazonaws.ssm#OpsMetadataTooManyUpdatesException":
            throw await de_OpsMetadataTooManyUpdatesExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_UpdatePatchBaselineCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_UpdatePatchBaselineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdatePatchBaselineResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_UpdatePatchBaselineCommand = de_UpdatePatchBaselineCommand;
const de_UpdatePatchBaselineCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_UpdateResourceDataSyncCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_UpdateResourceDataSyncCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_UpdateResourceDataSyncCommand = de_UpdateResourceDataSyncCommand;
const de_UpdateResourceDataSyncCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceDataSyncConflictException":
        case "com.amazonaws.ssm#ResourceDataSyncConflictException":
            throw await de_ResourceDataSyncConflictExceptionRes(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
            throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput, context);
        case "ResourceDataSyncNotFoundException":
        case "com.amazonaws.ssm#ResourceDataSyncNotFoundException":
            throw await de_ResourceDataSyncNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_UpdateServiceSettingCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_UpdateServiceSettingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_UpdateServiceSettingCommand = de_UpdateServiceSettingCommand;
const de_UpdateServiceSettingCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ServiceSettingNotFound":
        case "com.amazonaws.ssm#ServiceSettingNotFound":
            throw await de_ServiceSettingNotFoundRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
            throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_AlreadyExistsExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AssociatedInstancesRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AssociatedInstances({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AssociationAlreadyExistsRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AssociationAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AssociationDoesNotExistRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AssociationDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AssociationExecutionDoesNotExistRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AssociationExecutionDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AssociationLimitExceededRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AssociationLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AssociationVersionLimitExceededRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.AssociationVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AutomationDefinitionNotApprovedExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.AutomationDefinitionNotApprovedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AutomationDefinitionNotFoundExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.AutomationDefinitionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AutomationDefinitionVersionNotFoundExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.AutomationDefinitionVersionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AutomationExecutionLimitExceededExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.AutomationExecutionLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AutomationExecutionNotFoundExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AutomationExecutionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AutomationStepNotFoundExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.AutomationStepNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ComplianceTypeCountLimitExceededExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.ComplianceTypeCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_CustomSchemaCountLimitExceededExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.CustomSchemaCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DocumentAlreadyExistsRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.DocumentAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DocumentLimitExceededRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.DocumentLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DocumentPermissionLimitRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.DocumentPermissionLimit({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DocumentVersionLimitExceededRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.DocumentVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DoesNotExistExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.DoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DuplicateDocumentContentRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.DuplicateDocumentContent({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DuplicateDocumentVersionNameRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.DuplicateDocumentVersionName({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DuplicateInstanceIdRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.DuplicateInstanceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_FeatureNotAvailableExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.FeatureNotAvailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_HierarchyLevelLimitExceededExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.HierarchyLevelLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_HierarchyTypeMismatchExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.HierarchyTypeMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_IdempotentParameterMismatchRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.IdempotentParameterMismatch({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_IncompatiblePolicyExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.IncompatiblePolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InternalServerErrorRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidActivationRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidActivation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidActivationIdRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidActivationId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidAggregatorExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidAggregatorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidAllowedPatternExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidAllowedPatternException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidAssociationRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidAssociation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidAssociationVersionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidAssociationVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidAutomationExecutionParametersExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidAutomationExecutionParametersException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidAutomationSignalExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidAutomationSignalException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidAutomationStatusUpdateExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidAutomationStatusUpdateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidCommandIdRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidCommandId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDeleteInventoryParametersExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidDeleteInventoryParametersException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDeletionIdExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidDeletionIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDocumentRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidDocument({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDocumentContentRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidDocumentContent({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDocumentOperationRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidDocumentOperation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDocumentSchemaVersionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidDocumentSchemaVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDocumentTypeRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidDocumentType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDocumentVersionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidDocumentVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidFilterRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidFilter({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidFilterKeyRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidFilterKey({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidFilterOptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidFilterOption({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidFilterValueRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidFilterValue({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidInstanceIdRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidInstanceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidInstanceInformationFilterValueRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidInstanceInformationFilterValue({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidInventoryGroupExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidInventoryGroupException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidInventoryItemContextExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidInventoryItemContextException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidInventoryRequestExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidInventoryRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidItemContentExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidItemContentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidKeyIdRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidKeyId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidNextTokenRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidNextToken({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidNotificationConfigRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidNotificationConfig({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidOptionExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidOptionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidOutputFolderRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidOutputFolder({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidOutputLocationRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidOutputLocation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidParametersRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidParameters({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidPermissionTypeRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidPermissionType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidPluginNameRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidPluginName({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidPolicyAttributeExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidPolicyAttributeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidPolicyTypeExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidPolicyTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidResourceIdRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidResourceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidResourceTypeRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidResourceType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidResultAttributeExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidResultAttributeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidRoleRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvalidRole({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidScheduleRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidSchedule({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidTagRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidTag({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidTargetRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidTarget({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidTargetMapsRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidTargetMaps({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidTypeNameExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidTypeNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidUpdateRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.InvalidUpdate({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvocationDoesNotExistRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.InvocationDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ItemContentMismatchExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.ItemContentMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ItemSizeLimitExceededExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.ItemSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MaxDocumentSizeExceededRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.MaxDocumentSizeExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OpsItemAccessDeniedExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OpsItemAccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OpsItemAlreadyExistsExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OpsItemAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OpsItemInvalidParameterExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OpsItemInvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OpsItemLimitExceededExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OpsItemLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OpsItemNotFoundExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OpsItemNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OpsItemRelatedItemAlreadyExistsExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OpsItemRelatedItemAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OpsItemRelatedItemAssociationNotFoundExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.OpsItemRelatedItemAssociationNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OpsMetadataAlreadyExistsExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OpsMetadataAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OpsMetadataInvalidArgumentExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OpsMetadataInvalidArgumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OpsMetadataKeyLimitExceededExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.OpsMetadataKeyLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OpsMetadataLimitExceededExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OpsMetadataLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OpsMetadataNotFoundExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OpsMetadataNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OpsMetadataTooManyUpdatesExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OpsMetadataTooManyUpdatesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ParameterAlreadyExistsRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.ParameterAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ParameterLimitExceededRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.ParameterLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ParameterMaxVersionLimitExceededRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.ParameterMaxVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ParameterNotFoundRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ParameterNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ParameterPatternMismatchExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.ParameterPatternMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ParameterVersionLabelLimitExceededRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.ParameterVersionLabelLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ParameterVersionNotFoundRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.ParameterVersionNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PoliciesLimitExceededExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.PoliciesLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceDataSyncAlreadyExistsExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceDataSyncAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceDataSyncConflictExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.ResourceDataSyncConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceDataSyncCountExceededExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceDataSyncCountExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceDataSyncInvalidConfigurationExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceDataSyncInvalidConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceDataSyncNotFoundExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceDataSyncNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceLimitExceededExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourcePolicyConflictExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourcePolicyConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourcePolicyInvalidParameterExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourcePolicyInvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourcePolicyLimitExceededExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.ResourcePolicyLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ServiceSettingNotFoundRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.ServiceSettingNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_StatusUnchangedRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.StatusUnchanged({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SubTypeCountLimitExceededExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.SubTypeCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TargetInUseExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.TargetInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TargetNotConnectedRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.TargetNotConnected({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TooManyTagsErrorRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.TooManyTagsError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TooManyUpdatesRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.TooManyUpdates({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TotalSizeLimitExceededExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.TotalSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnsupportedCalendarExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.UnsupportedCalendarException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnsupportedFeatureRequiredExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.UnsupportedFeatureRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnsupportedInventoryItemContextExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.UnsupportedInventoryItemContextException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnsupportedInventorySchemaVersionExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.UnsupportedInventorySchemaVersionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnsupportedOperatingSystemRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.UnsupportedOperatingSystem({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnsupportedParameterTypeRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.UnsupportedParameterType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnsupportedPlatformTypeRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.UnsupportedPlatformType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const se_AssociationStatus = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        AdditionalInfo: [],
        Date: (_)=>Math.round(_.getTime() / 1000),
        Message: [],
        Name: []
    });
};
const se_ComplianceExecutionSummary = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        ExecutionId: [],
        ExecutionTime: (_)=>Math.round(_.getTime() / 1000),
        ExecutionType: []
    });
};
const se_CreateActivationRequest = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        DefaultInstanceName: [],
        Description: [],
        ExpirationDate: (_)=>Math.round(_.getTime() / 1000),
        IamRole: [],
        RegistrationLimit: [],
        RegistrationMetadata: smithy_client_1._json,
        Tags: smithy_client_1._json
    });
};
const se_CreateMaintenanceWindowRequest = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        AllowUnassociatedTargets: [],
        ClientToken: [
            true,
            (_)=>_ ?? (0, uuid_1.v4)()
        ],
        Cutoff: [],
        Description: [],
        Duration: [],
        EndDate: [],
        Name: [],
        Schedule: [],
        ScheduleOffset: [],
        ScheduleTimezone: [],
        StartDate: [],
        Tags: smithy_client_1._json
    });
};
const se_CreateOpsItemRequest = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        AccountId: [],
        ActualEndTime: (_)=>Math.round(_.getTime() / 1000),
        ActualStartTime: (_)=>Math.round(_.getTime() / 1000),
        Category: [],
        Description: [],
        Notifications: smithy_client_1._json,
        OperationalData: smithy_client_1._json,
        OpsItemType: [],
        PlannedEndTime: (_)=>Math.round(_.getTime() / 1000),
        PlannedStartTime: (_)=>Math.round(_.getTime() / 1000),
        Priority: [],
        RelatedOpsItems: smithy_client_1._json,
        Severity: [],
        Source: [],
        Tags: smithy_client_1._json,
        Title: []
    });
};
const se_CreatePatchBaselineRequest = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        ApprovalRules: smithy_client_1._json,
        ApprovedPatches: smithy_client_1._json,
        ApprovedPatchesComplianceLevel: [],
        ApprovedPatchesEnableNonSecurity: [],
        ClientToken: [
            true,
            (_)=>_ ?? (0, uuid_1.v4)()
        ],
        Description: [],
        GlobalFilters: smithy_client_1._json,
        Name: [],
        OperatingSystem: [],
        RejectedPatches: smithy_client_1._json,
        RejectedPatchesAction: [],
        Sources: smithy_client_1._json,
        Tags: smithy_client_1._json
    });
};
const se_DeleteInventoryRequest = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        ClientToken: [
            true,
            (_)=>_ ?? (0, uuid_1.v4)()
        ],
        DryRun: [],
        SchemaDeleteOption: [],
        TypeName: []
    });
};
const se_GetInventoryRequest = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        Aggregators: (_)=>se_InventoryAggregatorList(_, context),
        Filters: smithy_client_1._json,
        MaxResults: [],
        NextToken: [],
        ResultAttributes: smithy_client_1._json
    });
};
const se_GetOpsSummaryRequest = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        Aggregators: (_)=>se_OpsAggregatorList(_, context),
        Filters: smithy_client_1._json,
        MaxResults: [],
        NextToken: [],
        ResultAttributes: smithy_client_1._json,
        SyncName: []
    });
};
const se_InventoryAggregator = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        Aggregators: (_)=>se_InventoryAggregatorList(_, context),
        Expression: [],
        Groups: smithy_client_1._json
    });
};
const se_InventoryAggregatorList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return se_InventoryAggregator(entry, context);
    });
};
const se_MaintenanceWindowLambdaParameters = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        ClientContext: [],
        Payload: context.base64Encoder,
        Qualifier: []
    });
};
const se_MaintenanceWindowTaskInvocationParameters = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        Automation: smithy_client_1._json,
        Lambda: (_)=>se_MaintenanceWindowLambdaParameters(_, context),
        RunCommand: smithy_client_1._json,
        StepFunctions: smithy_client_1._json
    });
};
const se_OpsAggregator = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        AggregatorType: [],
        Aggregators: (_)=>se_OpsAggregatorList(_, context),
        AttributeName: [],
        Filters: smithy_client_1._json,
        TypeName: [],
        Values: smithy_client_1._json
    });
};
const se_OpsAggregatorList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return se_OpsAggregator(entry, context);
    });
};
const se_PutComplianceItemsRequest = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        ComplianceType: [],
        ExecutionSummary: (_)=>se_ComplianceExecutionSummary(_, context),
        ItemContentHash: [],
        Items: smithy_client_1._json,
        ResourceId: [],
        ResourceType: [],
        UploadType: []
    });
};
const se_RegisterTargetWithMaintenanceWindowRequest = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        ClientToken: [
            true,
            (_)=>_ ?? (0, uuid_1.v4)()
        ],
        Description: [],
        Name: [],
        OwnerInformation: [],
        ResourceType: [],
        Targets: smithy_client_1._json,
        WindowId: []
    });
};
const se_RegisterTaskWithMaintenanceWindowRequest = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        AlarmConfiguration: smithy_client_1._json,
        ClientToken: [
            true,
            (_)=>_ ?? (0, uuid_1.v4)()
        ],
        CutoffBehavior: [],
        Description: [],
        LoggingInfo: smithy_client_1._json,
        MaxConcurrency: [],
        MaxErrors: [],
        Name: [],
        Priority: [],
        ServiceRoleArn: [],
        Targets: smithy_client_1._json,
        TaskArn: [],
        TaskInvocationParameters: (_)=>se_MaintenanceWindowTaskInvocationParameters(_, context),
        TaskParameters: smithy_client_1._json,
        TaskType: [],
        WindowId: []
    });
};
const se_StartChangeRequestExecutionRequest = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        AutoApprove: [],
        ChangeDetails: [],
        ChangeRequestName: [],
        ClientToken: [],
        DocumentName: [],
        DocumentVersion: [],
        Parameters: smithy_client_1._json,
        Runbooks: smithy_client_1._json,
        ScheduledEndTime: (_)=>Math.round(_.getTime() / 1000),
        ScheduledTime: (_)=>Math.round(_.getTime() / 1000),
        Tags: smithy_client_1._json
    });
};
const se_UpdateAssociationStatusRequest = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        AssociationStatus: (_)=>se_AssociationStatus(_, context),
        InstanceId: [],
        Name: []
    });
};
const se_UpdateMaintenanceWindowTaskRequest = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        AlarmConfiguration: smithy_client_1._json,
        CutoffBehavior: [],
        Description: [],
        LoggingInfo: smithy_client_1._json,
        MaxConcurrency: [],
        MaxErrors: [],
        Name: [],
        Priority: [],
        Replace: [],
        ServiceRoleArn: [],
        Targets: smithy_client_1._json,
        TaskArn: [],
        TaskInvocationParameters: (_)=>se_MaintenanceWindowTaskInvocationParameters(_, context),
        TaskParameters: smithy_client_1._json,
        WindowId: [],
        WindowTaskId: []
    });
};
const se_UpdateOpsItemRequest = (input, context)=>{
    return (0, smithy_client_1.take)(input, {
        ActualEndTime: (_)=>Math.round(_.getTime() / 1000),
        ActualStartTime: (_)=>Math.round(_.getTime() / 1000),
        Category: [],
        Description: [],
        Notifications: smithy_client_1._json,
        OperationalData: smithy_client_1._json,
        OperationalDataToDelete: smithy_client_1._json,
        OpsItemArn: [],
        OpsItemId: [],
        PlannedEndTime: (_)=>Math.round(_.getTime() / 1000),
        PlannedStartTime: (_)=>Math.round(_.getTime() / 1000),
        Priority: [],
        RelatedOpsItems: smithy_client_1._json,
        Severity: [],
        Status: [],
        Title: []
    });
};
const de_Activation = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ActivationId: smithy_client_1.expectString,
        CreatedDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DefaultInstanceName: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        ExpirationDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Expired: smithy_client_1.expectBoolean,
        IamRole: smithy_client_1.expectString,
        RegistrationLimit: smithy_client_1.expectInt32,
        RegistrationsCount: smithy_client_1.expectInt32,
        Tags: smithy_client_1._json
    });
};
const de_ActivationList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_Activation(entry, context);
    });
    return retVal;
};
const de_Association = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AssociationId: smithy_client_1.expectString,
        AssociationName: smithy_client_1.expectString,
        AssociationVersion: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        InstanceId: smithy_client_1.expectString,
        LastExecutionDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        Overview: smithy_client_1._json,
        ScheduleExpression: smithy_client_1.expectString,
        ScheduleOffset: smithy_client_1.expectInt32,
        TargetMaps: smithy_client_1._json,
        Targets: smithy_client_1._json
    });
};
const de_AssociationDescription = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        ApplyOnlyAtCronInterval: smithy_client_1.expectBoolean,
        AssociationId: smithy_client_1.expectString,
        AssociationName: smithy_client_1.expectString,
        AssociationVersion: smithy_client_1.expectString,
        AutomationTargetParameterName: smithy_client_1.expectString,
        CalendarNames: smithy_client_1._json,
        ComplianceSeverity: smithy_client_1.expectString,
        Date: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DocumentVersion: smithy_client_1.expectString,
        InstanceId: smithy_client_1.expectString,
        LastExecutionDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastSuccessfulExecutionDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdateAssociationDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        MaxConcurrency: smithy_client_1.expectString,
        MaxErrors: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        OutputLocation: smithy_client_1._json,
        Overview: smithy_client_1._json,
        Parameters: smithy_client_1._json,
        ScheduleExpression: smithy_client_1.expectString,
        ScheduleOffset: smithy_client_1.expectInt32,
        Status: (_)=>de_AssociationStatus(_, context),
        SyncCompliance: smithy_client_1.expectString,
        TargetLocations: smithy_client_1._json,
        TargetMaps: smithy_client_1._json,
        Targets: smithy_client_1._json,
        TriggeredAlarms: smithy_client_1._json
    });
};
const de_AssociationDescriptionList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_AssociationDescription(entry, context);
    });
    return retVal;
};
const de_AssociationExecution = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        AssociationId: smithy_client_1.expectString,
        AssociationVersion: smithy_client_1.expectString,
        CreatedTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DetailedStatus: smithy_client_1.expectString,
        ExecutionId: smithy_client_1.expectString,
        LastExecutionDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ResourceCountByStatus: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        TriggeredAlarms: smithy_client_1._json
    });
};
const de_AssociationExecutionsList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_AssociationExecution(entry, context);
    });
    return retVal;
};
const de_AssociationExecutionTarget = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AssociationId: smithy_client_1.expectString,
        AssociationVersion: smithy_client_1.expectString,
        DetailedStatus: smithy_client_1.expectString,
        ExecutionId: smithy_client_1.expectString,
        LastExecutionDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        OutputSource: smithy_client_1._json,
        ResourceId: smithy_client_1.expectString,
        ResourceType: smithy_client_1.expectString,
        Status: smithy_client_1.expectString
    });
};
const de_AssociationExecutionTargetsList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_AssociationExecutionTarget(entry, context);
    });
    return retVal;
};
const de_AssociationList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_Association(entry, context);
    });
    return retVal;
};
const de_AssociationStatus = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AdditionalInfo: smithy_client_1.expectString,
        Date: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Message: smithy_client_1.expectString,
        Name: smithy_client_1.expectString
    });
};
const de_AssociationVersionInfo = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ApplyOnlyAtCronInterval: smithy_client_1.expectBoolean,
        AssociationId: smithy_client_1.expectString,
        AssociationName: smithy_client_1.expectString,
        AssociationVersion: smithy_client_1.expectString,
        CalendarNames: smithy_client_1._json,
        ComplianceSeverity: smithy_client_1.expectString,
        CreatedDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DocumentVersion: smithy_client_1.expectString,
        MaxConcurrency: smithy_client_1.expectString,
        MaxErrors: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        OutputLocation: smithy_client_1._json,
        Parameters: smithy_client_1._json,
        ScheduleExpression: smithy_client_1.expectString,
        ScheduleOffset: smithy_client_1.expectInt32,
        SyncCompliance: smithy_client_1.expectString,
        TargetLocations: smithy_client_1._json,
        TargetMaps: smithy_client_1._json,
        Targets: smithy_client_1._json
    });
};
const de_AssociationVersionList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_AssociationVersionInfo(entry, context);
    });
    return retVal;
};
const de_AutomationExecution = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        AssociationId: smithy_client_1.expectString,
        AutomationExecutionId: smithy_client_1.expectString,
        AutomationExecutionStatus: smithy_client_1.expectString,
        AutomationSubtype: smithy_client_1.expectString,
        ChangeRequestName: smithy_client_1.expectString,
        CurrentAction: smithy_client_1.expectString,
        CurrentStepName: smithy_client_1.expectString,
        DocumentName: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        ExecutedBy: smithy_client_1.expectString,
        ExecutionEndTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExecutionStartTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        FailureMessage: smithy_client_1.expectString,
        MaxConcurrency: smithy_client_1.expectString,
        MaxErrors: smithy_client_1.expectString,
        Mode: smithy_client_1.expectString,
        OpsItemId: smithy_client_1.expectString,
        Outputs: smithy_client_1._json,
        Parameters: smithy_client_1._json,
        ParentAutomationExecutionId: smithy_client_1.expectString,
        ProgressCounters: smithy_client_1._json,
        ResolvedTargets: smithy_client_1._json,
        Runbooks: smithy_client_1._json,
        ScheduledTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        StepExecutions: (_)=>de_StepExecutionList(_, context),
        StepExecutionsTruncated: smithy_client_1.expectBoolean,
        Target: smithy_client_1.expectString,
        TargetLocations: smithy_client_1._json,
        TargetMaps: smithy_client_1._json,
        TargetParameterName: smithy_client_1.expectString,
        Targets: smithy_client_1._json,
        TriggeredAlarms: smithy_client_1._json
    });
};
const de_AutomationExecutionMetadata = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        AssociationId: smithy_client_1.expectString,
        AutomationExecutionId: smithy_client_1.expectString,
        AutomationExecutionStatus: smithy_client_1.expectString,
        AutomationSubtype: smithy_client_1.expectString,
        AutomationType: smithy_client_1.expectString,
        ChangeRequestName: smithy_client_1.expectString,
        CurrentAction: smithy_client_1.expectString,
        CurrentStepName: smithy_client_1.expectString,
        DocumentName: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        ExecutedBy: smithy_client_1.expectString,
        ExecutionEndTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExecutionStartTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        FailureMessage: smithy_client_1.expectString,
        LogFile: smithy_client_1.expectString,
        MaxConcurrency: smithy_client_1.expectString,
        MaxErrors: smithy_client_1.expectString,
        Mode: smithy_client_1.expectString,
        OpsItemId: smithy_client_1.expectString,
        Outputs: smithy_client_1._json,
        ParentAutomationExecutionId: smithy_client_1.expectString,
        ResolvedTargets: smithy_client_1._json,
        Runbooks: smithy_client_1._json,
        ScheduledTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Target: smithy_client_1.expectString,
        TargetMaps: smithy_client_1._json,
        TargetParameterName: smithy_client_1.expectString,
        Targets: smithy_client_1._json,
        TriggeredAlarms: smithy_client_1._json
    });
};
const de_AutomationExecutionMetadataList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_AutomationExecutionMetadata(entry, context);
    });
    return retVal;
};
const de_Command = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        CloudWatchOutputConfig: smithy_client_1._json,
        CommandId: smithy_client_1.expectString,
        Comment: smithy_client_1.expectString,
        CompletedCount: smithy_client_1.expectInt32,
        DeliveryTimedOutCount: smithy_client_1.expectInt32,
        DocumentName: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        ErrorCount: smithy_client_1.expectInt32,
        ExpiresAfter: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        InstanceIds: smithy_client_1._json,
        MaxConcurrency: smithy_client_1.expectString,
        MaxErrors: smithy_client_1.expectString,
        NotificationConfig: smithy_client_1._json,
        OutputS3BucketName: smithy_client_1.expectString,
        OutputS3KeyPrefix: smithy_client_1.expectString,
        OutputS3Region: smithy_client_1.expectString,
        Parameters: smithy_client_1._json,
        RequestedDateTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ServiceRole: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString,
        TargetCount: smithy_client_1.expectInt32,
        Targets: smithy_client_1._json,
        TimeoutSeconds: smithy_client_1.expectInt32,
        TriggeredAlarms: smithy_client_1._json
    });
};
const de_CommandInvocation = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        CloudWatchOutputConfig: smithy_client_1._json,
        CommandId: smithy_client_1.expectString,
        CommandPlugins: (_)=>de_CommandPluginList(_, context),
        Comment: smithy_client_1.expectString,
        DocumentName: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        InstanceId: smithy_client_1.expectString,
        InstanceName: smithy_client_1.expectString,
        NotificationConfig: smithy_client_1._json,
        RequestedDateTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ServiceRole: smithy_client_1.expectString,
        StandardErrorUrl: smithy_client_1.expectString,
        StandardOutputUrl: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString,
        TraceOutput: smithy_client_1.expectString
    });
};
const de_CommandInvocationList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_CommandInvocation(entry, context);
    });
    return retVal;
};
const de_CommandList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_Command(entry, context);
    });
    return retVal;
};
const de_CommandPlugin = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        Name: smithy_client_1.expectString,
        Output: smithy_client_1.expectString,
        OutputS3BucketName: smithy_client_1.expectString,
        OutputS3KeyPrefix: smithy_client_1.expectString,
        OutputS3Region: smithy_client_1.expectString,
        ResponseCode: smithy_client_1.expectInt32,
        ResponseFinishDateTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ResponseStartDateTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        StandardErrorUrl: smithy_client_1.expectString,
        StandardOutputUrl: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString
    });
};
const de_CommandPluginList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_CommandPlugin(entry, context);
    });
    return retVal;
};
const de_ComplianceExecutionSummary = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ExecutionId: smithy_client_1.expectString,
        ExecutionTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExecutionType: smithy_client_1.expectString
    });
};
const de_ComplianceItem = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ComplianceType: smithy_client_1.expectString,
        Details: smithy_client_1._json,
        ExecutionSummary: (_)=>de_ComplianceExecutionSummary(_, context),
        Id: smithy_client_1.expectString,
        ResourceId: smithy_client_1.expectString,
        ResourceType: smithy_client_1.expectString,
        Severity: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        Title: smithy_client_1.expectString
    });
};
const de_ComplianceItemList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_ComplianceItem(entry, context);
    });
    return retVal;
};
const de_CreateAssociationBatchResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        Failed: smithy_client_1._json,
        Successful: (_)=>de_AssociationDescriptionList(_, context)
    });
};
const de_CreateAssociationResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AssociationDescription: (_)=>de_AssociationDescription(_, context)
    });
};
const de_CreateDocumentResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        DocumentDescription: (_)=>de_DocumentDescription(_, context)
    });
};
const de_DescribeActivationsResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ActivationList: (_)=>de_ActivationList(_, context),
        NextToken: smithy_client_1.expectString
    });
};
const de_DescribeAssociationExecutionsResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AssociationExecutions: (_)=>de_AssociationExecutionsList(_, context),
        NextToken: smithy_client_1.expectString
    });
};
const de_DescribeAssociationExecutionTargetsResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AssociationExecutionTargets: (_)=>de_AssociationExecutionTargetsList(_, context),
        NextToken: smithy_client_1.expectString
    });
};
const de_DescribeAssociationResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AssociationDescription: (_)=>de_AssociationDescription(_, context)
    });
};
const de_DescribeAutomationExecutionsResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AutomationExecutionMetadataList: (_)=>de_AutomationExecutionMetadataList(_, context),
        NextToken: smithy_client_1.expectString
    });
};
const de_DescribeAutomationStepExecutionsResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        StepExecutions: (_)=>de_StepExecutionList(_, context)
    });
};
const de_DescribeAvailablePatchesResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Patches: (_)=>de_PatchList(_, context)
    });
};
const de_DescribeDocumentResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        Document: (_)=>de_DocumentDescription(_, context)
    });
};
const de_DescribeEffectivePatchesForPatchBaselineResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        EffectivePatches: (_)=>de_EffectivePatchList(_, context),
        NextToken: smithy_client_1.expectString
    });
};
const de_DescribeInstanceAssociationsStatusResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        InstanceAssociationStatusInfos: (_)=>de_InstanceAssociationStatusInfos(_, context),
        NextToken: smithy_client_1.expectString
    });
};
const de_DescribeInstanceInformationResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        InstanceInformationList: (_)=>de_InstanceInformationList(_, context),
        NextToken: smithy_client_1.expectString
    });
};
const de_DescribeInstancePatchesResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Patches: (_)=>de_PatchComplianceDataList(_, context)
    });
};
const de_DescribeInstancePatchStatesForPatchGroupResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        InstancePatchStates: (_)=>de_InstancePatchStatesList(_, context),
        NextToken: smithy_client_1.expectString
    });
};
const de_DescribeInstancePatchStatesResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        InstancePatchStates: (_)=>de_InstancePatchStateList(_, context),
        NextToken: smithy_client_1.expectString
    });
};
const de_DescribeInventoryDeletionsResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        InventoryDeletions: (_)=>de_InventoryDeletionsList(_, context),
        NextToken: smithy_client_1.expectString
    });
};
const de_DescribeMaintenanceWindowExecutionsResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        WindowExecutions: (_)=>de_MaintenanceWindowExecutionList(_, context)
    });
};
const de_DescribeMaintenanceWindowExecutionTaskInvocationsResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        WindowExecutionTaskInvocationIdentities: (_)=>de_MaintenanceWindowExecutionTaskInvocationIdentityList(_, context)
    });
};
const de_DescribeMaintenanceWindowExecutionTasksResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        WindowExecutionTaskIdentities: (_)=>de_MaintenanceWindowExecutionTaskIdentityList(_, context)
    });
};
const de_DescribeOpsItemsResponse = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        OpsItemSummaries: (_)=>de_OpsItemSummaries(_, context)
    });
};
const de_DescribeParametersResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Parameters: (_)=>de_ParameterMetadataList(_, context)
    });
};
const de_DescribeSessionsResponse = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Sessions: (_)=>de_SessionList(_, context)
    });
};
const de_DocumentDescription = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ApprovedVersion: smithy_client_1.expectString,
        AttachmentsInformation: smithy_client_1._json,
        Author: smithy_client_1.expectString,
        Category: smithy_client_1._json,
        CategoryEnum: smithy_client_1._json,
        CreatedDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DefaultVersion: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        DisplayName: smithy_client_1.expectString,
        DocumentFormat: smithy_client_1.expectString,
        DocumentType: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        Hash: smithy_client_1.expectString,
        HashType: smithy_client_1.expectString,
        LatestVersion: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Owner: smithy_client_1.expectString,
        Parameters: smithy_client_1._json,
        PendingReviewVersion: smithy_client_1.expectString,
        PlatformTypes: smithy_client_1._json,
        Requires: smithy_client_1._json,
        ReviewInformation: (_)=>de_ReviewInformationList(_, context),
        ReviewStatus: smithy_client_1.expectString,
        SchemaVersion: smithy_client_1.expectString,
        Sha1: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        StatusInformation: smithy_client_1.expectString,
        Tags: smithy_client_1._json,
        TargetType: smithy_client_1.expectString,
        VersionName: smithy_client_1.expectString
    });
};
const de_DocumentIdentifier = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        Author: smithy_client_1.expectString,
        CreatedDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DisplayName: smithy_client_1.expectString,
        DocumentFormat: smithy_client_1.expectString,
        DocumentType: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Owner: smithy_client_1.expectString,
        PlatformTypes: smithy_client_1._json,
        Requires: smithy_client_1._json,
        ReviewStatus: smithy_client_1.expectString,
        SchemaVersion: smithy_client_1.expectString,
        Tags: smithy_client_1._json,
        TargetType: smithy_client_1.expectString,
        VersionName: smithy_client_1.expectString
    });
};
const de_DocumentIdentifierList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_DocumentIdentifier(entry, context);
    });
    return retVal;
};
const de_DocumentMetadataResponseInfo = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ReviewerResponse: (_)=>de_DocumentReviewerResponseList(_, context)
    });
};
const de_DocumentReviewerResponseList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_DocumentReviewerResponseSource(entry, context);
    });
    return retVal;
};
const de_DocumentReviewerResponseSource = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        Comment: smithy_client_1._json,
        CreateTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ReviewStatus: smithy_client_1.expectString,
        Reviewer: smithy_client_1.expectString,
        UpdatedTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_)))
    });
};
const de_DocumentVersionInfo = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        CreatedDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DisplayName: smithy_client_1.expectString,
        DocumentFormat: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        IsDefaultVersion: smithy_client_1.expectBoolean,
        Name: smithy_client_1.expectString,
        ReviewStatus: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        StatusInformation: smithy_client_1.expectString,
        VersionName: smithy_client_1.expectString
    });
};
const de_DocumentVersionList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_DocumentVersionInfo(entry, context);
    });
    return retVal;
};
const de_EffectivePatch = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        Patch: (_)=>de_Patch(_, context),
        PatchStatus: (_)=>de_PatchStatus(_, context)
    });
};
const de_EffectivePatchList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_EffectivePatch(entry, context);
    });
    return retVal;
};
const de_GetAutomationExecutionResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AutomationExecution: (_)=>de_AutomationExecution(_, context)
    });
};
const de_GetDocumentResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AttachmentsContent: smithy_client_1._json,
        Content: smithy_client_1.expectString,
        CreatedDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DisplayName: smithy_client_1.expectString,
        DocumentFormat: smithy_client_1.expectString,
        DocumentType: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Requires: smithy_client_1._json,
        ReviewStatus: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        StatusInformation: smithy_client_1.expectString,
        VersionName: smithy_client_1.expectString
    });
};
const de_GetMaintenanceWindowExecutionResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        EndTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        StartTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString,
        TaskIds: smithy_client_1._json,
        WindowExecutionId: smithy_client_1.expectString
    });
};
const de_GetMaintenanceWindowExecutionTaskInvocationResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        EndTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExecutionId: smithy_client_1.expectString,
        InvocationId: smithy_client_1.expectString,
        OwnerInformation: smithy_client_1.expectString,
        Parameters: smithy_client_1.expectString,
        StartTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString,
        TaskExecutionId: smithy_client_1.expectString,
        TaskType: smithy_client_1.expectString,
        WindowExecutionId: smithy_client_1.expectString,
        WindowTargetId: smithy_client_1.expectString
    });
};
const de_GetMaintenanceWindowExecutionTaskResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        EndTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        MaxConcurrency: smithy_client_1.expectString,
        MaxErrors: smithy_client_1.expectString,
        Priority: smithy_client_1.expectInt32,
        ServiceRole: smithy_client_1.expectString,
        StartTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString,
        TaskArn: smithy_client_1.expectString,
        TaskExecutionId: smithy_client_1.expectString,
        TaskParameters: smithy_client_1._json,
        TriggeredAlarms: smithy_client_1._json,
        Type: smithy_client_1.expectString,
        WindowExecutionId: smithy_client_1.expectString
    });
};
const de_GetMaintenanceWindowResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AllowUnassociatedTargets: smithy_client_1.expectBoolean,
        CreatedDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Cutoff: smithy_client_1.expectInt32,
        Description: smithy_client_1.expectString,
        Duration: smithy_client_1.expectInt32,
        Enabled: smithy_client_1.expectBoolean,
        EndDate: smithy_client_1.expectString,
        ModifiedDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        NextExecutionTime: smithy_client_1.expectString,
        Schedule: smithy_client_1.expectString,
        ScheduleOffset: smithy_client_1.expectInt32,
        ScheduleTimezone: smithy_client_1.expectString,
        StartDate: smithy_client_1.expectString,
        WindowId: smithy_client_1.expectString
    });
};
const de_GetMaintenanceWindowTaskResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        CutoffBehavior: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        LoggingInfo: smithy_client_1._json,
        MaxConcurrency: smithy_client_1.expectString,
        MaxErrors: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Priority: smithy_client_1.expectInt32,
        ServiceRoleArn: smithy_client_1.expectString,
        Targets: smithy_client_1._json,
        TaskArn: smithy_client_1.expectString,
        TaskInvocationParameters: (_)=>de_MaintenanceWindowTaskInvocationParameters(_, context),
        TaskParameters: smithy_client_1._json,
        TaskType: smithy_client_1.expectString,
        WindowId: smithy_client_1.expectString,
        WindowTaskId: smithy_client_1.expectString
    });
};
const de_GetOpsItemResponse = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        OpsItem: (_)=>de_OpsItem(_, context)
    });
};
const de_GetParameterHistoryResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Parameters: (_)=>de_ParameterHistoryList(_, context)
    });
};
const de_GetParameterResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        Parameter: (_)=>de_Parameter(_, context)
    });
};
const de_GetParametersByPathResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Parameters: (_)=>de_ParameterList(_, context)
    });
};
const de_GetParametersResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        InvalidParameters: smithy_client_1._json,
        Parameters: (_)=>de_ParameterList(_, context)
    });
};
const de_GetPatchBaselineResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ApprovalRules: smithy_client_1._json,
        ApprovedPatches: smithy_client_1._json,
        ApprovedPatchesComplianceLevel: smithy_client_1.expectString,
        ApprovedPatchesEnableNonSecurity: smithy_client_1.expectBoolean,
        BaselineId: smithy_client_1.expectString,
        CreatedDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Description: smithy_client_1.expectString,
        GlobalFilters: smithy_client_1._json,
        ModifiedDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        OperatingSystem: smithy_client_1.expectString,
        PatchGroups: smithy_client_1._json,
        RejectedPatches: smithy_client_1._json,
        RejectedPatchesAction: smithy_client_1.expectString,
        Sources: smithy_client_1._json
    });
};
const de_GetServiceSettingResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ServiceSetting: (_)=>de_ServiceSetting(_, context)
    });
};
const de_InstanceAssociationStatusInfo = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AssociationId: smithy_client_1.expectString,
        AssociationName: smithy_client_1.expectString,
        AssociationVersion: smithy_client_1.expectString,
        DetailedStatus: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        ErrorCode: smithy_client_1.expectString,
        ExecutionDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExecutionSummary: smithy_client_1.expectString,
        InstanceId: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        OutputUrl: smithy_client_1._json,
        Status: smithy_client_1.expectString
    });
};
const de_InstanceAssociationStatusInfos = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_InstanceAssociationStatusInfo(entry, context);
    });
    return retVal;
};
const de_InstanceInformation = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ActivationId: smithy_client_1.expectString,
        AgentVersion: smithy_client_1.expectString,
        AssociationOverview: smithy_client_1._json,
        AssociationStatus: smithy_client_1.expectString,
        ComputerName: smithy_client_1.expectString,
        IPAddress: smithy_client_1.expectString,
        IamRole: smithy_client_1.expectString,
        InstanceId: smithy_client_1.expectString,
        IsLatestVersion: smithy_client_1.expectBoolean,
        LastAssociationExecutionDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastPingDateTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastSuccessfulAssociationExecutionDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        PingStatus: smithy_client_1.expectString,
        PlatformName: smithy_client_1.expectString,
        PlatformType: smithy_client_1.expectString,
        PlatformVersion: smithy_client_1.expectString,
        RegistrationDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ResourceType: smithy_client_1.expectString,
        SourceId: smithy_client_1.expectString,
        SourceType: smithy_client_1.expectString
    });
};
const de_InstanceInformationList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_InstanceInformation(entry, context);
    });
    return retVal;
};
const de_InstancePatchState = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        BaselineId: smithy_client_1.expectString,
        CriticalNonCompliantCount: smithy_client_1.expectInt32,
        FailedCount: smithy_client_1.expectInt32,
        InstallOverrideList: smithy_client_1.expectString,
        InstalledCount: smithy_client_1.expectInt32,
        InstalledOtherCount: smithy_client_1.expectInt32,
        InstalledPendingRebootCount: smithy_client_1.expectInt32,
        InstalledRejectedCount: smithy_client_1.expectInt32,
        InstanceId: smithy_client_1.expectString,
        LastNoRebootInstallOperationTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        MissingCount: smithy_client_1.expectInt32,
        NotApplicableCount: smithy_client_1.expectInt32,
        Operation: smithy_client_1.expectString,
        OperationEndTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        OperationStartTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        OtherNonCompliantCount: smithy_client_1.expectInt32,
        OwnerInformation: smithy_client_1.expectString,
        PatchGroup: smithy_client_1.expectString,
        RebootOption: smithy_client_1.expectString,
        SecurityNonCompliantCount: smithy_client_1.expectInt32,
        SnapshotId: smithy_client_1.expectString,
        UnreportedNotApplicableCount: smithy_client_1.expectInt32
    });
};
const de_InstancePatchStateList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_InstancePatchState(entry, context);
    });
    return retVal;
};
const de_InstancePatchStatesList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_InstancePatchState(entry, context);
    });
    return retVal;
};
const de_InventoryDeletionsList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_InventoryDeletionStatusItem(entry, context);
    });
    return retVal;
};
const de_InventoryDeletionStatusItem = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        DeletionId: smithy_client_1.expectString,
        DeletionStartTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DeletionSummary: smithy_client_1._json,
        LastStatus: smithy_client_1.expectString,
        LastStatusMessage: smithy_client_1.expectString,
        LastStatusUpdateTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TypeName: smithy_client_1.expectString
    });
};
const de_ListAssociationsResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        Associations: (_)=>de_AssociationList(_, context),
        NextToken: smithy_client_1.expectString
    });
};
const de_ListAssociationVersionsResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AssociationVersions: (_)=>de_AssociationVersionList(_, context),
        NextToken: smithy_client_1.expectString
    });
};
const de_ListCommandInvocationsResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        CommandInvocations: (_)=>de_CommandInvocationList(_, context),
        NextToken: smithy_client_1.expectString
    });
};
const de_ListCommandsResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        Commands: (_)=>de_CommandList(_, context),
        NextToken: smithy_client_1.expectString
    });
};
const de_ListComplianceItemsResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ComplianceItems: (_)=>de_ComplianceItemList(_, context),
        NextToken: smithy_client_1.expectString
    });
};
const de_ListDocumentMetadataHistoryResponse = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        Author: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        Metadata: (_)=>de_DocumentMetadataResponseInfo(_, context),
        Name: smithy_client_1.expectString,
        NextToken: smithy_client_1.expectString
    });
};
const de_ListDocumentsResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        DocumentIdentifiers: (_)=>de_DocumentIdentifierList(_, context),
        NextToken: smithy_client_1.expectString
    });
};
const de_ListDocumentVersionsResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        DocumentVersions: (_)=>de_DocumentVersionList(_, context),
        NextToken: smithy_client_1.expectString
    });
};
const de_ListOpsItemEventsResponse = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Summaries: (_)=>de_OpsItemEventSummaries(_, context)
    });
};
const de_ListOpsItemRelatedItemsResponse = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Summaries: (_)=>de_OpsItemRelatedItemSummaries(_, context)
    });
};
const de_ListOpsMetadataResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        OpsMetadataList: (_)=>de_OpsMetadataList(_, context)
    });
};
const de_ListResourceComplianceSummariesResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        ResourceComplianceSummaryItems: (_)=>de_ResourceComplianceSummaryItemList(_, context)
    });
};
const de_ListResourceDataSyncResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        ResourceDataSyncItems: (_)=>de_ResourceDataSyncItemList(_, context)
    });
};
const de_MaintenanceWindowExecution = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        EndTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        StartTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString,
        WindowExecutionId: smithy_client_1.expectString,
        WindowId: smithy_client_1.expectString
    });
};
const de_MaintenanceWindowExecutionList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_MaintenanceWindowExecution(entry, context);
    });
    return retVal;
};
const de_MaintenanceWindowExecutionTaskIdentity = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        EndTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        StartTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString,
        TaskArn: smithy_client_1.expectString,
        TaskExecutionId: smithy_client_1.expectString,
        TaskType: smithy_client_1.expectString,
        TriggeredAlarms: smithy_client_1._json,
        WindowExecutionId: smithy_client_1.expectString
    });
};
const de_MaintenanceWindowExecutionTaskIdentityList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_MaintenanceWindowExecutionTaskIdentity(entry, context);
    });
    return retVal;
};
const de_MaintenanceWindowExecutionTaskInvocationIdentity = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        EndTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExecutionId: smithy_client_1.expectString,
        InvocationId: smithy_client_1.expectString,
        OwnerInformation: smithy_client_1.expectString,
        Parameters: smithy_client_1.expectString,
        StartTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString,
        TaskExecutionId: smithy_client_1.expectString,
        TaskType: smithy_client_1.expectString,
        WindowExecutionId: smithy_client_1.expectString,
        WindowTargetId: smithy_client_1.expectString
    });
};
const de_MaintenanceWindowExecutionTaskInvocationIdentityList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_MaintenanceWindowExecutionTaskInvocationIdentity(entry, context);
    });
    return retVal;
};
const de_MaintenanceWindowLambdaParameters = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ClientContext: smithy_client_1.expectString,
        Payload: context.base64Decoder,
        Qualifier: smithy_client_1.expectString
    });
};
const de_MaintenanceWindowTaskInvocationParameters = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        Automation: smithy_client_1._json,
        Lambda: (_)=>de_MaintenanceWindowLambdaParameters(_, context),
        RunCommand: smithy_client_1._json,
        StepFunctions: smithy_client_1._json
    });
};
const de_OpsItem = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ActualEndTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ActualStartTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Category: smithy_client_1.expectString,
        CreatedBy: smithy_client_1.expectString,
        CreatedTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Description: smithy_client_1.expectString,
        LastModifiedBy: smithy_client_1.expectString,
        LastModifiedTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Notifications: smithy_client_1._json,
        OperationalData: smithy_client_1._json,
        OpsItemArn: smithy_client_1.expectString,
        OpsItemId: smithy_client_1.expectString,
        OpsItemType: smithy_client_1.expectString,
        PlannedEndTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        PlannedStartTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Priority: smithy_client_1.expectInt32,
        RelatedOpsItems: smithy_client_1._json,
        Severity: smithy_client_1.expectString,
        Source: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        Title: smithy_client_1.expectString,
        Version: smithy_client_1.expectString
    });
};
const de_OpsItemEventSummaries = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_OpsItemEventSummary(entry, context);
    });
    return retVal;
};
const de_OpsItemEventSummary = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        CreatedBy: smithy_client_1._json,
        CreatedTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Detail: smithy_client_1.expectString,
        DetailType: smithy_client_1.expectString,
        EventId: smithy_client_1.expectString,
        OpsItemId: smithy_client_1.expectString,
        Source: smithy_client_1.expectString
    });
};
const de_OpsItemRelatedItemSummaries = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_OpsItemRelatedItemSummary(entry, context);
    });
    return retVal;
};
const de_OpsItemRelatedItemSummary = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AssociationId: smithy_client_1.expectString,
        AssociationType: smithy_client_1.expectString,
        CreatedBy: smithy_client_1._json,
        CreatedTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastModifiedBy: smithy_client_1._json,
        LastModifiedTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        OpsItemId: smithy_client_1.expectString,
        ResourceType: smithy_client_1.expectString,
        ResourceUri: smithy_client_1.expectString
    });
};
const de_OpsItemSummaries = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_OpsItemSummary(entry, context);
    });
    return retVal;
};
const de_OpsItemSummary = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ActualEndTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ActualStartTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Category: smithy_client_1.expectString,
        CreatedBy: smithy_client_1.expectString,
        CreatedTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastModifiedBy: smithy_client_1.expectString,
        LastModifiedTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        OperationalData: smithy_client_1._json,
        OpsItemId: smithy_client_1.expectString,
        OpsItemType: smithy_client_1.expectString,
        PlannedEndTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        PlannedStartTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Priority: smithy_client_1.expectInt32,
        Severity: smithy_client_1.expectString,
        Source: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        Title: smithy_client_1.expectString
    });
};
const de_OpsMetadata = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        CreationDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastModifiedDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastModifiedUser: smithy_client_1.expectString,
        OpsMetadataArn: smithy_client_1.expectString,
        ResourceId: smithy_client_1.expectString
    });
};
const de_OpsMetadataList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_OpsMetadata(entry, context);
    });
    return retVal;
};
const de_Parameter = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ARN: smithy_client_1.expectString,
        DataType: smithy_client_1.expectString,
        LastModifiedDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        Selector: smithy_client_1.expectString,
        SourceResult: smithy_client_1.expectString,
        Type: smithy_client_1.expectString,
        Value: smithy_client_1.expectString,
        Version: smithy_client_1.expectLong
    });
};
const de_ParameterHistory = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AllowedPattern: smithy_client_1.expectString,
        DataType: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        KeyId: smithy_client_1.expectString,
        Labels: smithy_client_1._json,
        LastModifiedDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastModifiedUser: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Policies: smithy_client_1._json,
        Tier: smithy_client_1.expectString,
        Type: smithy_client_1.expectString,
        Value: smithy_client_1.expectString,
        Version: smithy_client_1.expectLong
    });
};
const de_ParameterHistoryList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_ParameterHistory(entry, context);
    });
    return retVal;
};
const de_ParameterList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_Parameter(entry, context);
    });
    return retVal;
};
const de_ParameterMetadata = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AllowedPattern: smithy_client_1.expectString,
        DataType: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        KeyId: smithy_client_1.expectString,
        LastModifiedDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastModifiedUser: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Policies: smithy_client_1._json,
        Tier: smithy_client_1.expectString,
        Type: smithy_client_1.expectString,
        Version: smithy_client_1.expectLong
    });
};
const de_ParameterMetadataList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_ParameterMetadata(entry, context);
    });
    return retVal;
};
const de_Patch = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AdvisoryIds: smithy_client_1._json,
        Arch: smithy_client_1.expectString,
        BugzillaIds: smithy_client_1._json,
        CVEIds: smithy_client_1._json,
        Classification: smithy_client_1.expectString,
        ContentUrl: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        Epoch: smithy_client_1.expectInt32,
        Id: smithy_client_1.expectString,
        KbNumber: smithy_client_1.expectString,
        Language: smithy_client_1.expectString,
        MsrcNumber: smithy_client_1.expectString,
        MsrcSeverity: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Product: smithy_client_1.expectString,
        ProductFamily: smithy_client_1.expectString,
        Release: smithy_client_1.expectString,
        ReleaseDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Repository: smithy_client_1.expectString,
        Severity: smithy_client_1.expectString,
        Title: smithy_client_1.expectString,
        Vendor: smithy_client_1.expectString,
        Version: smithy_client_1.expectString
    });
};
const de_PatchComplianceData = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        CVEIds: smithy_client_1.expectString,
        Classification: smithy_client_1.expectString,
        InstalledTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        KBId: smithy_client_1.expectString,
        Severity: smithy_client_1.expectString,
        State: smithy_client_1.expectString,
        Title: smithy_client_1.expectString
    });
};
const de_PatchComplianceDataList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_PatchComplianceData(entry, context);
    });
    return retVal;
};
const de_PatchList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_Patch(entry, context);
    });
    return retVal;
};
const de_PatchStatus = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ApprovalDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ComplianceLevel: smithy_client_1.expectString,
        DeploymentStatus: smithy_client_1.expectString
    });
};
const de_ResetServiceSettingResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ServiceSetting: (_)=>de_ServiceSetting(_, context)
    });
};
const de_ResourceComplianceSummaryItem = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ComplianceType: smithy_client_1.expectString,
        CompliantSummary: smithy_client_1._json,
        ExecutionSummary: (_)=>de_ComplianceExecutionSummary(_, context),
        NonCompliantSummary: smithy_client_1._json,
        OverallSeverity: smithy_client_1.expectString,
        ResourceId: smithy_client_1.expectString,
        ResourceType: smithy_client_1.expectString,
        Status: smithy_client_1.expectString
    });
};
const de_ResourceComplianceSummaryItemList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_ResourceComplianceSummaryItem(entry, context);
    });
    return retVal;
};
const de_ResourceDataSyncItem = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        LastStatus: smithy_client_1.expectString,
        LastSuccessfulSyncTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastSyncStatusMessage: smithy_client_1.expectString,
        LastSyncTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        S3Destination: smithy_client_1._json,
        SyncCreatedTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        SyncLastModifiedTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        SyncName: smithy_client_1.expectString,
        SyncSource: smithy_client_1._json,
        SyncType: smithy_client_1.expectString
    });
};
const de_ResourceDataSyncItemList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_ResourceDataSyncItem(entry, context);
    });
    return retVal;
};
const de_ReviewInformation = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ReviewedTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Reviewer: smithy_client_1.expectString,
        Status: smithy_client_1.expectString
    });
};
const de_ReviewInformationList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_ReviewInformation(entry, context);
    });
    return retVal;
};
const de_SendCommandResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        Command: (_)=>de_Command(_, context)
    });
};
const de_ServiceSetting = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ARN: smithy_client_1.expectString,
        LastModifiedDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastModifiedUser: smithy_client_1.expectString,
        SettingId: smithy_client_1.expectString,
        SettingValue: smithy_client_1.expectString,
        Status: smithy_client_1.expectString
    });
};
const de_Session = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        Details: smithy_client_1.expectString,
        DocumentName: smithy_client_1.expectString,
        EndDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        MaxSessionDuration: smithy_client_1.expectString,
        OutputUrl: smithy_client_1._json,
        Owner: smithy_client_1.expectString,
        Reason: smithy_client_1.expectString,
        SessionId: smithy_client_1.expectString,
        StartDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        Target: smithy_client_1.expectString
    });
};
const de_SessionList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_Session(entry, context);
    });
    return retVal;
};
const de_StepExecution = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        Action: smithy_client_1.expectString,
        ExecutionEndTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExecutionStartTime: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        FailureDetails: smithy_client_1._json,
        FailureMessage: smithy_client_1.expectString,
        Inputs: smithy_client_1._json,
        IsCritical: smithy_client_1.expectBoolean,
        IsEnd: smithy_client_1.expectBoolean,
        MaxAttempts: smithy_client_1.expectInt32,
        NextStep: smithy_client_1.expectString,
        OnFailure: smithy_client_1.expectString,
        Outputs: smithy_client_1._json,
        OverriddenParameters: smithy_client_1._json,
        Response: smithy_client_1.expectString,
        ResponseCode: smithy_client_1.expectString,
        StepExecutionId: smithy_client_1.expectString,
        StepName: smithy_client_1.expectString,
        StepStatus: smithy_client_1.expectString,
        TargetLocation: smithy_client_1._json,
        Targets: smithy_client_1._json,
        TimeoutSeconds: smithy_client_1.expectLong,
        TriggeredAlarms: smithy_client_1._json,
        ValidNextSteps: smithy_client_1._json
    });
};
const de_StepExecutionList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        return de_StepExecution(entry, context);
    });
    return retVal;
};
const de_UpdateAssociationResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AssociationDescription: (_)=>de_AssociationDescription(_, context)
    });
};
const de_UpdateAssociationStatusResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AssociationDescription: (_)=>de_AssociationDescription(_, context)
    });
};
const de_UpdateDocumentResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        DocumentDescription: (_)=>de_DocumentDescription(_, context)
    });
};
const de_UpdateMaintenanceWindowTaskResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        CutoffBehavior: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        LoggingInfo: smithy_client_1._json,
        MaxConcurrency: smithy_client_1.expectString,
        MaxErrors: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Priority: smithy_client_1.expectInt32,
        ServiceRoleArn: smithy_client_1.expectString,
        Targets: smithy_client_1._json,
        TaskArn: smithy_client_1.expectString,
        TaskInvocationParameters: (_)=>de_MaintenanceWindowTaskInvocationParameters(_, context),
        TaskParameters: smithy_client_1._json,
        WindowId: smithy_client_1.expectString,
        WindowTaskId: smithy_client_1.expectString
    });
};
const de_UpdatePatchBaselineResult = (output, context)=>{
    return (0, smithy_client_1.take)(output, {
        ApprovalRules: smithy_client_1._json,
        ApprovedPatches: smithy_client_1._json,
        ApprovedPatchesComplianceLevel: smithy_client_1.expectString,
        ApprovedPatchesEnableNonSecurity: smithy_client_1.expectBoolean,
        BaselineId: smithy_client_1.expectString,
        CreatedDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Description: smithy_client_1.expectString,
        GlobalFilters: smithy_client_1._json,
        ModifiedDate: (_)=>(0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        OperatingSystem: smithy_client_1.expectString,
        RejectedPatches: smithy_client_1._json,
        RejectedPatchesAction: smithy_client_1.expectString,
        Sources: smithy_client_1._json
    });
};
const deserializeMetadata = (output)=>({
        httpStatusCode: output.statusCode,
        requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    });
const collectBodyString = (streamBody, context)=>(0, smithy_client_1.collectBody)(streamBody, context).then((body)=>context.utf8Encoder(body));
const throwDefaultError = (0, smithy_client_1.withBaseException)(SSMServiceException_1.SSMServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body)=>{
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AmazonSSM.${operation}`
    };
}
const parseBody = (streamBody, context)=>collectBodyString(streamBody, context).then((encoded)=>{
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
const parseErrorBody = async (errorBody, context)=>{
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data)=>{
    const findKey = (object, key)=>Object.keys(object).find((k)=>k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue)=>{
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};


/***/ }),

/***/ 30762:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getRuntimeConfig = void 0;
const tslib_1 = __webpack_require__(35092);
const package_json_1 = tslib_1.__importDefault(__webpack_require__(98555));
const client_sts_1 = __webpack_require__(37394);
const credential_provider_node_1 = __webpack_require__(62355);
const util_user_agent_node_1 = __webpack_require__(57195);
const config_resolver_1 = __webpack_require__(86620);
const hash_node_1 = __webpack_require__(67474);
const middleware_retry_1 = __webpack_require__(23120);
const node_config_provider_1 = __webpack_require__(42429);
const node_http_handler_1 = __webpack_require__(17292);
const util_body_length_node_1 = __webpack_require__(4677);
const util_retry_1 = __webpack_require__(1761);
const runtimeConfig_shared_1 = __webpack_require__(97627);
const smithy_client_1 = __webpack_require__(69775);
const util_defaults_mode_node_1 = __webpack_require__(95268);
const smithy_client_2 = __webpack_require__(69775);
const getRuntimeConfig = (config)=>{
    (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = ()=>defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
    const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
    return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: package_json_1.default.version
        }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
            ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
            default: async ()=>(await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
    };
};
exports.getRuntimeConfig = getRuntimeConfig;


/***/ }),

/***/ 97627:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getRuntimeConfig = void 0;
const smithy_client_1 = __webpack_require__(69775);
const url_parser_1 = __webpack_require__(63679);
const util_base64_1 = __webpack_require__(45607);
const util_utf8_1 = __webpack_require__(50170);
const endpointResolver_1 = __webpack_require__(99700);
const getRuntimeConfig = (config)=>({
        apiVersion: "2014-11-06",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config?.serviceId ?? "SSM",
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
exports.getRuntimeConfig = getRuntimeConfig;


/***/ }),

/***/ 1493:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(63856), exports);


/***/ }),

/***/ 63856:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.waitUntilCommandExecuted = exports.waitForCommandExecuted = void 0;
const util_waiter_1 = __webpack_require__(2470);
const GetCommandInvocationCommand_1 = __webpack_require__(61897);
const checkState = async (client, input)=>{
    let reason;
    try {
        const result = await client.send(new GetCommandInvocationCommand_1.GetCommandInvocationCommand(input));
        reason = result;
        try {
            const returnComparator = ()=>{
                return result.Status;
            };
            if (returnComparator() === "Pending") {
                return {
                    state: util_waiter_1.WaiterState.RETRY,
                    reason
                };
            }
        } catch (e) {}
        try {
            const returnComparator = ()=>{
                return result.Status;
            };
            if (returnComparator() === "InProgress") {
                return {
                    state: util_waiter_1.WaiterState.RETRY,
                    reason
                };
            }
        } catch (e) {}
        try {
            const returnComparator = ()=>{
                return result.Status;
            };
            if (returnComparator() === "Delayed") {
                return {
                    state: util_waiter_1.WaiterState.RETRY,
                    reason
                };
            }
        } catch (e) {}
        try {
            const returnComparator = ()=>{
                return result.Status;
            };
            if (returnComparator() === "Success") {
                return {
                    state: util_waiter_1.WaiterState.SUCCESS,
                    reason
                };
            }
        } catch (e) {}
        try {
            const returnComparator = ()=>{
                return result.Status;
            };
            if (returnComparator() === "Cancelled") {
                return {
                    state: util_waiter_1.WaiterState.FAILURE,
                    reason
                };
            }
        } catch (e) {}
        try {
            const returnComparator = ()=>{
                return result.Status;
            };
            if (returnComparator() === "TimedOut") {
                return {
                    state: util_waiter_1.WaiterState.FAILURE,
                    reason
                };
            }
        } catch (e) {}
        try {
            const returnComparator = ()=>{
                return result.Status;
            };
            if (returnComparator() === "Failed") {
                return {
                    state: util_waiter_1.WaiterState.FAILURE,
                    reason
                };
            }
        } catch (e) {}
        try {
            const returnComparator = ()=>{
                return result.Status;
            };
            if (returnComparator() === "Cancelling") {
                return {
                    state: util_waiter_1.WaiterState.FAILURE,
                    reason
                };
            }
        } catch (e) {}
    } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvocationDoesNotExist") {
            return {
                state: util_waiter_1.WaiterState.RETRY,
                reason
            };
        }
    }
    return {
        state: util_waiter_1.WaiterState.RETRY,
        reason
    };
};
const waitForCommandExecuted = async (params, input)=>{
    const serviceDefaults = {
        minDelay: 5,
        maxDelay: 120
    };
    return (0, util_waiter_1.createWaiter)({
        ...serviceDefaults,
        ...params
    }, input, checkState);
};
exports.waitForCommandExecuted = waitForCommandExecuted;
const waitUntilCommandExecuted = async (params, input)=>{
    const serviceDefaults = {
        minDelay: 5,
        maxDelay: 120
    };
    const result = await (0, util_waiter_1.createWaiter)({
        ...serviceDefaults,
        ...params
    }, input, checkState);
    return (0, util_waiter_1.checkExceptions)(result);
};
exports.waitUntilCommandExecuted = waitUntilCommandExecuted;


/***/ }),

/***/ 62040:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  NIL: () => (/* reexport */ nil),
  parse: () => (/* reexport */ esm_node_parse),
  stringify: () => (/* reexport */ esm_node_stringify),
  v1: () => (/* reexport */ esm_node_v1),
  v3: () => (/* reexport */ esm_node_v3),
  v4: () => (/* reexport */ esm_node_v4),
  v5: () => (/* reexport */ esm_node_v5),
  validate: () => (/* reexport */ esm_node_validate),
  version: () => (/* reexport */ esm_node_version)
});

// EXTERNAL MODULE: external "crypto"
var external_crypto_ = __webpack_require__(6113);
var external_crypto_default = /*#__PURE__*/__webpack_require__.n(external_crypto_);
;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-ssm/node_modules/uuid/dist/esm-node/rng.js

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate
let poolPtr = rnds8Pool.length;
function rng() {
    if (poolPtr > rnds8Pool.length - 16) {
        external_crypto_default().randomFillSync(rnds8Pool);
        poolPtr = 0;
    }
    return rnds8Pool.slice(poolPtr, poolPtr += 16);
}

;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-ssm/node_modules/uuid/dist/esm-node/regex.js
/* harmony default export */ const regex = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);

;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-ssm/node_modules/uuid/dist/esm-node/validate.js

function validate(uuid) {
    return typeof uuid === "string" && regex.test(uuid);
}
/* harmony default export */ const esm_node_validate = (validate);

;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-ssm/node_modules/uuid/dist/esm-node/stringify.js

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */ const byteToHex = [];
for(let i = 0; i < 256; ++i){
    byteToHex.push((i + 0x100).toString(16).substr(1));
}
function stringify(arr, offset = 0) {
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields
    if (!esm_node_validate(uuid)) {
        throw TypeError("Stringified UUID is invalid");
    }
    return uuid;
}
/* harmony default export */ const esm_node_stringify = (stringify);

;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-ssm/node_modules/uuid/dist/esm-node/v1.js

 // **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;
let _clockseq; // Previous uuid creation time
let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details
function v1(options, buf, offset) {
    let i = buf && offset || 0;
    const b = buf || new Array(16);
    options = options || {};
    let node = options.node || _nodeId;
    let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
    // specified.  We do this lazily to minimize issues related to insufficient
    // system entropy.  See #189
    if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || rng)();
        if (node == null) {
            // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
            node = _nodeId = [
                seedBytes[0] | 0x01,
                seedBytes[1],
                seedBytes[2],
                seedBytes[3],
                seedBytes[4],
                seedBytes[5]
            ];
        }
        if (clockseq == null) {
            // Per 4.2.2, randomize (14 bit) clockseq
            clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
        }
    } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)
    const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq === undefined) {
        clockseq = clockseq + 1 & 0x3fff;
    } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
        nsecs = 0;
    } // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    }
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000; // `time_low`
    const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff; // `time_mid`
    const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff; // `time_high_and_version`
    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
    b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`
    b[i++] = clockseq & 0xff; // `node`
    for(let n = 0; n < 6; ++n){
        b[i + n] = node[n];
    }
    return buf || esm_node_stringify(b);
}
/* harmony default export */ const esm_node_v1 = (v1);

;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-ssm/node_modules/uuid/dist/esm-node/parse.js

function parse(uuid) {
    if (!esm_node_validate(uuid)) {
        throw TypeError("Invalid UUID");
    }
    let v;
    const arr = new Uint8Array(16); // Parse ########-....-....-....-............
    arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
    arr[1] = v >>> 16 & 0xff;
    arr[2] = v >>> 8 & 0xff;
    arr[3] = v & 0xff; // Parse ........-####-....-....-............
    arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
    arr[5] = v & 0xff; // Parse ........-....-####-....-............
    arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
    arr[7] = v & 0xff; // Parse ........-....-....-####-............
    arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
    arr[9] = v & 0xff; // Parse ........-....-....-....-############
    // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)
    arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
    arr[11] = v / 0x100000000 & 0xff;
    arr[12] = v >>> 24 & 0xff;
    arr[13] = v >>> 16 & 0xff;
    arr[14] = v >>> 8 & 0xff;
    arr[15] = v & 0xff;
    return arr;
}
/* harmony default export */ const esm_node_parse = (parse);

;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-ssm/node_modules/uuid/dist/esm-node/v35.js


function stringToBytes(str) {
    str = unescape(encodeURIComponent(str)); // UTF8 escape
    const bytes = [];
    for(let i = 0; i < str.length; ++i){
        bytes.push(str.charCodeAt(i));
    }
    return bytes;
}
const DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
const URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
/* harmony default export */ function v35(name, version, hashfunc) {
    function generateUUID(value, namespace, buf, offset) {
        if (typeof value === "string") {
            value = stringToBytes(value);
        }
        if (typeof namespace === "string") {
            namespace = esm_node_parse(namespace);
        }
        if (namespace.length !== 16) {
            throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
        } // Compute hash of namespace and value, Per 4.3
        // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
        // hashfunc([...namespace, ... value])`
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 0x0f | version;
        bytes[8] = bytes[8] & 0x3f | 0x80;
        if (buf) {
            offset = offset || 0;
            for(let i = 0; i < 16; ++i){
                buf[offset + i] = bytes[i];
            }
            return buf;
        }
        return esm_node_stringify(bytes);
    } // Function#name is not settable on some platforms (#270)
    try {
        generateUUID.name = name; // eslint-disable-next-line no-empty
    } catch (err) {} // For CommonJS default export support
    generateUUID.DNS = DNS;
    generateUUID.URL = URL;
    return generateUUID;
}

;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-ssm/node_modules/uuid/dist/esm-node/md5.js

function md5(bytes) {
    if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
    } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
    }
    return external_crypto_default().createHash("md5").update(bytes).digest();
}
/* harmony default export */ const esm_node_md5 = (md5);

;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-ssm/node_modules/uuid/dist/esm-node/v3.js


const v3 = v35("v3", 0x30, esm_node_md5);
/* harmony default export */ const esm_node_v3 = (v3);

;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-ssm/node_modules/uuid/dist/esm-node/v4.js


function v4(options, buf, offset) {
    options = options || {};
    const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided
    if (buf) {
        offset = offset || 0;
        for(let i = 0; i < 16; ++i){
            buf[offset + i] = rnds[i];
        }
        return buf;
    }
    return esm_node_stringify(rnds);
}
/* harmony default export */ const esm_node_v4 = (v4);

;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-ssm/node_modules/uuid/dist/esm-node/sha1.js

function sha1(bytes) {
    if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
    } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
    }
    return external_crypto_default().createHash("sha1").update(bytes).digest();
}
/* harmony default export */ const esm_node_sha1 = (sha1);

;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-ssm/node_modules/uuid/dist/esm-node/v5.js


const v5 = v35("v5", 0x50, esm_node_sha1);
/* harmony default export */ const esm_node_v5 = (v5);

;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-ssm/node_modules/uuid/dist/esm-node/nil.js
/* harmony default export */ const nil = ("00000000-0000-0000-0000-000000000000");

;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-ssm/node_modules/uuid/dist/esm-node/version.js

function version(uuid) {
    if (!esm_node_validate(uuid)) {
        throw TypeError("Invalid UUID");
    }
    return parseInt(uuid.substr(14, 1), 16);
}
/* harmony default export */ const esm_node_version = (version);

;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-ssm/node_modules/uuid/dist/esm-node/index.js











/***/ }),

/***/ 10225:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SSOOIDC = void 0;
const smithy_client_1 = __webpack_require__(69775);
const CreateTokenCommand_1 = __webpack_require__(16516);
const RegisterClientCommand_1 = __webpack_require__(33382);
const StartDeviceAuthorizationCommand_1 = __webpack_require__(27995);
const SSOOIDCClient_1 = __webpack_require__(18693);
const commands = {
    CreateTokenCommand: CreateTokenCommand_1.CreateTokenCommand,
    RegisterClientCommand: RegisterClientCommand_1.RegisterClientCommand,
    StartDeviceAuthorizationCommand: StartDeviceAuthorizationCommand_1.StartDeviceAuthorizationCommand
};
class SSOOIDC extends SSOOIDCClient_1.SSOOIDCClient {
}
exports.SSOOIDC = SSOOIDC;
(0, smithy_client_1.createAggregatedClient)(commands, SSOOIDC);


/***/ }),

/***/ 18693:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SSOOIDCClient = exports.__Client = void 0;
const middleware_host_header_1 = __webpack_require__(66906);
const middleware_logger_1 = __webpack_require__(75202);
const middleware_recursion_detection_1 = __webpack_require__(71592);
const middleware_user_agent_1 = __webpack_require__(85082);
const config_resolver_1 = __webpack_require__(86620);
const middleware_content_length_1 = __webpack_require__(44732);
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_retry_1 = __webpack_require__(23120);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "__Client", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Client;
    }
}));
const EndpointParameters_1 = __webpack_require__(30037);
const runtimeConfig_1 = __webpack_require__(27293);
class SSOOIDCClient extends smithy_client_1.Client {
    constructor(configuration){
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
    }
    destroy() {
        super.destroy();
    }
}
exports.SSOOIDCClient = SSOOIDCClient;


/***/ }),

/***/ 16516:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.CreateTokenCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_restJson1_1 = __webpack_require__(15149);
class CreateTokenCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateTokenCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "CreateTokenCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateTokenCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateTokenCommand)(output, context);
    }
}
exports.CreateTokenCommand = CreateTokenCommand;


/***/ }),

/***/ 33382:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.RegisterClientCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_restJson1_1 = __webpack_require__(15149);
class RegisterClientCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterClientCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "RegisterClientCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_restJson1_1.se_RegisterClientCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_restJson1_1.de_RegisterClientCommand)(output, context);
    }
}
exports.RegisterClientCommand = RegisterClientCommand;


/***/ }),

/***/ 27995:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.StartDeviceAuthorizationCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_restJson1_1 = __webpack_require__(15149);
class StartDeviceAuthorizationCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StartDeviceAuthorizationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "StartDeviceAuthorizationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_restJson1_1.se_StartDeviceAuthorizationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_restJson1_1.de_StartDeviceAuthorizationCommand)(output, context);
    }
}
exports.StartDeviceAuthorizationCommand = StartDeviceAuthorizationCommand;


/***/ }),

/***/ 98671:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(16516), exports);
tslib_1.__exportStar(__webpack_require__(33382), exports);
tslib_1.__exportStar(__webpack_require__(27995), exports);


/***/ }),

/***/ 30037:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveClientEndpointParameters = void 0;
const resolveClientEndpointParameters = (options)=>{
    return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssooidc"
    };
};
exports.resolveClientEndpointParameters = resolveClientEndpointParameters;


/***/ }),

/***/ 34168:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.defaultEndpointResolver = void 0;
const util_endpoints_1 = __webpack_require__(43347);
const ruleset_1 = __webpack_require__(72833);
const defaultEndpointResolver = (endpointParams, context = {})=>{
    return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams: endpointParams,
        logger: context.logger
    });
};
exports.defaultEndpointResolver = defaultEndpointResolver;


/***/ }),

/***/ 72833:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ruleSet = void 0;
const p = "required", q = "fn", r = "argv", s = "ref";
const a = "PartitionResult", b = "tree", c = "error", d = "endpoint", e = {
    [p]: false,
    "type": "String"
}, f = {
    [p]: true,
    "default": false,
    "type": "Boolean"
}, g = {
    [s]: "Endpoint"
}, h = {
    [q]: "booleanEquals",
    [r]: [
        {
            [s]: "UseFIPS"
        },
        true
    ]
}, i = {
    [q]: "booleanEquals",
    [r]: [
        {
            [s]: "UseDualStack"
        },
        true
    ]
}, j = {}, k = {
    [q]: "booleanEquals",
    [r]: [
        true,
        {
            [q]: "getAttr",
            [r]: [
                {
                    [s]: a
                },
                "supportsFIPS"
            ]
        }
    ]
}, l = {
    [q]: "booleanEquals",
    [r]: [
        true,
        {
            [q]: "getAttr",
            [r]: [
                {
                    [s]: a
                },
                "supportsDualStack"
            ]
        }
    ]
}, m = [
    g
], n = [
    h
], o = [
    i
];
const _data = {
    version: "1.0",
    parameters: {
        Region: e,
        UseDualStack: f,
        UseFIPS: f,
        Endpoint: e
    },
    rules: [
        {
            conditions: [
                {
                    [q]: "aws.partition",
                    [r]: [
                        {
                            [s]: "Region"
                        }
                    ],
                    assign: a
                }
            ],
            type: b,
            rules: [
                {
                    conditions: [
                        {
                            [q]: "isSet",
                            [r]: m
                        },
                        {
                            [q]: "parseURL",
                            [r]: m,
                            assign: "url"
                        }
                    ],
                    type: b,
                    rules: [
                        {
                            conditions: n,
                            error: "Invalid Configuration: FIPS and custom endpoint are not supported",
                            type: c
                        },
                        {
                            type: b,
                            rules: [
                                {
                                    conditions: o,
                                    error: "Invalid Configuration: Dualstack and custom endpoint are not supported",
                                    type: c
                                },
                                {
                                    endpoint: {
                                        url: g,
                                        properties: j,
                                        headers: j
                                    },
                                    type: d
                                }
                            ]
                        }
                    ]
                },
                {
                    conditions: [
                        h,
                        i
                    ],
                    type: b,
                    rules: [
                        {
                            conditions: [
                                k,
                                l
                            ],
                            type: b,
                            rules: [
                                {
                                    endpoint: {
                                        url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                        properties: j,
                                        headers: j
                                    },
                                    type: d
                                }
                            ]
                        },
                        {
                            error: "FIPS and DualStack are enabled, but this partition does not support one or both",
                            type: c
                        }
                    ]
                },
                {
                    conditions: n,
                    type: b,
                    rules: [
                        {
                            conditions: [
                                k
                            ],
                            type: b,
                            rules: [
                                {
                                    type: b,
                                    rules: [
                                        {
                                            endpoint: {
                                                url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                properties: j,
                                                headers: j
                                            },
                                            type: d
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            error: "FIPS is enabled but this partition does not support FIPS",
                            type: c
                        }
                    ]
                },
                {
                    conditions: o,
                    type: b,
                    rules: [
                        {
                            conditions: [
                                l
                            ],
                            type: b,
                            rules: [
                                {
                                    endpoint: {
                                        url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                        properties: j,
                                        headers: j
                                    },
                                    type: d
                                }
                            ]
                        },
                        {
                            error: "DualStack is enabled but this partition does not support DualStack",
                            type: c
                        }
                    ]
                },
                {
                    endpoint: {
                        url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}",
                        properties: j,
                        headers: j
                    },
                    type: d
                }
            ]
        }
    ]
};
exports.ruleSet = _data;


/***/ }),

/***/ 77001:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SSOOIDCServiceException = void 0;
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(18693), exports);
tslib_1.__exportStar(__webpack_require__(10225), exports);
tslib_1.__exportStar(__webpack_require__(98671), exports);
tslib_1.__exportStar(__webpack_require__(89149), exports);
var SSOOIDCServiceException_1 = __webpack_require__(2972);
Object.defineProperty(exports, "SSOOIDCServiceException", ({
    enumerable: true,
    get: function() {
        return SSOOIDCServiceException_1.SSOOIDCServiceException;
    }
}));


/***/ }),

/***/ 2972:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SSOOIDCServiceException = exports.__ServiceException = void 0;
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "__ServiceException", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.ServiceException;
    }
}));
class SSOOIDCServiceException extends smithy_client_1.ServiceException {
    constructor(options){
        super(options);
        Object.setPrototypeOf(this, SSOOIDCServiceException.prototype);
    }
}
exports.SSOOIDCServiceException = SSOOIDCServiceException;


/***/ }),

/***/ 89149:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(43559), exports);


/***/ }),

/***/ 43559:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.InvalidClientMetadataException = exports.UnsupportedGrantTypeException = exports.UnauthorizedClientException = exports.SlowDownException = exports.InvalidScopeException = exports.InvalidRequestException = exports.InvalidGrantException = exports.InvalidClientException = exports.InternalServerException = exports.ExpiredTokenException = exports.AuthorizationPendingException = exports.AccessDeniedException = void 0;
const SSOOIDCServiceException_1 = __webpack_require__(2972);
class AccessDeniedException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
}
exports.AccessDeniedException = AccessDeniedException;
class AuthorizationPendingException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "AuthorizationPendingException",
            $fault: "client",
            ...opts
        });
        this.name = "AuthorizationPendingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AuthorizationPendingException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
}
exports.AuthorizationPendingException = AuthorizationPendingException;
class ExpiredTokenException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "ExpiredTokenException",
            $fault: "client",
            ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
}
exports.ExpiredTokenException = ExpiredTokenException;
class InternalServerException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
}
exports.InternalServerException = InternalServerException;
class InvalidClientException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "InvalidClientException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
}
exports.InvalidClientException = InvalidClientException;
class InvalidGrantException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "InvalidGrantException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidGrantException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidGrantException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
}
exports.InvalidGrantException = InvalidGrantException;
class InvalidRequestException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
}
exports.InvalidRequestException = InvalidRequestException;
class InvalidScopeException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "InvalidScopeException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidScopeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidScopeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
}
exports.InvalidScopeException = InvalidScopeException;
class SlowDownException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "SlowDownException",
            $fault: "client",
            ...opts
        });
        this.name = "SlowDownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SlowDownException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
}
exports.SlowDownException = SlowDownException;
class UnauthorizedClientException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "UnauthorizedClientException",
            $fault: "client",
            ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
}
exports.UnauthorizedClientException = UnauthorizedClientException;
class UnsupportedGrantTypeException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "UnsupportedGrantTypeException",
            $fault: "client",
            ...opts
        });
        this.name = "UnsupportedGrantTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedGrantTypeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
}
exports.UnsupportedGrantTypeException = UnsupportedGrantTypeException;
class InvalidClientMetadataException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "InvalidClientMetadataException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidClientMetadataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidClientMetadataException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
}
exports.InvalidClientMetadataException = InvalidClientMetadataException;


/***/ }),

/***/ 15149:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.de_StartDeviceAuthorizationCommand = exports.de_RegisterClientCommand = exports.de_CreateTokenCommand = exports.se_StartDeviceAuthorizationCommand = exports.se_RegisterClientCommand = exports.se_CreateTokenCommand = void 0;
const protocol_http_1 = __webpack_require__(45395);
const smithy_client_1 = __webpack_require__(69775);
const models_0_1 = __webpack_require__(43559);
const SSOOIDCServiceException_1 = __webpack_require__(2972);
const se_CreateTokenCommand = async (input, context)=>{
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json"
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/token";
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        clientId: [],
        clientSecret: [],
        code: [],
        deviceCode: [],
        grantType: [],
        redirectUri: [],
        refreshToken: [],
        scope: (_)=>(0, smithy_client_1._json)(_)
    }));
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
    });
};
exports.se_CreateTokenCommand = se_CreateTokenCommand;
const se_RegisterClientCommand = async (input, context)=>{
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json"
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/client/register";
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        clientName: [],
        clientType: [],
        scopes: (_)=>(0, smithy_client_1._json)(_)
    }));
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
    });
};
exports.se_RegisterClientCommand = se_RegisterClientCommand;
const se_StartDeviceAuthorizationCommand = async (input, context)=>{
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json"
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/device_authorization";
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        clientId: [],
        clientSecret: [],
        startUrl: []
    }));
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
    });
};
exports.se_StartDeviceAuthorizationCommand = se_StartDeviceAuthorizationCommand;
const de_CreateTokenCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateTokenCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        accessToken: smithy_client_1.expectString,
        expiresIn: smithy_client_1.expectInt32,
        idToken: smithy_client_1.expectString,
        refreshToken: smithy_client_1.expectString,
        tokenType: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_CreateTokenCommand = de_CreateTokenCommand;
const de_CreateTokenCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
            throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
            throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
            throw await de_InvalidGrantExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
            throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
            throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
            throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
            throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_RegisterClientCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_RegisterClientCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        authorizationEndpoint: smithy_client_1.expectString,
        clientId: smithy_client_1.expectString,
        clientIdIssuedAt: smithy_client_1.expectLong,
        clientSecret: smithy_client_1.expectString,
        clientSecretExpiresAt: smithy_client_1.expectLong,
        tokenEndpoint: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_RegisterClientCommand = de_RegisterClientCommand;
const de_RegisterClientCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientMetadataException":
        case "com.amazonaws.ssooidc#InvalidClientMetadataException":
            throw await de_InvalidClientMetadataExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
            throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_StartDeviceAuthorizationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_StartDeviceAuthorizationCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        deviceCode: smithy_client_1.expectString,
        expiresIn: smithy_client_1.expectInt32,
        interval: smithy_client_1.expectInt32,
        userCode: smithy_client_1.expectString,
        verificationUri: smithy_client_1.expectString,
        verificationUriComplete: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_StartDeviceAuthorizationCommand = de_StartDeviceAuthorizationCommand;
const de_StartDeviceAuthorizationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
            throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
            throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
            throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const throwDefaultError = (0, smithy_client_1.withBaseException)(SSOOIDCServiceException_1.SSOOIDCServiceException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_AuthorizationPendingExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ExpiredTokenExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_InvalidClientExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_InvalidClientMetadataExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.InvalidClientMetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_InvalidGrantExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_InvalidScopeExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_SlowDownExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_UnauthorizedClientExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_UnsupportedGrantTypeExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeMetadata = (output)=>({
        httpStatusCode: output.statusCode,
        requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    });
const collectBodyString = (streamBody, context)=>(0, smithy_client_1.collectBody)(streamBody, context).then((body)=>context.utf8Encoder(body));
const isSerializableHeaderValue = (value)=>value !== undefined && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context)=>collectBodyString(streamBody, context).then((encoded)=>{
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
const parseErrorBody = async (errorBody, context)=>{
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data)=>{
    const findKey = (object, key)=>Object.keys(object).find((k)=>k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue)=>{
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};


/***/ }),

/***/ 27293:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getRuntimeConfig = void 0;
const tslib_1 = __webpack_require__(35092);
const package_json_1 = tslib_1.__importDefault(__webpack_require__(40037));
const util_user_agent_node_1 = __webpack_require__(57195);
const config_resolver_1 = __webpack_require__(86620);
const hash_node_1 = __webpack_require__(67474);
const middleware_retry_1 = __webpack_require__(23120);
const node_config_provider_1 = __webpack_require__(42429);
const node_http_handler_1 = __webpack_require__(17292);
const util_body_length_node_1 = __webpack_require__(4677);
const util_retry_1 = __webpack_require__(1761);
const runtimeConfig_shared_1 = __webpack_require__(88210);
const smithy_client_1 = __webpack_require__(69775);
const util_defaults_mode_node_1 = __webpack_require__(95268);
const smithy_client_2 = __webpack_require__(69775);
const getRuntimeConfig = (config)=>{
    (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = ()=>defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
    const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
    return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: package_json_1.default.version
        }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
            ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
            default: async ()=>(await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
    };
};
exports.getRuntimeConfig = getRuntimeConfig;


/***/ }),

/***/ 88210:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getRuntimeConfig = void 0;
const smithy_client_1 = __webpack_require__(69775);
const url_parser_1 = __webpack_require__(63679);
const util_base64_1 = __webpack_require__(45607);
const util_utf8_1 = __webpack_require__(50170);
const endpointResolver_1 = __webpack_require__(34168);
const getRuntimeConfig = (config)=>({
        apiVersion: "2019-06-10",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config?.serviceId ?? "SSO OIDC",
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
exports.getRuntimeConfig = getRuntimeConfig;


/***/ }),

/***/ 57294:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SSO = void 0;
const smithy_client_1 = __webpack_require__(69775);
const GetRoleCredentialsCommand_1 = __webpack_require__(57122);
const ListAccountRolesCommand_1 = __webpack_require__(55123);
const ListAccountsCommand_1 = __webpack_require__(67749);
const LogoutCommand_1 = __webpack_require__(77273);
const SSOClient_1 = __webpack_require__(33096);
const commands = {
    GetRoleCredentialsCommand: GetRoleCredentialsCommand_1.GetRoleCredentialsCommand,
    ListAccountRolesCommand: ListAccountRolesCommand_1.ListAccountRolesCommand,
    ListAccountsCommand: ListAccountsCommand_1.ListAccountsCommand,
    LogoutCommand: LogoutCommand_1.LogoutCommand
};
class SSO extends SSOClient_1.SSOClient {
}
exports.SSO = SSO;
(0, smithy_client_1.createAggregatedClient)(commands, SSO);


/***/ }),

/***/ 33096:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SSOClient = exports.__Client = void 0;
const middleware_host_header_1 = __webpack_require__(66906);
const middleware_logger_1 = __webpack_require__(75202);
const middleware_recursion_detection_1 = __webpack_require__(71592);
const middleware_user_agent_1 = __webpack_require__(85082);
const config_resolver_1 = __webpack_require__(86620);
const middleware_content_length_1 = __webpack_require__(44732);
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_retry_1 = __webpack_require__(23120);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "__Client", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Client;
    }
}));
const EndpointParameters_1 = __webpack_require__(96964);
const runtimeConfig_1 = __webpack_require__(65159);
class SSOClient extends smithy_client_1.Client {
    constructor(configuration){
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
    }
    destroy() {
        super.destroy();
    }
}
exports.SSOClient = SSOClient;


/***/ }),

/***/ 57122:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetRoleCredentialsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(46276);
const Aws_restJson1_1 = __webpack_require__(76810);
class GetRoleCredentialsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetRoleCredentialsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "GetRoleCredentialsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetRoleCredentialsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetRoleCredentialsCommand)(output, context);
    }
}
exports.GetRoleCredentialsCommand = GetRoleCredentialsCommand;


/***/ }),

/***/ 55123:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListAccountRolesCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(46276);
const Aws_restJson1_1 = __webpack_require__(76810);
class ListAccountRolesCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAccountRolesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountRolesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_0_1.ListAccountRolesRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAccountRolesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAccountRolesCommand)(output, context);
    }
}
exports.ListAccountRolesCommand = ListAccountRolesCommand;


/***/ }),

/***/ 67749:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ListAccountsCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(46276);
const Aws_restJson1_1 = __webpack_require__(76810);
class ListAccountsCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAccountsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_0_1.ListAccountsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAccountsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAccountsCommand)(output, context);
    }
}
exports.ListAccountsCommand = ListAccountsCommand;


/***/ }),

/***/ 77273:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.LogoutCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(46276);
const Aws_restJson1_1 = __webpack_require__(76810);
class LogoutCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, LogoutCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "LogoutCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_0_1.LogoutRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_restJson1_1.se_LogoutCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_restJson1_1.de_LogoutCommand)(output, context);
    }
}
exports.LogoutCommand = LogoutCommand;


/***/ }),

/***/ 87349:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(57122), exports);
tslib_1.__exportStar(__webpack_require__(55123), exports);
tslib_1.__exportStar(__webpack_require__(67749), exports);
tslib_1.__exportStar(__webpack_require__(77273), exports);


/***/ }),

/***/ 96964:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveClientEndpointParameters = void 0;
const resolveClientEndpointParameters = (options)=>{
    return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
    };
};
exports.resolveClientEndpointParameters = resolveClientEndpointParameters;


/***/ }),

/***/ 51369:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.defaultEndpointResolver = void 0;
const util_endpoints_1 = __webpack_require__(43347);
const ruleset_1 = __webpack_require__(12035);
const defaultEndpointResolver = (endpointParams, context = {})=>{
    return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams: endpointParams,
        logger: context.logger
    });
};
exports.defaultEndpointResolver = defaultEndpointResolver;


/***/ }),

/***/ 12035:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ruleSet = void 0;
const p = "required", q = "fn", r = "argv", s = "ref";
const a = "PartitionResult", b = "tree", c = "error", d = "endpoint", e = {
    [p]: false,
    "type": "String"
}, f = {
    [p]: true,
    "default": false,
    "type": "Boolean"
}, g = {
    [s]: "Endpoint"
}, h = {
    [q]: "booleanEquals",
    [r]: [
        {
            [s]: "UseFIPS"
        },
        true
    ]
}, i = {
    [q]: "booleanEquals",
    [r]: [
        {
            [s]: "UseDualStack"
        },
        true
    ]
}, j = {}, k = {
    [q]: "booleanEquals",
    [r]: [
        true,
        {
            [q]: "getAttr",
            [r]: [
                {
                    [s]: a
                },
                "supportsFIPS"
            ]
        }
    ]
}, l = {
    [q]: "booleanEquals",
    [r]: [
        true,
        {
            [q]: "getAttr",
            [r]: [
                {
                    [s]: a
                },
                "supportsDualStack"
            ]
        }
    ]
}, m = [
    g
], n = [
    h
], o = [
    i
];
const _data = {
    version: "1.0",
    parameters: {
        Region: e,
        UseDualStack: f,
        UseFIPS: f,
        Endpoint: e
    },
    rules: [
        {
            conditions: [
                {
                    [q]: "aws.partition",
                    [r]: [
                        {
                            [s]: "Region"
                        }
                    ],
                    assign: a
                }
            ],
            type: b,
            rules: [
                {
                    conditions: [
                        {
                            [q]: "isSet",
                            [r]: m
                        },
                        {
                            [q]: "parseURL",
                            [r]: m,
                            assign: "url"
                        }
                    ],
                    type: b,
                    rules: [
                        {
                            conditions: n,
                            error: "Invalid Configuration: FIPS and custom endpoint are not supported",
                            type: c
                        },
                        {
                            type: b,
                            rules: [
                                {
                                    conditions: o,
                                    error: "Invalid Configuration: Dualstack and custom endpoint are not supported",
                                    type: c
                                },
                                {
                                    endpoint: {
                                        url: g,
                                        properties: j,
                                        headers: j
                                    },
                                    type: d
                                }
                            ]
                        }
                    ]
                },
                {
                    conditions: [
                        h,
                        i
                    ],
                    type: b,
                    rules: [
                        {
                            conditions: [
                                k,
                                l
                            ],
                            type: b,
                            rules: [
                                {
                                    endpoint: {
                                        url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                        properties: j,
                                        headers: j
                                    },
                                    type: d
                                }
                            ]
                        },
                        {
                            error: "FIPS and DualStack are enabled, but this partition does not support one or both",
                            type: c
                        }
                    ]
                },
                {
                    conditions: n,
                    type: b,
                    rules: [
                        {
                            conditions: [
                                k
                            ],
                            type: b,
                            rules: [
                                {
                                    type: b,
                                    rules: [
                                        {
                                            endpoint: {
                                                url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                properties: j,
                                                headers: j
                                            },
                                            type: d
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            error: "FIPS is enabled but this partition does not support FIPS",
                            type: c
                        }
                    ]
                },
                {
                    conditions: o,
                    type: b,
                    rules: [
                        {
                            conditions: [
                                l
                            ],
                            type: b,
                            rules: [
                                {
                                    endpoint: {
                                        url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                        properties: j,
                                        headers: j
                                    },
                                    type: d
                                }
                            ]
                        },
                        {
                            error: "DualStack is enabled but this partition does not support DualStack",
                            type: c
                        }
                    ]
                },
                {
                    endpoint: {
                        url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}",
                        properties: j,
                        headers: j
                    },
                    type: d
                }
            ]
        }
    ]
};
exports.ruleSet = _data;


/***/ }),

/***/ 74018:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SSOServiceException = void 0;
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(33096), exports);
tslib_1.__exportStar(__webpack_require__(57294), exports);
tslib_1.__exportStar(__webpack_require__(87349), exports);
tslib_1.__exportStar(__webpack_require__(73864), exports);
tslib_1.__exportStar(__webpack_require__(81332), exports);
var SSOServiceException_1 = __webpack_require__(16966);
Object.defineProperty(exports, "SSOServiceException", ({
    enumerable: true,
    get: function() {
        return SSOServiceException_1.SSOServiceException;
    }
}));


/***/ }),

/***/ 16966:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SSOServiceException = exports.__ServiceException = void 0;
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "__ServiceException", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.ServiceException;
    }
}));
class SSOServiceException extends smithy_client_1.ServiceException {
    constructor(options){
        super(options);
        Object.setPrototypeOf(this, SSOServiceException.prototype);
    }
}
exports.SSOServiceException = SSOServiceException;


/***/ }),

/***/ 81332:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(46276), exports);


/***/ }),

/***/ 46276:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.LogoutRequestFilterSensitiveLog = exports.ListAccountsRequestFilterSensitiveLog = exports.ListAccountRolesRequestFilterSensitiveLog = exports.GetRoleCredentialsResponseFilterSensitiveLog = exports.RoleCredentialsFilterSensitiveLog = exports.GetRoleCredentialsRequestFilterSensitiveLog = exports.UnauthorizedException = exports.TooManyRequestsException = exports.ResourceNotFoundException = exports.InvalidRequestException = void 0;
const smithy_client_1 = __webpack_require__(69775);
const SSOServiceException_1 = __webpack_require__(16966);
class InvalidRequestException extends SSOServiceException_1.SSOServiceException {
    constructor(opts){
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
    }
}
exports.InvalidRequestException = InvalidRequestException;
class ResourceNotFoundException extends SSOServiceException_1.SSOServiceException {
    constructor(opts){
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
class TooManyRequestsException extends SSOServiceException_1.SSOServiceException {
    constructor(opts){
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
    }
}
exports.TooManyRequestsException = TooManyRequestsException;
class UnauthorizedException extends SSOServiceException_1.SSOServiceException {
    constructor(opts){
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
    }
}
exports.UnauthorizedException = UnauthorizedException;
const GetRoleCredentialsRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.accessToken && {
            accessToken: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.GetRoleCredentialsRequestFilterSensitiveLog = GetRoleCredentialsRequestFilterSensitiveLog;
const RoleCredentialsFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.secretAccessKey && {
            secretAccessKey: smithy_client_1.SENSITIVE_STRING
        },
        ...obj.sessionToken && {
            sessionToken: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.RoleCredentialsFilterSensitiveLog = RoleCredentialsFilterSensitiveLog;
const GetRoleCredentialsResponseFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.roleCredentials && {
            roleCredentials: (0, exports.RoleCredentialsFilterSensitiveLog)(obj.roleCredentials)
        }
    });
exports.GetRoleCredentialsResponseFilterSensitiveLog = GetRoleCredentialsResponseFilterSensitiveLog;
const ListAccountRolesRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.accessToken && {
            accessToken: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.ListAccountRolesRequestFilterSensitiveLog = ListAccountRolesRequestFilterSensitiveLog;
const ListAccountsRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.accessToken && {
            accessToken: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.ListAccountsRequestFilterSensitiveLog = ListAccountsRequestFilterSensitiveLog;
const LogoutRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.accessToken && {
            accessToken: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.LogoutRequestFilterSensitiveLog = LogoutRequestFilterSensitiveLog;


/***/ }),

/***/ 17569:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 24278:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateListAccountRoles = void 0;
const ListAccountRolesCommand_1 = __webpack_require__(55123);
const SSOClient_1 = __webpack_require__(33096);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);
};
async function* paginateListAccountRoles(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateListAccountRoles = paginateListAccountRoles;


/***/ }),

/***/ 9591:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.paginateListAccounts = void 0;
const ListAccountsCommand_1 = __webpack_require__(67749);
const SSOClient_1 = __webpack_require__(33096);
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
};
async function* paginateListAccounts(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
            throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
exports.paginateListAccounts = paginateListAccounts;


/***/ }),

/***/ 73864:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(17569), exports);
tslib_1.__exportStar(__webpack_require__(24278), exports);
tslib_1.__exportStar(__webpack_require__(9591), exports);


/***/ }),

/***/ 76810:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.de_LogoutCommand = exports.de_ListAccountsCommand = exports.de_ListAccountRolesCommand = exports.de_GetRoleCredentialsCommand = exports.se_LogoutCommand = exports.se_ListAccountsCommand = exports.se_ListAccountRolesCommand = exports.se_GetRoleCredentialsCommand = void 0;
const protocol_http_1 = __webpack_require__(45395);
const smithy_client_1 = __webpack_require__(69775);
const models_0_1 = __webpack_require__(46276);
const SSOServiceException_1 = __webpack_require__(16966);
const se_GetRoleCredentialsCommand = async (input, context)=>{
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
    });
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/federation/credentials";
    const query = (0, smithy_client_1.map)({
        role_name: [
            ,
            (0, smithy_client_1.expectNonNull)(input.roleName, `roleName`)
        ],
        account_id: [
            ,
            (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)
        ]
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
exports.se_GetRoleCredentialsCommand = se_GetRoleCredentialsCommand;
const se_ListAccountRolesCommand = async (input, context)=>{
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
    });
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/assignment/roles";
    const query = (0, smithy_client_1.map)({
        next_token: [
            ,
            input.nextToken
        ],
        max_result: [
            ()=>input.maxResults !== void 0,
            ()=>input.maxResults.toString()
        ],
        account_id: [
            ,
            (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)
        ]
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
exports.se_ListAccountRolesCommand = se_ListAccountRolesCommand;
const se_ListAccountsCommand = async (input, context)=>{
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
    });
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/assignment/accounts";
    const query = (0, smithy_client_1.map)({
        next_token: [
            ,
            input.nextToken
        ],
        max_result: [
            ()=>input.maxResults !== void 0,
            ()=>input.maxResults.toString()
        ]
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
exports.se_ListAccountsCommand = se_ListAccountsCommand;
const se_LogoutCommand = async (input, context)=>{
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
    });
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/logout";
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
    });
};
exports.se_LogoutCommand = se_LogoutCommand;
const de_GetRoleCredentialsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetRoleCredentialsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        roleCredentials: smithy_client_1._json
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_GetRoleCredentialsCommand = de_GetRoleCredentialsCommand;
const de_GetRoleCredentialsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListAccountRolesCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAccountRolesCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        nextToken: smithy_client_1.expectString,
        roleList: smithy_client_1._json
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListAccountRolesCommand = de_ListAccountRolesCommand;
const de_ListAccountRolesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListAccountsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAccountsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        accountList: smithy_client_1._json,
        nextToken: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListAccountsCommand = de_ListAccountsCommand;
const de_ListAccountsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_LogoutCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_LogoutCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_LogoutCommand = de_LogoutCommand;
const de_LogoutCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const throwDefaultError = (0, smithy_client_1.withBaseException)(SSOServiceException_1.SSOServiceException);
const de_InvalidRequestExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeMetadata = (output)=>({
        httpStatusCode: output.statusCode,
        requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    });
const collectBodyString = (streamBody, context)=>(0, smithy_client_1.collectBody)(streamBody, context).then((body)=>context.utf8Encoder(body));
const isSerializableHeaderValue = (value)=>value !== undefined && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context)=>collectBodyString(streamBody, context).then((encoded)=>{
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
const parseErrorBody = async (errorBody, context)=>{
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data)=>{
    const findKey = (object, key)=>Object.keys(object).find((k)=>k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue)=>{
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};


/***/ }),

/***/ 65159:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getRuntimeConfig = void 0;
const tslib_1 = __webpack_require__(35092);
const package_json_1 = tslib_1.__importDefault(__webpack_require__(64365));
const util_user_agent_node_1 = __webpack_require__(57195);
const config_resolver_1 = __webpack_require__(86620);
const hash_node_1 = __webpack_require__(67474);
const middleware_retry_1 = __webpack_require__(23120);
const node_config_provider_1 = __webpack_require__(42429);
const node_http_handler_1 = __webpack_require__(17292);
const util_body_length_node_1 = __webpack_require__(4677);
const util_retry_1 = __webpack_require__(1761);
const runtimeConfig_shared_1 = __webpack_require__(24521);
const smithy_client_1 = __webpack_require__(69775);
const util_defaults_mode_node_1 = __webpack_require__(95268);
const smithy_client_2 = __webpack_require__(69775);
const getRuntimeConfig = (config)=>{
    (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = ()=>defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
    const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
    return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: package_json_1.default.version
        }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
            ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
            default: async ()=>(await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
    };
};
exports.getRuntimeConfig = getRuntimeConfig;


/***/ }),

/***/ 24521:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getRuntimeConfig = void 0;
const smithy_client_1 = __webpack_require__(69775);
const url_parser_1 = __webpack_require__(63679);
const util_base64_1 = __webpack_require__(45607);
const util_utf8_1 = __webpack_require__(50170);
const endpointResolver_1 = __webpack_require__(51369);
const getRuntimeConfig = (config)=>({
        apiVersion: "2019-06-10",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config?.serviceId ?? "SSO",
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
exports.getRuntimeConfig = getRuntimeConfig;


/***/ }),

/***/ 239:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.STS = void 0;
const smithy_client_1 = __webpack_require__(69775);
const AssumeRoleCommand_1 = __webpack_require__(8576);
const AssumeRoleWithSAMLCommand_1 = __webpack_require__(34437);
const AssumeRoleWithWebIdentityCommand_1 = __webpack_require__(61846);
const DecodeAuthorizationMessageCommand_1 = __webpack_require__(95920);
const GetAccessKeyInfoCommand_1 = __webpack_require__(10838);
const GetCallerIdentityCommand_1 = __webpack_require__(92831);
const GetFederationTokenCommand_1 = __webpack_require__(30231);
const GetSessionTokenCommand_1 = __webpack_require__(76109);
const STSClient_1 = __webpack_require__(15391);
const commands = {
    AssumeRoleCommand: AssumeRoleCommand_1.AssumeRoleCommand,
    AssumeRoleWithSAMLCommand: AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand,
    AssumeRoleWithWebIdentityCommand: AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand,
    DecodeAuthorizationMessageCommand: DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand,
    GetAccessKeyInfoCommand: GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand,
    GetCallerIdentityCommand: GetCallerIdentityCommand_1.GetCallerIdentityCommand,
    GetFederationTokenCommand: GetFederationTokenCommand_1.GetFederationTokenCommand,
    GetSessionTokenCommand: GetSessionTokenCommand_1.GetSessionTokenCommand
};
class STS extends STSClient_1.STSClient {
}
exports.STS = STS;
(0, smithy_client_1.createAggregatedClient)(commands, STS);


/***/ }),

/***/ 15391:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.STSClient = exports.__Client = void 0;
const middleware_host_header_1 = __webpack_require__(66906);
const middleware_logger_1 = __webpack_require__(75202);
const middleware_recursion_detection_1 = __webpack_require__(71592);
const middleware_sdk_sts_1 = __webpack_require__(17861);
const middleware_user_agent_1 = __webpack_require__(85082);
const config_resolver_1 = __webpack_require__(86620);
const middleware_content_length_1 = __webpack_require__(44732);
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_retry_1 = __webpack_require__(23120);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "__Client", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Client;
    }
}));
const EndpointParameters_1 = __webpack_require__(37242);
const runtimeConfig_1 = __webpack_require__(71341);
class STSClient extends smithy_client_1.Client {
    constructor(configuration){
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_sdk_sts_1.resolveStsAuthConfig)(_config_5, {
            stsClientCtor: STSClient
        });
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
    }
    destroy() {
        super.destroy();
    }
}
exports.STSClient = STSClient;


/***/ }),

/***/ 8576:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.AssumeRoleCommand = exports.$Command = void 0;
const middleware_signing_1 = __webpack_require__(23898);
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(76955);
const Aws_query_1 = __webpack_require__(72846);
class AssumeRoleCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssumeRoleCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_0_1.AssumeRoleResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleCommand)(output, context);
    }
}
exports.AssumeRoleCommand = AssumeRoleCommand;


/***/ }),

/***/ 34437:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.AssumeRoleWithSAMLCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(76955);
const Aws_query_1 = __webpack_require__(72846);
class AssumeRoleWithSAMLCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssumeRoleWithSAMLCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithSAMLCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLRequestFilterSensitiveLog,
            outputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleWithSAMLCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleWithSAMLCommand)(output, context);
    }
}
exports.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;


/***/ }),

/***/ 61846:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.AssumeRoleWithWebIdentityCommand = exports.$Command = void 0;
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(76955);
const Aws_query_1 = __webpack_require__(72846);
class AssumeRoleWithWebIdentityCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithWebIdentityCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
            outputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleWithWebIdentityCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleWithWebIdentityCommand)(output, context);
    }
}
exports.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;


/***/ }),

/***/ 95920:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DecodeAuthorizationMessageCommand = exports.$Command = void 0;
const middleware_signing_1 = __webpack_require__(23898);
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_query_1 = __webpack_require__(72846);
class DecodeAuthorizationMessageCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DecodeAuthorizationMessageCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "DecodeAuthorizationMessageCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_query_1.se_DecodeAuthorizationMessageCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_query_1.de_DecodeAuthorizationMessageCommand)(output, context);
    }
}
exports.DecodeAuthorizationMessageCommand = DecodeAuthorizationMessageCommand;


/***/ }),

/***/ 10838:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetAccessKeyInfoCommand = exports.$Command = void 0;
const middleware_signing_1 = __webpack_require__(23898);
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_query_1 = __webpack_require__(72846);
class GetAccessKeyInfoCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetAccessKeyInfoCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetAccessKeyInfoCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_query_1.se_GetAccessKeyInfoCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_query_1.de_GetAccessKeyInfoCommand)(output, context);
    }
}
exports.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;


/***/ }),

/***/ 92831:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetCallerIdentityCommand = exports.$Command = void 0;
const middleware_signing_1 = __webpack_require__(23898);
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const Aws_query_1 = __webpack_require__(72846);
class GetCallerIdentityCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetCallerIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetCallerIdentityCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_query_1.se_GetCallerIdentityCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_query_1.de_GetCallerIdentityCommand)(output, context);
    }
}
exports.GetCallerIdentityCommand = GetCallerIdentityCommand;


/***/ }),

/***/ 30231:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetFederationTokenCommand = exports.$Command = void 0;
const middleware_signing_1 = __webpack_require__(23898);
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(76955);
const Aws_query_1 = __webpack_require__(72846);
class GetFederationTokenCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFederationTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetFederationTokenCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_0_1.GetFederationTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_query_1.se_GetFederationTokenCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_query_1.de_GetFederationTokenCommand)(output, context);
    }
}
exports.GetFederationTokenCommand = GetFederationTokenCommand;


/***/ }),

/***/ 76109:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetSessionTokenCommand = exports.$Command = void 0;
const middleware_signing_1 = __webpack_require__(23898);
const middleware_endpoint_1 = __webpack_require__(17663);
const middleware_serde_1 = __webpack_require__(72380);
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "$Command", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.Command;
    }
}));
const models_0_1 = __webpack_require__(76955);
const Aws_query_1 = __webpack_require__(72846);
class GetSessionTokenCommand extends smithy_client_1.Command {
    static getEndpointParameterInstructions() {
        return {
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetSessionTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetSessionTokenCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: models_0_1.GetSessionTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, Aws_query_1.se_GetSessionTokenCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, Aws_query_1.de_GetSessionTokenCommand)(output, context);
    }
}
exports.GetSessionTokenCommand = GetSessionTokenCommand;


/***/ }),

/***/ 6187:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(8576), exports);
tslib_1.__exportStar(__webpack_require__(34437), exports);
tslib_1.__exportStar(__webpack_require__(61846), exports);
tslib_1.__exportStar(__webpack_require__(95920), exports);
tslib_1.__exportStar(__webpack_require__(10838), exports);
tslib_1.__exportStar(__webpack_require__(92831), exports);
tslib_1.__exportStar(__webpack_require__(30231), exports);
tslib_1.__exportStar(__webpack_require__(76109), exports);


/***/ }),

/***/ 70729:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
const defaultStsRoleAssumers_1 = __webpack_require__(18345);
const STSClient_1 = __webpack_require__(15391);
const getCustomizableStsClientCtor = (baseCtor, customizations)=>{
    if (!customizations) return baseCtor;
    else return class CustomizableSTSClient extends baseCtor {
        constructor(config){
            super(config);
            for (const customization of customizations){
                this.middlewareStack.use(customization);
            }
        }
    };
};
const getDefaultRoleAssumer = (stsOptions = {}, stsPlugins)=>(0, defaultStsRoleAssumers_1.getDefaultRoleAssumer)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
const getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins)=>(0, defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
const decorateDefaultCredentialProvider = (provider)=>(input)=>provider({
            roleAssumer: (0, exports.getDefaultRoleAssumer)(input),
            roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input),
            ...input
        });
exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;


/***/ }),

/***/ 18345:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
const AssumeRoleCommand_1 = __webpack_require__(8576);
const AssumeRoleWithWebIdentityCommand_1 = __webpack_require__(61846);
const ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
const decorateDefaultRegion = (region)=>{
    if (typeof region !== "function") {
        return region === undefined ? ASSUME_ROLE_DEFAULT_REGION : region;
    }
    return async ()=>{
        try {
            return await region();
        } catch (e) {
            return ASSUME_ROLE_DEFAULT_REGION;
        }
    };
};
const getDefaultRoleAssumer = (stsOptions, stsClientCtor)=>{
    let stsClient;
    let closureSourceCreds;
    return async (sourceCreds, params)=>{
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
            const { logger, region, requestHandler } = stsOptions;
            stsClient = new stsClientCtor({
                logger,
                credentialDefaultProvider: ()=>async ()=>closureSourceCreds,
                region: decorateDefaultRegion(region || stsOptions.region),
                ...requestHandler ? {
                    requestHandler
                } : {}
            });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
            throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
            accessKeyId: Credentials.AccessKeyId,
            secretAccessKey: Credentials.SecretAccessKey,
            sessionToken: Credentials.SessionToken,
            expiration: Credentials.Expiration
        };
    };
};
exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
const getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor)=>{
    let stsClient;
    return async (params)=>{
        if (!stsClient) {
            const { logger, region, requestHandler } = stsOptions;
            stsClient = new stsClientCtor({
                logger,
                region: decorateDefaultRegion(region || stsOptions.region),
                ...requestHandler ? {
                    requestHandler
                } : {}
            });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
            throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
            accessKeyId: Credentials.AccessKeyId,
            secretAccessKey: Credentials.SecretAccessKey,
            sessionToken: Credentials.SessionToken,
            expiration: Credentials.Expiration
        };
    };
};
exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
const decorateDefaultCredentialProvider = (provider)=>(input)=>provider({
            roleAssumer: (0, exports.getDefaultRoleAssumer)(input, input.stsClientCtor),
            roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor),
            ...input
        });
exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;


/***/ }),

/***/ 37242:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveClientEndpointParameters = void 0;
const resolveClientEndpointParameters = (options)=>{
    return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
    };
};
exports.resolveClientEndpointParameters = resolveClientEndpointParameters;


/***/ }),

/***/ 41346:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.defaultEndpointResolver = void 0;
const util_endpoints_1 = __webpack_require__(43347);
const ruleset_1 = __webpack_require__(43259);
const defaultEndpointResolver = (endpointParams, context = {})=>{
    return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams: endpointParams,
        logger: context.logger
    });
};
exports.defaultEndpointResolver = defaultEndpointResolver;


/***/ }),

/***/ 43259:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ruleSet = void 0;
const F = "required", G = "type", H = "fn", I = "argv", J = "ref";
const a = false, b = true, c = "booleanEquals", d = "tree", e = "stringEquals", f = "sigv4", g = "sts", h = "us-east-1", i = "endpoint", j = "https://sts.{Region}.{PartitionResult#dnsSuffix}", k = "error", l = "getAttr", m = {
    [F]: false,
    [G]: "String"
}, n = {
    [F]: true,
    "default": false,
    [G]: "Boolean"
}, o = {
    [J]: "Endpoint"
}, p = {
    [H]: "isSet",
    [I]: [
        {
            [J]: "Region"
        }
    ]
}, q = {
    [J]: "Region"
}, r = {
    [H]: "aws.partition",
    [I]: [
        q
    ],
    "assign": "PartitionResult"
}, s = {
    [J]: "UseFIPS"
}, t = {
    [J]: "UseDualStack"
}, u = {
    "url": "https://sts.amazonaws.com",
    "properties": {
        "authSchemes": [
            {
                "name": f,
                "signingName": g,
                "signingRegion": h
            }
        ]
    },
    "headers": {}
}, v = {}, w = {
    "conditions": [
        {
            [H]: e,
            [I]: [
                q,
                "aws-global"
            ]
        }
    ],
    [i]: u,
    [G]: i
}, x = {
    [H]: c,
    [I]: [
        s,
        true
    ]
}, y = {
    [H]: c,
    [I]: [
        t,
        true
    ]
}, z = {
    [H]: c,
    [I]: [
        true,
        {
            [H]: l,
            [I]: [
                {
                    [J]: "PartitionResult"
                },
                "supportsFIPS"
            ]
        }
    ]
}, A = {
    [J]: "PartitionResult"
}, B = {
    [H]: c,
    [I]: [
        true,
        {
            [H]: l,
            [I]: [
                A,
                "supportsDualStack"
            ]
        }
    ]
}, C = [
    {
        [H]: "isSet",
        [I]: [
            o
        ]
    }
], D = [
    x
], E = [
    y
];
const _data = {
    version: "1.0",
    parameters: {
        Region: m,
        UseDualStack: n,
        UseFIPS: n,
        Endpoint: m,
        UseGlobalEndpoint: n
    },
    rules: [
        {
            conditions: [
                {
                    [H]: c,
                    [I]: [
                        {
                            [J]: "UseGlobalEndpoint"
                        },
                        b
                    ]
                },
                {
                    [H]: "not",
                    [I]: C
                },
                p,
                r,
                {
                    [H]: c,
                    [I]: [
                        s,
                        a
                    ]
                },
                {
                    [H]: c,
                    [I]: [
                        t,
                        a
                    ]
                }
            ],
            [G]: d,
            rules: [
                {
                    conditions: [
                        {
                            [H]: e,
                            [I]: [
                                q,
                                "ap-northeast-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: i
                },
                {
                    conditions: [
                        {
                            [H]: e,
                            [I]: [
                                q,
                                "ap-south-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: i
                },
                {
                    conditions: [
                        {
                            [H]: e,
                            [I]: [
                                q,
                                "ap-southeast-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: i
                },
                {
                    conditions: [
                        {
                            [H]: e,
                            [I]: [
                                q,
                                "ap-southeast-2"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: i
                },
                w,
                {
                    conditions: [
                        {
                            [H]: e,
                            [I]: [
                                q,
                                "ca-central-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: i
                },
                {
                    conditions: [
                        {
                            [H]: e,
                            [I]: [
                                q,
                                "eu-central-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: i
                },
                {
                    conditions: [
                        {
                            [H]: e,
                            [I]: [
                                q,
                                "eu-north-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: i
                },
                {
                    conditions: [
                        {
                            [H]: e,
                            [I]: [
                                q,
                                "eu-west-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: i
                },
                {
                    conditions: [
                        {
                            [H]: e,
                            [I]: [
                                q,
                                "eu-west-2"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: i
                },
                {
                    conditions: [
                        {
                            [H]: e,
                            [I]: [
                                q,
                                "eu-west-3"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: i
                },
                {
                    conditions: [
                        {
                            [H]: e,
                            [I]: [
                                q,
                                "sa-east-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: i
                },
                {
                    conditions: [
                        {
                            [H]: e,
                            [I]: [
                                q,
                                h
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: i
                },
                {
                    conditions: [
                        {
                            [H]: e,
                            [I]: [
                                q,
                                "us-east-2"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: i
                },
                {
                    conditions: [
                        {
                            [H]: e,
                            [I]: [
                                q,
                                "us-west-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: i
                },
                {
                    conditions: [
                        {
                            [H]: e,
                            [I]: [
                                q,
                                "us-west-2"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: i
                },
                {
                    endpoint: {
                        url: j,
                        properties: {
                            authSchemes: [
                                {
                                    name: f,
                                    signingName: g,
                                    signingRegion: "{Region}"
                                }
                            ]
                        },
                        headers: v
                    },
                    [G]: i
                }
            ]
        },
        {
            conditions: C,
            [G]: d,
            rules: [
                {
                    conditions: D,
                    error: "Invalid Configuration: FIPS and custom endpoint are not supported",
                    [G]: k
                },
                {
                    [G]: d,
                    rules: [
                        {
                            conditions: E,
                            error: "Invalid Configuration: Dualstack and custom endpoint are not supported",
                            [G]: k
                        },
                        {
                            endpoint: {
                                url: o,
                                properties: v,
                                headers: v
                            },
                            [G]: i
                        }
                    ]
                }
            ]
        },
        {
            [G]: d,
            rules: [
                {
                    conditions: [
                        p
                    ],
                    [G]: d,
                    rules: [
                        {
                            conditions: [
                                r
                            ],
                            [G]: d,
                            rules: [
                                {
                                    conditions: [
                                        x,
                                        y
                                    ],
                                    [G]: d,
                                    rules: [
                                        {
                                            conditions: [
                                                z,
                                                B
                                            ],
                                            [G]: d,
                                            rules: [
                                                {
                                                    [G]: d,
                                                    rules: [
                                                        {
                                                            endpoint: {
                                                                url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                                properties: v,
                                                                headers: v
                                                            },
                                                            [G]: i
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            error: "FIPS and DualStack are enabled, but this partition does not support one or both",
                                            [G]: k
                                        }
                                    ]
                                },
                                {
                                    conditions: D,
                                    [G]: d,
                                    rules: [
                                        {
                                            conditions: [
                                                z
                                            ],
                                            [G]: d,
                                            rules: [
                                                {
                                                    [G]: d,
                                                    rules: [
                                                        {
                                                            conditions: [
                                                                {
                                                                    [H]: e,
                                                                    [I]: [
                                                                        "aws-us-gov",
                                                                        {
                                                                            [H]: l,
                                                                            [I]: [
                                                                                A,
                                                                                "name"
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            endpoint: {
                                                                url: "https://sts.{Region}.amazonaws.com",
                                                                properties: v,
                                                                headers: v
                                                            },
                                                            [G]: i
                                                        },
                                                        {
                                                            endpoint: {
                                                                url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                                properties: v,
                                                                headers: v
                                                            },
                                                            [G]: i
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            error: "FIPS is enabled but this partition does not support FIPS",
                                            [G]: k
                                        }
                                    ]
                                },
                                {
                                    conditions: E,
                                    [G]: d,
                                    rules: [
                                        {
                                            conditions: [
                                                B
                                            ],
                                            [G]: d,
                                            rules: [
                                                {
                                                    [G]: d,
                                                    rules: [
                                                        {
                                                            endpoint: {
                                                                url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                                properties: v,
                                                                headers: v
                                                            },
                                                            [G]: i
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            error: "DualStack is enabled but this partition does not support DualStack",
                                            [G]: k
                                        }
                                    ]
                                },
                                {
                                    [G]: d,
                                    rules: [
                                        w,
                                        {
                                            endpoint: {
                                                url: j,
                                                properties: v,
                                                headers: v
                                            },
                                            [G]: i
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    error: "Invalid Configuration: Missing Region",
                    [G]: k
                }
            ]
        }
    ]
};
exports.ruleSet = _data;


/***/ }),

/***/ 37394:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.STSServiceException = void 0;
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(15391), exports);
tslib_1.__exportStar(__webpack_require__(239), exports);
tslib_1.__exportStar(__webpack_require__(6187), exports);
tslib_1.__exportStar(__webpack_require__(6960), exports);
tslib_1.__exportStar(__webpack_require__(70729), exports);
var STSServiceException_1 = __webpack_require__(83689);
Object.defineProperty(exports, "STSServiceException", ({
    enumerable: true,
    get: function() {
        return STSServiceException_1.STSServiceException;
    }
}));


/***/ }),

/***/ 83689:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.STSServiceException = exports.__ServiceException = void 0;
const smithy_client_1 = __webpack_require__(69775);
Object.defineProperty(exports, "__ServiceException", ({
    enumerable: true,
    get: function() {
        return smithy_client_1.ServiceException;
    }
}));
class STSServiceException extends smithy_client_1.ServiceException {
    constructor(options){
        super(options);
        Object.setPrototypeOf(this, STSServiceException.prototype);
    }
}
exports.STSServiceException = STSServiceException;


/***/ }),

/***/ 6960:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(76955), exports);


/***/ }),

/***/ 76955:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.GetSessionTokenResponseFilterSensitiveLog = exports.GetFederationTokenResponseFilterSensitiveLog = exports.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = exports.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = exports.AssumeRoleWithSAMLResponseFilterSensitiveLog = exports.AssumeRoleWithSAMLRequestFilterSensitiveLog = exports.AssumeRoleResponseFilterSensitiveLog = exports.CredentialsFilterSensitiveLog = exports.InvalidAuthorizationMessageException = exports.IDPCommunicationErrorException = exports.InvalidIdentityTokenException = exports.IDPRejectedClaimException = exports.RegionDisabledException = exports.PackedPolicyTooLargeException = exports.MalformedPolicyDocumentException = exports.ExpiredTokenException = void 0;
const smithy_client_1 = __webpack_require__(69775);
const STSServiceException_1 = __webpack_require__(83689);
class ExpiredTokenException extends STSServiceException_1.STSServiceException {
    constructor(opts){
        super({
            name: "ExpiredTokenException",
            $fault: "client",
            ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
    }
}
exports.ExpiredTokenException = ExpiredTokenException;
class MalformedPolicyDocumentException extends STSServiceException_1.STSServiceException {
    constructor(opts){
        super({
            name: "MalformedPolicyDocumentException",
            $fault: "client",
            ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
    }
}
exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
class PackedPolicyTooLargeException extends STSServiceException_1.STSServiceException {
    constructor(opts){
        super({
            name: "PackedPolicyTooLargeException",
            $fault: "client",
            ...opts
        });
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);
    }
}
exports.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
class RegionDisabledException extends STSServiceException_1.STSServiceException {
    constructor(opts){
        super({
            name: "RegionDisabledException",
            $fault: "client",
            ...opts
        });
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RegionDisabledException.prototype);
    }
}
exports.RegionDisabledException = RegionDisabledException;
class IDPRejectedClaimException extends STSServiceException_1.STSServiceException {
    constructor(opts){
        super({
            name: "IDPRejectedClaimException",
            $fault: "client",
            ...opts
        });
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);
    }
}
exports.IDPRejectedClaimException = IDPRejectedClaimException;
class InvalidIdentityTokenException extends STSServiceException_1.STSServiceException {
    constructor(opts){
        super({
            name: "InvalidIdentityTokenException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);
    }
}
exports.InvalidIdentityTokenException = InvalidIdentityTokenException;
class IDPCommunicationErrorException extends STSServiceException_1.STSServiceException {
    constructor(opts){
        super({
            name: "IDPCommunicationErrorException",
            $fault: "client",
            ...opts
        });
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);
    }
}
exports.IDPCommunicationErrorException = IDPCommunicationErrorException;
class InvalidAuthorizationMessageException extends STSServiceException_1.STSServiceException {
    constructor(opts){
        super({
            name: "InvalidAuthorizationMessageException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAuthorizationMessageException.prototype);
    }
}
exports.InvalidAuthorizationMessageException = InvalidAuthorizationMessageException;
const CredentialsFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SecretAccessKey && {
            SecretAccessKey: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.CredentialsFilterSensitiveLog = CredentialsFilterSensitiveLog;
const AssumeRoleResponseFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Credentials && {
            Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials)
        }
    });
exports.AssumeRoleResponseFilterSensitiveLog = AssumeRoleResponseFilterSensitiveLog;
const AssumeRoleWithSAMLRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SAMLAssertion && {
            SAMLAssertion: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.AssumeRoleWithSAMLRequestFilterSensitiveLog = AssumeRoleWithSAMLRequestFilterSensitiveLog;
const AssumeRoleWithSAMLResponseFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Credentials && {
            Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials)
        }
    });
exports.AssumeRoleWithSAMLResponseFilterSensitiveLog = AssumeRoleWithSAMLResponseFilterSensitiveLog;
const AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.WebIdentityToken && {
            WebIdentityToken: smithy_client_1.SENSITIVE_STRING
        }
    });
exports.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = AssumeRoleWithWebIdentityRequestFilterSensitiveLog;
const AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Credentials && {
            Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials)
        }
    });
exports.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = AssumeRoleWithWebIdentityResponseFilterSensitiveLog;
const GetFederationTokenResponseFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Credentials && {
            Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials)
        }
    });
exports.GetFederationTokenResponseFilterSensitiveLog = GetFederationTokenResponseFilterSensitiveLog;
const GetSessionTokenResponseFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Credentials && {
            Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials)
        }
    });
exports.GetSessionTokenResponseFilterSensitiveLog = GetSessionTokenResponseFilterSensitiveLog;


/***/ }),

/***/ 72846:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.de_GetSessionTokenCommand = exports.de_GetFederationTokenCommand = exports.de_GetCallerIdentityCommand = exports.de_GetAccessKeyInfoCommand = exports.de_DecodeAuthorizationMessageCommand = exports.de_AssumeRoleWithWebIdentityCommand = exports.de_AssumeRoleWithSAMLCommand = exports.de_AssumeRoleCommand = exports.se_GetSessionTokenCommand = exports.se_GetFederationTokenCommand = exports.se_GetCallerIdentityCommand = exports.se_GetAccessKeyInfoCommand = exports.se_DecodeAuthorizationMessageCommand = exports.se_AssumeRoleWithWebIdentityCommand = exports.se_AssumeRoleWithSAMLCommand = exports.se_AssumeRoleCommand = void 0;
const protocol_http_1 = __webpack_require__(45395);
const smithy_client_1 = __webpack_require__(69775);
const fast_xml_parser_1 = __webpack_require__(41246);
const models_0_1 = __webpack_require__(76955);
const STSServiceException_1 = __webpack_require__(83689);
const se_AssumeRoleCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssumeRoleRequest(input, context),
        Action: "AssumeRole",
        Version: "2011-06-15"
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AssumeRoleCommand = se_AssumeRoleCommand;
const se_AssumeRoleWithSAMLCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssumeRoleWithSAMLRequest(input, context),
        Action: "AssumeRoleWithSAML",
        Version: "2011-06-15"
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AssumeRoleWithSAMLCommand = se_AssumeRoleWithSAMLCommand;
const se_AssumeRoleWithWebIdentityCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssumeRoleWithWebIdentityRequest(input, context),
        Action: "AssumeRoleWithWebIdentity",
        Version: "2011-06-15"
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AssumeRoleWithWebIdentityCommand = se_AssumeRoleWithWebIdentityCommand;
const se_DecodeAuthorizationMessageCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DecodeAuthorizationMessageRequest(input, context),
        Action: "DecodeAuthorizationMessage",
        Version: "2011-06-15"
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DecodeAuthorizationMessageCommand = se_DecodeAuthorizationMessageCommand;
const se_GetAccessKeyInfoCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetAccessKeyInfoRequest(input, context),
        Action: "GetAccessKeyInfo",
        Version: "2011-06-15"
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAccessKeyInfoCommand = se_GetAccessKeyInfoCommand;
const se_GetCallerIdentityCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetCallerIdentityRequest(input, context),
        Action: "GetCallerIdentity",
        Version: "2011-06-15"
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCallerIdentityCommand = se_GetCallerIdentityCommand;
const se_GetFederationTokenCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetFederationTokenRequest(input, context),
        Action: "GetFederationToken",
        Version: "2011-06-15"
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetFederationTokenCommand = se_GetFederationTokenCommand;
const se_GetSessionTokenCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetSessionTokenRequest(input, context),
        Action: "GetSessionToken",
        Version: "2011-06-15"
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetSessionTokenCommand = se_GetSessionTokenCommand;
const de_AssumeRoleCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_AssumeRoleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_AssumeRoleCommand = de_AssumeRoleCommand;
const de_AssumeRoleCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
            throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
            throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_AssumeRoleWithSAMLCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_AssumeRoleWithSAMLCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_AssumeRoleWithSAMLCommand = de_AssumeRoleWithSAMLCommand;
const de_AssumeRoleWithSAMLCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
            throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
            throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
            throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
            throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_AssumeRoleWithWebIdentityCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_AssumeRoleWithWebIdentityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_AssumeRoleWithWebIdentityCommand = de_AssumeRoleWithWebIdentityCommand;
const de_AssumeRoleWithWebIdentityCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
            throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
            throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
            throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
            throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
            throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_DecodeAuthorizationMessageCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_DecodeAuthorizationMessageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_DecodeAuthorizationMessageCommand = de_DecodeAuthorizationMessageCommand;
const de_DecodeAuthorizationMessageCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
            throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_GetAccessKeyInfoCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetAccessKeyInfoCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetAccessKeyInfoCommand = de_GetAccessKeyInfoCommand;
const de_GetAccessKeyInfoCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
    });
};
const de_GetCallerIdentityCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetCallerIdentityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetCallerIdentityCommand = de_GetCallerIdentityCommand;
const de_GetCallerIdentityCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
    });
};
const de_GetFederationTokenCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetFederationTokenCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetFederationTokenCommand = de_GetFederationTokenCommand;
const de_GetFederationTokenCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
            throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
            throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_GetSessionTokenCommand = async (output, context)=>{
    if (output.statusCode >= 300) {
        return de_GetSessionTokenCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
exports.de_GetSessionTokenCommand = de_GetSessionTokenCommand;
const de_GetSessionTokenCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
            throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_ExpiredTokenExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_ExpiredTokenException(body.Error, context);
    const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_IDPCommunicationErrorExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_IDPCommunicationErrorException(body.Error, context);
    const exception = new models_0_1.IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_IDPRejectedClaimExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_IDPRejectedClaimException(body.Error, context);
    const exception = new models_0_1.IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidAuthorizationMessageExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);
    const exception = new models_0_1.InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidIdentityTokenExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_InvalidIdentityTokenException(body.Error, context);
    const exception = new models_0_1.InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
    const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PackedPolicyTooLargeExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
    const exception = new models_0_1.PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_RegionDisabledExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_RegionDisabledException(body.Error, context);
    const exception = new models_0_1.RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const se_AssumeRoleRequest = (input, context)=>{
    const entries = {};
    if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
    }
    if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
            entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `PolicyArns.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Policy != null) {
        entries["Policy"] = input.Policy;
    }
    if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
    }
    if (input.Tags != null) {
        const memberEntries = se_tagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TransitiveTagKeys != null) {
        const memberEntries = se_tagKeyListType(input.TransitiveTagKeys, context);
        if (input.TransitiveTagKeys?.length === 0) {
            entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `TransitiveTagKeys.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ExternalId != null) {
        entries["ExternalId"] = input.ExternalId;
    }
    if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
    }
    if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
    }
    if (input.SourceIdentity != null) {
        entries["SourceIdentity"] = input.SourceIdentity;
    }
    return entries;
};
const se_AssumeRoleWithSAMLRequest = (input, context)=>{
    const entries = {};
    if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.PrincipalArn != null) {
        entries["PrincipalArn"] = input.PrincipalArn;
    }
    if (input.SAMLAssertion != null) {
        entries["SAMLAssertion"] = input.SAMLAssertion;
    }
    if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
            entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `PolicyArns.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Policy != null) {
        entries["Policy"] = input.Policy;
    }
    if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
    }
    return entries;
};
const se_AssumeRoleWithWebIdentityRequest = (input, context)=>{
    const entries = {};
    if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
    }
    if (input.WebIdentityToken != null) {
        entries["WebIdentityToken"] = input.WebIdentityToken;
    }
    if (input.ProviderId != null) {
        entries["ProviderId"] = input.ProviderId;
    }
    if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
            entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `PolicyArns.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Policy != null) {
        entries["Policy"] = input.Policy;
    }
    if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
    }
    return entries;
};
const se_DecodeAuthorizationMessageRequest = (input, context)=>{
    const entries = {};
    if (input.EncodedMessage != null) {
        entries["EncodedMessage"] = input.EncodedMessage;
    }
    return entries;
};
const se_GetAccessKeyInfoRequest = (input, context)=>{
    const entries = {};
    if (input.AccessKeyId != null) {
        entries["AccessKeyId"] = input.AccessKeyId;
    }
    return entries;
};
const se_GetCallerIdentityRequest = (input, context)=>{
    const entries = {};
    return entries;
};
const se_GetFederationTokenRequest = (input, context)=>{
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Policy != null) {
        entries["Policy"] = input.Policy;
    }
    if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
            entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `PolicyArns.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
    }
    if (input.Tags != null) {
        const memberEntries = se_tagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_GetSessionTokenRequest = (input, context)=>{
    const entries = {};
    if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
    }
    if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
    }
    if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
    }
    return entries;
};
const se_policyDescriptorListType = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) {
            continue;
        }
        const memberEntries = se_PolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PolicyDescriptorType = (input, context)=>{
    const entries = {};
    if (input.arn != null) {
        entries["arn"] = input.arn;
    }
    return entries;
};
const se_Tag = (input, context)=>{
    const entries = {};
    if (input.Key != null) {
        entries["Key"] = input.Key;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const se_tagKeyListType = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_tagListType = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const de_AssumedRoleUser = (output, context)=>{
    const contents = {};
    if (output["AssumedRoleId"] !== undefined) {
        contents.AssumedRoleId = (0, smithy_client_1.expectString)(output["AssumedRoleId"]);
    }
    if (output["Arn"] !== undefined) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
    }
    return contents;
};
const de_AssumeRoleResponse = (output, context)=>{
    const contents = {};
    if (output["Credentials"] !== undefined) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
    }
    if (output["AssumedRoleUser"] !== undefined) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
    }
    if (output["PackedPolicySize"] !== undefined) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
    }
    if (output["SourceIdentity"] !== undefined) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
    }
    return contents;
};
const de_AssumeRoleWithSAMLResponse = (output, context)=>{
    const contents = {};
    if (output["Credentials"] !== undefined) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
    }
    if (output["AssumedRoleUser"] !== undefined) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
    }
    if (output["PackedPolicySize"] !== undefined) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
    }
    if (output["Subject"] !== undefined) {
        contents.Subject = (0, smithy_client_1.expectString)(output["Subject"]);
    }
    if (output["SubjectType"] !== undefined) {
        contents.SubjectType = (0, smithy_client_1.expectString)(output["SubjectType"]);
    }
    if (output["Issuer"] !== undefined) {
        contents.Issuer = (0, smithy_client_1.expectString)(output["Issuer"]);
    }
    if (output["Audience"] !== undefined) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
    }
    if (output["NameQualifier"] !== undefined) {
        contents.NameQualifier = (0, smithy_client_1.expectString)(output["NameQualifier"]);
    }
    if (output["SourceIdentity"] !== undefined) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
    }
    return contents;
};
const de_AssumeRoleWithWebIdentityResponse = (output, context)=>{
    const contents = {};
    if (output["Credentials"] !== undefined) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
    }
    if (output["SubjectFromWebIdentityToken"] !== undefined) {
        contents.SubjectFromWebIdentityToken = (0, smithy_client_1.expectString)(output["SubjectFromWebIdentityToken"]);
    }
    if (output["AssumedRoleUser"] !== undefined) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
    }
    if (output["PackedPolicySize"] !== undefined) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
    }
    if (output["Provider"] !== undefined) {
        contents.Provider = (0, smithy_client_1.expectString)(output["Provider"]);
    }
    if (output["Audience"] !== undefined) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
    }
    if (output["SourceIdentity"] !== undefined) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
    }
    return contents;
};
const de_Credentials = (output, context)=>{
    const contents = {};
    if (output["AccessKeyId"] !== undefined) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(output["AccessKeyId"]);
    }
    if (output["SecretAccessKey"] !== undefined) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(output["SecretAccessKey"]);
    }
    if (output["SessionToken"] !== undefined) {
        contents.SessionToken = (0, smithy_client_1.expectString)(output["SessionToken"]);
    }
    if (output["Expiration"] !== undefined) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Expiration"]));
    }
    return contents;
};
const de_DecodeAuthorizationMessageResponse = (output, context)=>{
    const contents = {};
    if (output["DecodedMessage"] !== undefined) {
        contents.DecodedMessage = (0, smithy_client_1.expectString)(output["DecodedMessage"]);
    }
    return contents;
};
const de_ExpiredTokenException = (output, context)=>{
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_FederatedUser = (output, context)=>{
    const contents = {};
    if (output["FederatedUserId"] !== undefined) {
        contents.FederatedUserId = (0, smithy_client_1.expectString)(output["FederatedUserId"]);
    }
    if (output["Arn"] !== undefined) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
    }
    return contents;
};
const de_GetAccessKeyInfoResponse = (output, context)=>{
    const contents = {};
    if (output["Account"] !== undefined) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
    }
    return contents;
};
const de_GetCallerIdentityResponse = (output, context)=>{
    const contents = {};
    if (output["UserId"] !== undefined) {
        contents.UserId = (0, smithy_client_1.expectString)(output["UserId"]);
    }
    if (output["Account"] !== undefined) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
    }
    if (output["Arn"] !== undefined) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
    }
    return contents;
};
const de_GetFederationTokenResponse = (output, context)=>{
    const contents = {};
    if (output["Credentials"] !== undefined) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
    }
    if (output["FederatedUser"] !== undefined) {
        contents.FederatedUser = de_FederatedUser(output["FederatedUser"], context);
    }
    if (output["PackedPolicySize"] !== undefined) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
    }
    return contents;
};
const de_GetSessionTokenResponse = (output, context)=>{
    const contents = {};
    if (output["Credentials"] !== undefined) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
    }
    return contents;
};
const de_IDPCommunicationErrorException = (output, context)=>{
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_IDPRejectedClaimException = (output, context)=>{
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidAuthorizationMessageException = (output, context)=>{
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidIdentityTokenException = (output, context)=>{
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_MalformedPolicyDocumentException = (output, context)=>{
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_PackedPolicyTooLargeException = (output, context)=>{
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_RegionDisabledException = (output, context)=>{
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeMetadata = (output)=>({
        httpStatusCode: output.statusCode,
        requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    });
const collectBodyString = (streamBody, context)=>(0, smithy_client_1.collectBody)(streamBody, context).then((body)=>context.utf8Encoder(body));
const throwDefaultError = (0, smithy_client_1.withBaseException)(STSServiceException_1.STSServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body)=>{
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
const SHARED_HEADERS = {
    "content-type": "application/x-www-form-urlencoded"
};
const parseBody = (streamBody, context)=>collectBodyString(streamBody, context).then((encoded)=>{
        if (encoded.length) {
            const parser = new fast_xml_parser_1.XMLParser({
                attributeNamePrefix: "",
                htmlEntities: true,
                ignoreAttributes: false,
                ignoreDeclaration: true,
                parseTagValue: false,
                trimValues: false,
                tagValueProcessor: (_, val)=>val.trim() === "" && val.includes("\n") ? "" : undefined
            });
            parser.addEntity("#xD", "\r");
            parser.addEntity("#10", "\n");
            const parsedObj = parser.parse(encoded);
            const textNodeName = "#text";
            const key = Object.keys(parsedObj)[0];
            const parsedObjToReturn = parsedObj[key];
            if (parsedObjToReturn[textNodeName]) {
                parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
                delete parsedObjToReturn[textNodeName];
            }
            return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
        }
        return {};
    });
const parseErrorBody = async (errorBody, context)=>{
    const value = await parseBody(errorBody, context);
    if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
    }
    return value;
};
const buildFormUrlencodedString = (formEntries)=>Object.entries(formEntries).map(([key, value])=>(0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&");
const loadQueryErrorCode = (output, data)=>{
    if (data.Error?.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};


/***/ }),

/***/ 71341:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getRuntimeConfig = void 0;
const tslib_1 = __webpack_require__(35092);
const package_json_1 = tslib_1.__importDefault(__webpack_require__(28425));
const defaultStsRoleAssumers_1 = __webpack_require__(18345);
const credential_provider_node_1 = __webpack_require__(62355);
const util_user_agent_node_1 = __webpack_require__(57195);
const config_resolver_1 = __webpack_require__(86620);
const hash_node_1 = __webpack_require__(67474);
const middleware_retry_1 = __webpack_require__(23120);
const node_config_provider_1 = __webpack_require__(42429);
const node_http_handler_1 = __webpack_require__(17292);
const util_body_length_node_1 = __webpack_require__(4677);
const util_retry_1 = __webpack_require__(1761);
const runtimeConfig_shared_1 = __webpack_require__(54404);
const smithy_client_1 = __webpack_require__(69775);
const util_defaults_mode_node_1 = __webpack_require__(95268);
const smithy_client_2 = __webpack_require__(69775);
const getRuntimeConfig = (config)=>{
    (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = ()=>defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
    const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
    return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: package_json_1.default.version
        }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
            ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
            default: async ()=>(await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
    };
};
exports.getRuntimeConfig = getRuntimeConfig;


/***/ }),

/***/ 54404:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getRuntimeConfig = void 0;
const smithy_client_1 = __webpack_require__(69775);
const url_parser_1 = __webpack_require__(63679);
const util_base64_1 = __webpack_require__(45607);
const util_utf8_1 = __webpack_require__(50170);
const endpointResolver_1 = __webpack_require__(41346);
const getRuntimeConfig = (config)=>({
        apiVersion: "2011-06-15",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config?.serviceId ?? "STS",
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
exports.getRuntimeConfig = getRuntimeConfig;


/***/ }),

/***/ 97782:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromEnv = exports.ENV_EXPIRATION = exports.ENV_SESSION = exports.ENV_SECRET = exports.ENV_KEY = void 0;
const property_provider_1 = __webpack_require__(44357);
exports.ENV_KEY = "AWS_ACCESS_KEY_ID";
exports.ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
exports.ENV_SESSION = "AWS_SESSION_TOKEN";
exports.ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
const fromEnv = ()=>async ()=>{
        const accessKeyId = process.env[exports.ENV_KEY];
        const secretAccessKey = process.env[exports.ENV_SECRET];
        const sessionToken = process.env[exports.ENV_SESSION];
        const expiry = process.env[exports.ENV_EXPIRATION];
        if (accessKeyId && secretAccessKey) {
            return {
                accessKeyId,
                secretAccessKey,
                ...sessionToken && {
                    sessionToken
                },
                ...expiry && {
                    expiration: new Date(expiry)
                }
            };
        }
        throw new property_provider_1.CredentialsProviderError("Unable to find environment variable credentials.");
    };
exports.fromEnv = fromEnv;


/***/ }),

/***/ 95896:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(97782), exports);


/***/ }),

/***/ 59777:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromIni = void 0;
const shared_ini_file_loader_1 = __webpack_require__(28630);
const resolveProfileData_1 = __webpack_require__(39493);
const fromIni = (init = {})=>async ()=>{
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        return (0, resolveProfileData_1.resolveProfileData)((0, shared_ini_file_loader_1.getProfileName)(init), profiles, init);
    };
exports.fromIni = fromIni;


/***/ }),

/***/ 33858:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(59777), exports);


/***/ }),

/***/ 79661:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveAssumeRoleCredentials = exports.isAssumeRoleProfile = void 0;
const property_provider_1 = __webpack_require__(44357);
const shared_ini_file_loader_1 = __webpack_require__(28630);
const resolveCredentialSource_1 = __webpack_require__(584);
const resolveProfileData_1 = __webpack_require__(39493);
const isAssumeRoleProfile = (arg)=>Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && [
        "undefined",
        "string"
    ].indexOf(typeof arg.role_session_name) > -1 && [
        "undefined",
        "string"
    ].indexOf(typeof arg.external_id) > -1 && [
        "undefined",
        "string"
    ].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
exports.isAssumeRoleProfile = isAssumeRoleProfile;
const isAssumeRoleWithSourceProfile = (arg)=>typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
const isAssumeRoleWithProviderProfile = (arg)=>typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
const resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {})=>{
    const data = profiles[profileName];
    if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
    }
    const { source_profile } = data;
    if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` + ` ${(0, shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
    }
    const sourceCredsProvider = source_profile ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, {
        ...visitedProfiles,
        [source_profile]: true
    }) : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName)();
    const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id
    };
    const { mfa_serial } = data;
    if (mfa_serial) {
        if (!options.mfaCodeProvider) {
            throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
    }
    const sourceCreds = await sourceCredsProvider;
    return options.roleAssumer(sourceCreds, params);
};
exports.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;


/***/ }),

/***/ 584:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveCredentialSource = void 0;
const credential_provider_env_1 = __webpack_require__(95896);
const credential_provider_imds_1 = __webpack_require__(30065);
const property_provider_1 = __webpack_require__(44357);
const resolveCredentialSource = (credentialSource, profileName)=>{
    const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv
    };
    if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
    } else {
        throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` + `expected EcsContainer or Ec2InstanceMetadata or Environment.`);
    }
};
exports.resolveCredentialSource = resolveCredentialSource;


/***/ }),

/***/ 64784:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveProcessCredentials = exports.isProcessProfile = void 0;
const credential_provider_process_1 = __webpack_require__(7775);
const isProcessProfile = (arg)=>Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string";
exports.isProcessProfile = isProcessProfile;
const resolveProcessCredentials = async (options, profile)=>(0, credential_provider_process_1.fromProcess)({
        ...options,
        profile
    })();
exports.resolveProcessCredentials = resolveProcessCredentials;


/***/ }),

/***/ 39493:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveProfileData = void 0;
const property_provider_1 = __webpack_require__(44357);
const resolveAssumeRoleCredentials_1 = __webpack_require__(79661);
const resolveProcessCredentials_1 = __webpack_require__(64784);
const resolveSsoCredentials_1 = __webpack_require__(4875);
const resolveStaticCredentials_1 = __webpack_require__(15561);
const resolveWebIdentityCredentials_1 = __webpack_require__(33863);
const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {})=>{
    const data = profiles[profileName];
    if (Object.keys(visitedProfiles).length > 0 && (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
    }
    if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(profileName, profiles, options, visitedProfiles);
    }
    if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
    }
    if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0, resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(data, options);
    }
    if ((0, resolveProcessCredentials_1.isProcessProfile)(data)) {
        return (0, resolveProcessCredentials_1.resolveProcessCredentials)(options, profileName);
    }
    if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
    }
    throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
};
exports.resolveProfileData = resolveProfileData;


/***/ }),

/***/ 4875:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveSsoCredentials = exports.isSsoProfile = void 0;
const credential_provider_sso_1 = __webpack_require__(20188);
var credential_provider_sso_2 = __webpack_require__(20188);
Object.defineProperty(exports, "isSsoProfile", ({
    enumerable: true,
    get: function() {
        return credential_provider_sso_2.isSsoProfile;
    }
}));
const resolveSsoCredentials = (data)=>{
    const { sso_start_url, sso_account_id, sso_session, sso_region, sso_role_name } = (0, credential_provider_sso_1.validateSsoProfile)(data);
    return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoSession: sso_session,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
    })();
};
exports.resolveSsoCredentials = resolveSsoCredentials;


/***/ }),

/***/ 15561:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveStaticCredentials = exports.isStaticCredsProfile = void 0;
const isStaticCredsProfile = (arg)=>Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && [
        "undefined",
        "string"
    ].indexOf(typeof arg.aws_session_token) > -1;
exports.isStaticCredsProfile = isStaticCredsProfile;
const resolveStaticCredentials = (profile)=>Promise.resolve({
        accessKeyId: profile.aws_access_key_id,
        secretAccessKey: profile.aws_secret_access_key,
        sessionToken: profile.aws_session_token
    });
exports.resolveStaticCredentials = resolveStaticCredentials;


/***/ }),

/***/ 33863:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveWebIdentityCredentials = exports.isWebIdentityProfile = void 0;
const credential_provider_web_identity_1 = __webpack_require__(60594);
const isWebIdentityProfile = (arg)=>Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && [
        "undefined",
        "string"
    ].indexOf(typeof arg.role_session_name) > -1;
exports.isWebIdentityProfile = isWebIdentityProfile;
const resolveWebIdentityCredentials = async (profile, options)=>(0, credential_provider_web_identity_1.fromTokenFile)({
        webIdentityTokenFile: profile.web_identity_token_file,
        roleArn: profile.role_arn,
        roleSessionName: profile.role_session_name,
        roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
    })();
exports.resolveWebIdentityCredentials = resolveWebIdentityCredentials;


/***/ }),

/***/ 91400:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.defaultProvider = void 0;
const credential_provider_env_1 = __webpack_require__(95896);
const credential_provider_ini_1 = __webpack_require__(33858);
const credential_provider_process_1 = __webpack_require__(7775);
const credential_provider_sso_1 = __webpack_require__(20188);
const credential_provider_web_identity_1 = __webpack_require__(60594);
const property_provider_1 = __webpack_require__(44357);
const shared_ini_file_loader_1 = __webpack_require__(28630);
const remoteProvider_1 = __webpack_require__(26692);
const defaultProvider = (init = {})=>(0, property_provider_1.memoize)((0, property_provider_1.chain)(...init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE] ? [] : [
        (0, credential_provider_env_1.fromEnv)()
    ], (0, credential_provider_sso_1.fromSSO)(init), (0, credential_provider_ini_1.fromIni)(init), (0, credential_provider_process_1.fromProcess)(init), (0, credential_provider_web_identity_1.fromTokenFile)(init), (0, remoteProvider_1.remoteProvider)(init), async ()=>{
        throw new property_provider_1.CredentialsProviderError("Could not load credentials from any providers", false);
    }), (credentials)=>credentials.expiration !== undefined && credentials.expiration.getTime() - Date.now() < 300000, (credentials)=>credentials.expiration !== undefined);
exports.defaultProvider = defaultProvider;


/***/ }),

/***/ 62355:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(91400), exports);


/***/ }),

/***/ 26692:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.remoteProvider = exports.ENV_IMDS_DISABLED = void 0;
const credential_provider_imds_1 = __webpack_require__(30065);
const property_provider_1 = __webpack_require__(44357);
exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
const remoteProvider = (init)=>{
    if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
    }
    if (process.env[exports.ENV_IMDS_DISABLED]) {
        return async ()=>{
            throw new property_provider_1.CredentialsProviderError("EC2 Instance Metadata Service access disabled");
        };
    }
    return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
};
exports.remoteProvider = remoteProvider;


/***/ }),

/***/ 4344:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromProcess = void 0;
const shared_ini_file_loader_1 = __webpack_require__(28630);
const resolveProcessCredentials_1 = __webpack_require__(78432);
const fromProcess = (init = {})=>async ()=>{
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        return (0, resolveProcessCredentials_1.resolveProcessCredentials)((0, shared_ini_file_loader_1.getProfileName)(init), profiles);
    };
exports.fromProcess = fromProcess;


/***/ }),

/***/ 48667:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getValidatedProcessCredentials = void 0;
const getValidatedProcessCredentials = (profileName, data)=>{
    if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
    }
    if (data.AccessKeyId === undefined || data.SecretAccessKey === undefined) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
    }
    if (data.Expiration) {
        const currentTime = new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
            throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
    }
    return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && {
            sessionToken: data.SessionToken
        },
        ...data.Expiration && {
            expiration: new Date(data.Expiration)
        }
    };
};
exports.getValidatedProcessCredentials = getValidatedProcessCredentials;


/***/ }),

/***/ 7775:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(4344), exports);


/***/ }),

/***/ 78432:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveProcessCredentials = void 0;
const property_provider_1 = __webpack_require__(44357);
const child_process_1 = __webpack_require__(32081);
const util_1 = __webpack_require__(73837);
const getValidatedProcessCredentials_1 = __webpack_require__(48667);
const resolveProcessCredentials = async (profileName, profiles)=>{
    const profile = profiles[profileName];
    if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== undefined) {
            const execPromise = (0, util_1.promisify)(child_process_1.exec);
            try {
                const { stdout } = await execPromise(credentialProcess);
                let data;
                try {
                    data = JSON.parse(stdout.trim());
                } catch (_a) {
                    throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
                }
                return (0, getValidatedProcessCredentials_1.getValidatedProcessCredentials)(profileName, data);
            } catch (error) {
                throw new property_provider_1.CredentialsProviderError(error.message);
            }
        } else {
            throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
        }
    } else {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
    }
};
exports.resolveProcessCredentials = resolveProcessCredentials;


/***/ }),

/***/ 12120:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromSSO = void 0;
const property_provider_1 = __webpack_require__(44357);
const shared_ini_file_loader_1 = __webpack_require__(28630);
const isSsoProfile_1 = __webpack_require__(52371);
const resolveSSOCredentials_1 = __webpack_require__(44145);
const validateSsoProfile_1 = __webpack_require__(86299);
const fromSSO = (init = {})=>async ()=>{
        const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, ssoSession } = init;
        const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
        if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
            const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
            const profile = profiles[profileName];
            if (!profile) {
                throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} was not found.`);
            }
            if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
                throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
            }
            if (profile === null || profile === void 0 ? void 0 : profile.sso_session) {
                const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
                const session = ssoSessions[profile.sso_session];
                const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
                if (ssoRegion && ssoRegion !== session.sso_region) {
                    throw new property_provider_1.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);
                }
                if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
                    throw new property_provider_1.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);
                }
                profile.sso_region = session.sso_region;
                profile.sso_start_url = session.sso_start_url;
            }
            const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = (0, validateSsoProfile_1.validateSsoProfile)(profile);
            return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
                ssoStartUrl: sso_start_url,
                ssoSession: sso_session,
                ssoAccountId: sso_account_id,
                ssoRegion: sso_region,
                ssoRoleName: sso_role_name,
                ssoClient: ssoClient,
                profile: profileName
            });
        } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
            throw new property_provider_1.CredentialsProviderError("Incomplete configuration. The fromSSO() argument hash must include " + '"ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
        } else {
            return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
                ssoStartUrl,
                ssoSession,
                ssoAccountId,
                ssoRegion,
                ssoRoleName,
                ssoClient,
                profile: profileName
            });
        }
    };
exports.fromSSO = fromSSO;


/***/ }),

/***/ 20188:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(12120), exports);
tslib_1.__exportStar(__webpack_require__(52371), exports);
tslib_1.__exportStar(__webpack_require__(27412), exports);
tslib_1.__exportStar(__webpack_require__(86299), exports);


/***/ }),

/***/ 52371:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.isSsoProfile = void 0;
const isSsoProfile = (arg)=>arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
exports.isSsoProfile = isSsoProfile;


/***/ }),

/***/ 44145:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveSSOCredentials = void 0;
const client_sso_1 = __webpack_require__(74018);
const token_providers_1 = __webpack_require__(29225);
const property_provider_1 = __webpack_require__(44357);
const shared_ini_file_loader_1 = __webpack_require__(28630);
const EXPIRE_WINDOW_MS = 15 * 60 * 1000;
const SHOULD_FAIL_CREDENTIAL_CHAIN = false;
const resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, profile })=>{
    let token;
    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
    if (ssoSession) {
        try {
            const _token = await (0, token_providers_1.fromSso)({
                profile
            })();
            token = {
                accessToken: _token.token,
                expiresAt: new Date(_token.expiration).toISOString()
            };
        } catch (e) {
            throw new property_provider_1.CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
    } else {
        try {
            token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);
        } catch (e) {
            throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
    }
    if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
    }
    const { accessToken } = token;
    const sso = ssoClient || new client_sso_1.SSOClient({
        region: ssoRegion
    });
    let ssoResp;
    try {
        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({
            accountId: ssoAccountId,
            roleName: ssoRoleName,
            accessToken
        }));
    } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
    }
    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
    }
    return {
        accessKeyId,
        secretAccessKey,
        sessionToken,
        expiration: new Date(expiration)
    };
};
exports.resolveSSOCredentials = resolveSSOCredentials;


/***/ }),

/***/ 27412:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 86299:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.validateSsoProfile = void 0;
const property_provider_1 = __webpack_require__(44357);
const validateSsoProfile = (profile)=>{
    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", ` + `"sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
    }
    return profile;
};
exports.validateSsoProfile = validateSsoProfile;


/***/ }),

/***/ 26048:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromTokenFile = void 0;
const property_provider_1 = __webpack_require__(44357);
const fs_1 = __webpack_require__(57147);
const fromWebToken_1 = __webpack_require__(8394);
const ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
const ENV_ROLE_ARN = "AWS_ROLE_ARN";
const ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
const fromTokenFile = (init = {})=>async ()=>{
        var _a, _b, _c;
        const webIdentityTokenFile = (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0 ? _a : process.env[ENV_TOKEN_FILE];
        const roleArn = (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0 ? _b : process.env[ENV_ROLE_ARN];
        const roleSessionName = (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0 ? _c : process.env[ENV_ROLE_SESSION_NAME];
        if (!webIdentityTokenFile || !roleArn) {
            throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified");
        }
        return (0, fromWebToken_1.fromWebToken)({
            ...init,
            webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, {
                encoding: "ascii"
            }),
            roleArn,
            roleSessionName
        })();
    };
exports.fromTokenFile = fromTokenFile;


/***/ }),

/***/ 8394:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromWebToken = void 0;
const property_provider_1 = __webpack_require__(44357);
const fromWebToken = (init)=>()=>{
        const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
        if (!roleAssumerWithWebIdentity) {
            throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity,` + ` but no role assumption callback was provided.`, false);
        }
        return roleAssumerWithWebIdentity({
            RoleArn: roleArn,
            RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
            WebIdentityToken: webIdentityToken,
            ProviderId: providerId,
            PolicyArns: policyArns,
            Policy: policy,
            DurationSeconds: durationSeconds
        });
    };
exports.fromWebToken = fromWebToken;


/***/ }),

/***/ 60594:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(26048), exports);
tslib_1.__exportStar(__webpack_require__(8394), exports);


/***/ }),

/***/ 66906:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getHostHeaderPlugin = exports.hostHeaderMiddlewareOptions = exports.hostHeaderMiddleware = exports.resolveHostHeaderConfig = void 0;
const protocol_http_1 = __webpack_require__(45395);
function resolveHostHeaderConfig(input) {
    return input;
}
exports.resolveHostHeaderConfig = resolveHostHeaderConfig;
const hostHeaderMiddleware = (options)=>(next)=>async (args)=>{
            if (!protocol_http_1.HttpRequest.isInstance(args.request)) return next(args);
            const { request } = args;
            const { handlerProtocol = "" } = options.requestHandler.metadata || {};
            if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
                delete request.headers["host"];
                request.headers[":authority"] = "";
            } else if (!request.headers["host"]) {
                let host = request.hostname;
                if (request.port != null) host += `:${request.port}`;
                request.headers["host"] = host;
            }
            return next(args);
        };
exports.hostHeaderMiddleware = hostHeaderMiddleware;
exports.hostHeaderMiddlewareOptions = {
    name: "hostHeaderMiddleware",
    step: "build",
    priority: "low",
    tags: [
        "HOST"
    ],
    override: true
};
const getHostHeaderPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add((0, exports.hostHeaderMiddleware)(options), exports.hostHeaderMiddlewareOptions);
        }
    });
exports.getHostHeaderPlugin = getHostHeaderPlugin;


/***/ }),

/***/ 75202:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(45658), exports);


/***/ }),

/***/ 45658:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getLoggerPlugin = exports.loggerMiddlewareOptions = exports.loggerMiddleware = void 0;
const loggerMiddleware = ()=>(next, context)=>async (args)=>{
            var _a, _b;
            try {
                const response = await next(args);
                const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
                const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
                const inputFilterSensitiveLog = overrideInputFilterSensitiveLog !== null && overrideInputFilterSensitiveLog !== void 0 ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
                const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog !== null && overrideOutputFilterSensitiveLog !== void 0 ? overrideOutputFilterSensitiveLog : context.outputFilterSensitiveLog;
                const { $metadata, ...outputWithoutMetadata } = response.output;
                (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, {
                    clientName,
                    commandName,
                    input: inputFilterSensitiveLog(args.input),
                    output: outputFilterSensitiveLog(outputWithoutMetadata),
                    metadata: $metadata
                });
                return response;
            } catch (error) {
                const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
                const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
                const inputFilterSensitiveLog = overrideInputFilterSensitiveLog !== null && overrideInputFilterSensitiveLog !== void 0 ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
                (_b = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, {
                    clientName,
                    commandName,
                    input: inputFilterSensitiveLog(args.input),
                    error,
                    metadata: error.$metadata
                });
                throw error;
            }
        };
exports.loggerMiddleware = loggerMiddleware;
exports.loggerMiddlewareOptions = {
    name: "loggerMiddleware",
    tags: [
        "LOGGER"
    ],
    step: "initialize",
    override: true
};
const getLoggerPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add((0, exports.loggerMiddleware)(), exports.loggerMiddlewareOptions);
        }
    });
exports.getLoggerPlugin = getLoggerPlugin;


/***/ }),

/***/ 71592:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getRecursionDetectionPlugin = exports.addRecursionDetectionMiddlewareOptions = exports.recursionDetectionMiddleware = void 0;
const protocol_http_1 = __webpack_require__(45395);
const TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
const ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
const ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
const recursionDetectionMiddleware = (options)=>(next)=>async (args)=>{
            const { request } = args;
            if (!protocol_http_1.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
                return next(args);
            }
            const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
            const traceId = process.env[ENV_TRACE_ID];
            const nonEmptyString = (str)=>typeof str === "string" && str.length > 0;
            if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
                request.headers[TRACE_ID_HEADER_NAME] = traceId;
            }
            return next({
                ...args,
                request
            });
        };
exports.recursionDetectionMiddleware = recursionDetectionMiddleware;
exports.addRecursionDetectionMiddlewareOptions = {
    step: "build",
    tags: [
        "RECURSION_DETECTION"
    ],
    name: "recursionDetectionMiddleware",
    override: true,
    priority: "low"
};
const getRecursionDetectionPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add((0, exports.recursionDetectionMiddleware)(options), exports.addRecursionDetectionMiddlewareOptions);
        }
    });
exports.getRecursionDetectionPlugin = getRecursionDetectionPlugin;


/***/ }),

/***/ 17861:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveStsAuthConfig = void 0;
const middleware_signing_1 = __webpack_require__(23898);
const resolveStsAuthConfig = (input, { stsClientCtor })=>(0, middleware_signing_1.resolveAwsAuthConfig)({
        ...input,
        stsClientCtor
    });
exports.resolveStsAuthConfig = resolveStsAuthConfig;


/***/ }),

/***/ 86747:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveSigV4AuthConfig = exports.resolveAwsAuthConfig = void 0;
const property_provider_1 = __webpack_require__(44357);
const signature_v4_1 = __webpack_require__(70279);
const util_middleware_1 = __webpack_require__(49729);
const CREDENTIAL_EXPIRE_WINDOW = 300000;
const resolveAwsAuthConfig = (input)=>{
    const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
    let signer;
    if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
    } else if (input.regionInfoProvider) {
        signer = ()=>(0, util_middleware_1.normalizeProvider)(input.region)().then(async (region)=>[
                    await input.regionInfoProvider(region, {
                        useFipsEndpoint: await input.useFipsEndpoint(),
                        useDualstackEndpoint: await input.useDualstackEndpoint()
                    }) || {},
                    region
                ]).then(([regionInfo, region])=>{
                const { signingRegion, signingService } = regionInfo;
                input.signingRegion = input.signingRegion || signingRegion || region;
                input.signingName = input.signingName || signingService || input.serviceId;
                const params = {
                    ...input,
                    credentials: normalizedCreds,
                    region: input.signingRegion,
                    service: input.signingName,
                    sha256,
                    uriEscapePath: signingEscapePath
                };
                const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
                return new SignerCtor(params);
            });
    } else {
        signer = async (authScheme)=>{
            authScheme = Object.assign({}, {
                name: "sigv4",
                signingName: input.signingName || input.defaultSigningName,
                signingRegion: await (0, util_middleware_1.normalizeProvider)(input.region)(),
                properties: {}
            }, authScheme);
            const signingRegion = authScheme.signingRegion;
            const signingService = authScheme.signingName;
            input.signingRegion = input.signingRegion || signingRegion;
            input.signingName = input.signingName || signingService || input.serviceId;
            const params = {
                ...input,
                credentials: normalizedCreds,
                region: input.signingRegion,
                service: input.signingName,
                sha256,
                uriEscapePath: signingEscapePath
            };
            const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
            return new SignerCtor(params);
        };
    }
    return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
    };
};
exports.resolveAwsAuthConfig = resolveAwsAuthConfig;
const resolveSigV4AuthConfig = (input)=>{
    const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
    let signer;
    if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
    } else {
        signer = (0, util_middleware_1.normalizeProvider)(new signature_v4_1.SignatureV4({
            credentials: normalizedCreds,
            region: input.region,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
        }));
    }
    return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
    };
};
exports.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
const normalizeCredentialProvider = (credentials)=>{
    if (typeof credentials === "function") {
        return (0, property_provider_1.memoize)(credentials, (credentials)=>credentials.expiration !== undefined && credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials)=>credentials.expiration !== undefined);
    }
    return (0, util_middleware_1.normalizeProvider)(credentials);
};


/***/ }),

/***/ 29331:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin = exports.awsAuthMiddlewareOptions = exports.awsAuthMiddleware = void 0;
const protocol_http_1 = __webpack_require__(45395);
const getSkewCorrectedDate_1 = __webpack_require__(41658);
const getUpdatedSystemClockOffset_1 = __webpack_require__(44009);
const awsAuthMiddleware = (options)=>(next, context)=>async function(args) {
            var _a, _b, _c, _d;
            if (!protocol_http_1.HttpRequest.isInstance(args.request)) return next(args);
            const authScheme = (_c = (_b = (_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.authSchemes) === null || _c === void 0 ? void 0 : _c[0];
            const multiRegionOverride = (authScheme === null || authScheme === void 0 ? void 0 : authScheme.name) === "sigv4a" ? (_d = authScheme === null || authScheme === void 0 ? void 0 : authScheme.signingRegionSet) === null || _d === void 0 ? void 0 : _d.join(",") : undefined;
            const signer = await options.signer(authScheme);
            const output = await next({
                ...args,
                request: await signer.sign(args.request, {
                    signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(options.systemClockOffset),
                    signingRegion: multiRegionOverride || context["signing_region"],
                    signingService: context["signing_service"]
                })
            }).catch((error)=>{
                var _a;
                const serverTime = (_a = error.ServerTime) !== null && _a !== void 0 ? _a : getDateHeader(error.$response);
                if (serverTime) {
                    options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
                }
                throw error;
            });
            const dateHeader = getDateHeader(output.response);
            if (dateHeader) {
                options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
            }
            return output;
        };
exports.awsAuthMiddleware = awsAuthMiddleware;
const getDateHeader = (response)=>{
    var _a, _b, _c;
    return protocol_http_1.HttpResponse.isInstance(response) ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0 ? _b : (_c = response.headers) === null || _c === void 0 ? void 0 : _c.Date : undefined;
};
exports.awsAuthMiddlewareOptions = {
    name: "awsAuthMiddleware",
    tags: [
        "SIGNATURE",
        "AWSAUTH"
    ],
    relation: "after",
    toMiddleware: "retryMiddleware",
    override: true
};
const getAwsAuthPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.addRelativeTo((0, exports.awsAuthMiddleware)(options), exports.awsAuthMiddlewareOptions);
        }
    });
exports.getAwsAuthPlugin = getAwsAuthPlugin;
exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin;


/***/ }),

/***/ 23898:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(86747), exports);
tslib_1.__exportStar(__webpack_require__(29331), exports);


/***/ }),

/***/ 41658:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getSkewCorrectedDate = void 0;
const getSkewCorrectedDate = (systemClockOffset)=>new Date(Date.now() + systemClockOffset);
exports.getSkewCorrectedDate = getSkewCorrectedDate;


/***/ }),

/***/ 44009:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getUpdatedSystemClockOffset = void 0;
const isClockSkewed_1 = __webpack_require__(45059);
const getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset)=>{
    const clockTimeInMs = Date.parse(clockTime);
    if ((0, isClockSkewed_1.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
    }
    return currentSystemClockOffset;
};
exports.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;


/***/ }),

/***/ 45059:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.isClockSkewed = void 0;
const getSkewCorrectedDate_1 = __webpack_require__(41658);
const isClockSkewed = (clockTime, systemClockOffset)=>Math.abs((0, getSkewCorrectedDate_1.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 300000;
exports.isClockSkewed = isClockSkewed;


/***/ }),

/***/ 28847:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveUserAgentConfig = void 0;
function resolveUserAgentConfig(input) {
    return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [
            [
                input.customUserAgent
            ]
        ] : input.customUserAgent
    };
}
exports.resolveUserAgentConfig = resolveUserAgentConfig;


/***/ }),

/***/ 79594:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.UA_ESCAPE_CHAR = exports.UA_VALUE_ESCAPE_REGEX = exports.UA_NAME_ESCAPE_REGEX = exports.UA_NAME_SEPARATOR = exports.SPACE = exports.X_AMZ_USER_AGENT = exports.USER_AGENT = void 0;
exports.USER_AGENT = "user-agent";
exports.X_AMZ_USER_AGENT = "x-amz-user-agent";
exports.SPACE = " ";
exports.UA_NAME_SEPARATOR = "/";
exports.UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
exports.UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
exports.UA_ESCAPE_CHAR = "-";


/***/ }),

/***/ 85082:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(28847), exports);
tslib_1.__exportStar(__webpack_require__(76039), exports);


/***/ }),

/***/ 76039:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getUserAgentPlugin = exports.getUserAgentMiddlewareOptions = exports.userAgentMiddleware = void 0;
const util_endpoints_1 = __webpack_require__(43347);
const protocol_http_1 = __webpack_require__(45395);
const constants_1 = __webpack_require__(79594);
const userAgentMiddleware = (options)=>(next, context)=>async (args)=>{
            var _a, _b;
            const { request } = args;
            if (!protocol_http_1.HttpRequest.isInstance(request)) return next(args);
            const { headers } = request;
            const userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
            const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
            const customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
            const prefix = (0, util_endpoints_1.getUserAgentPrefix)();
            const sdkUserAgentValue = (prefix ? [
                prefix
            ] : []).concat([
                ...defaultUserAgent,
                ...userAgent,
                ...customUserAgent
            ]).join(constants_1.SPACE);
            const normalUAValue = [
                ...defaultUserAgent.filter((section)=>section.startsWith("aws-sdk-")),
                ...customUserAgent
            ].join(constants_1.SPACE);
            if (options.runtime !== "browser") {
                if (normalUAValue) {
                    headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT] ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}` : normalUAValue;
                }
                headers[constants_1.USER_AGENT] = sdkUserAgentValue;
            } else {
                headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
            }
            return next({
                ...args,
                request
            });
        };
exports.userAgentMiddleware = userAgentMiddleware;
const escapeUserAgent = (userAgentPair)=>{
    var _a;
    const name = userAgentPair[0].split(constants_1.UA_NAME_SEPARATOR).map((part)=>part.replace(constants_1.UA_NAME_ESCAPE_REGEX, constants_1.UA_ESCAPE_CHAR)).join(constants_1.UA_NAME_SEPARATOR);
    const version = (_a = userAgentPair[1]) === null || _a === void 0 ? void 0 : _a.replace(constants_1.UA_VALUE_ESCAPE_REGEX, constants_1.UA_ESCAPE_CHAR);
    const prefixSeparatorIndex = name.indexOf(constants_1.UA_NAME_SEPARATOR);
    const prefix = name.substring(0, prefixSeparatorIndex);
    let uaName = name.substring(prefixSeparatorIndex + 1);
    if (prefix === "api") {
        uaName = uaName.toLowerCase();
    }
    return [
        prefix,
        uaName,
        version
    ].filter((item)=>item && item.length > 0).reduce((acc, item, index)=>{
        switch(index){
            case 0:
                return item;
            case 1:
                return `${acc}/${item}`;
            default:
                return `${acc}#${item}`;
        }
    }, "");
};
exports.getUserAgentMiddlewareOptions = {
    name: "getUserAgentMiddleware",
    step: "build",
    priority: "low",
    tags: [
        "SET_USER_AGENT",
        "USER_AGENT"
    ],
    override: true
};
const getUserAgentPlugin = (config)=>({
        applyToStack: (clientStack)=>{
            clientStack.add((0, exports.userAgentMiddleware)(config), exports.getUserAgentMiddlewareOptions);
        }
    });
exports.getUserAgentPlugin = getUserAgentPlugin;


/***/ }),

/***/ 3158:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.REFRESH_MESSAGE = exports.EXPIRE_WINDOW_MS = void 0;
exports.EXPIRE_WINDOW_MS = 5 * 60 * 1000;
exports.REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;


/***/ }),

/***/ 54071:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromSso = void 0;
const property_provider_1 = __webpack_require__(44357);
const shared_ini_file_loader_1 = __webpack_require__(28630);
const constants_1 = __webpack_require__(3158);
const getNewSsoOidcToken_1 = __webpack_require__(12307);
const validateTokenExpiry_1 = __webpack_require__(30243);
const validateTokenKey_1 = __webpack_require__(30432);
const writeSSOTokenToFile_1 = __webpack_require__(38179);
const lastRefreshAttemptTime = new Date(0);
const fromSso = (init = {})=>async ()=>{
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
        const profile = profiles[profileName];
        if (!profile) {
            throw new property_provider_1.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
        } else if (!profile["sso_session"]) {
            throw new property_provider_1.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
        }
        const ssoSessionName = profile["sso_session"];
        const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
        const ssoSession = ssoSessions[ssoSessionName];
        if (!ssoSession) {
            throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);
        }
        for (const ssoSessionRequiredKey of [
            "sso_start_url",
            "sso_region"
        ]){
            if (!ssoSession[ssoSessionRequiredKey]) {
                throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);
            }
        }
        const ssoStartUrl = ssoSession["sso_start_url"];
        const ssoRegion = ssoSession["sso_region"];
        let ssoToken;
        try {
            ssoToken = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoSessionName);
        } catch (e) {
            throw new property_provider_1.TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${constants_1.REFRESH_MESSAGE}`, false);
        }
        (0, validateTokenKey_1.validateTokenKey)("accessToken", ssoToken.accessToken);
        (0, validateTokenKey_1.validateTokenKey)("expiresAt", ssoToken.expiresAt);
        const { accessToken, expiresAt } = ssoToken;
        const existingToken = {
            token: accessToken,
            expiration: new Date(expiresAt)
        };
        if (existingToken.expiration.getTime() - Date.now() > constants_1.EXPIRE_WINDOW_MS) {
            return existingToken;
        }
        if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {
            (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
            return existingToken;
        }
        (0, validateTokenKey_1.validateTokenKey)("clientId", ssoToken.clientId, true);
        (0, validateTokenKey_1.validateTokenKey)("clientSecret", ssoToken.clientSecret, true);
        (0, validateTokenKey_1.validateTokenKey)("refreshToken", ssoToken.refreshToken, true);
        try {
            lastRefreshAttemptTime.setTime(Date.now());
            const newSsoOidcToken = await (0, getNewSsoOidcToken_1.getNewSsoOidcToken)(ssoToken, ssoRegion);
            (0, validateTokenKey_1.validateTokenKey)("accessToken", newSsoOidcToken.accessToken);
            (0, validateTokenKey_1.validateTokenKey)("expiresIn", newSsoOidcToken.expiresIn);
            const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);
            try {
                await (0, writeSSOTokenToFile_1.writeSSOTokenToFile)(ssoSessionName, {
                    ...ssoToken,
                    accessToken: newSsoOidcToken.accessToken,
                    expiresAt: newTokenExpiration.toISOString(),
                    refreshToken: newSsoOidcToken.refreshToken
                });
            } catch (error) {}
            return {
                token: newSsoOidcToken.accessToken,
                expiration: newTokenExpiration
            };
        } catch (error) {
            (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
            return existingToken;
        }
    };
exports.fromSso = fromSso;


/***/ }),

/***/ 26794:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromStatic = void 0;
const property_provider_1 = __webpack_require__(44357);
const fromStatic = ({ token })=>async ()=>{
        if (!token || !token.token) {
            throw new property_provider_1.TokenProviderError(`Please pass a valid token to fromStatic`, false);
        }
        return token;
    };
exports.fromStatic = fromStatic;


/***/ }),

/***/ 12307:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getNewSsoOidcToken = void 0;
const client_sso_oidc_1 = __webpack_require__(77001);
const getSsoOidcClient_1 = __webpack_require__(99111);
const getNewSsoOidcToken = (ssoToken, ssoRegion)=>{
    const ssoOidcClient = (0, getSsoOidcClient_1.getSsoOidcClient)(ssoRegion);
    return ssoOidcClient.send(new client_sso_oidc_1.CreateTokenCommand({
        clientId: ssoToken.clientId,
        clientSecret: ssoToken.clientSecret,
        refreshToken: ssoToken.refreshToken,
        grantType: "refresh_token"
    }));
};
exports.getNewSsoOidcToken = getNewSsoOidcToken;


/***/ }),

/***/ 99111:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getSsoOidcClient = void 0;
const client_sso_oidc_1 = __webpack_require__(77001);
const ssoOidcClientsHash = {};
const getSsoOidcClient = (ssoRegion)=>{
    if (ssoOidcClientsHash[ssoRegion]) {
        return ssoOidcClientsHash[ssoRegion];
    }
    const ssoOidcClient = new client_sso_oidc_1.SSOOIDCClient({
        region: ssoRegion
    });
    ssoOidcClientsHash[ssoRegion] = ssoOidcClient;
    return ssoOidcClient;
};
exports.getSsoOidcClient = getSsoOidcClient;


/***/ }),

/***/ 29225:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(54071), exports);
tslib_1.__exportStar(__webpack_require__(26794), exports);
tslib_1.__exportStar(__webpack_require__(12510), exports);


/***/ }),

/***/ 12510:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.nodeProvider = void 0;
const property_provider_1 = __webpack_require__(44357);
const fromSso_1 = __webpack_require__(54071);
const nodeProvider = (init = {})=>(0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromSso_1.fromSso)(init), async ()=>{
        throw new property_provider_1.TokenProviderError("Could not load token from any providers", false);
    }), (token)=>token.expiration !== undefined && token.expiration.getTime() - Date.now() < 300000, (token)=>token.expiration !== undefined);
exports.nodeProvider = nodeProvider;


/***/ }),

/***/ 30243:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.validateTokenExpiry = void 0;
const property_provider_1 = __webpack_require__(44357);
const constants_1 = __webpack_require__(3158);
const validateTokenExpiry = (token)=>{
    if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new property_provider_1.TokenProviderError(`Token is expired. ${constants_1.REFRESH_MESSAGE}`, false);
    }
};
exports.validateTokenExpiry = validateTokenExpiry;


/***/ }),

/***/ 30432:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.validateTokenKey = void 0;
const property_provider_1 = __webpack_require__(44357);
const constants_1 = __webpack_require__(3158);
const validateTokenKey = (key, value, forRefresh = false)=>{
    if (typeof value === "undefined") {
        throw new property_provider_1.TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${constants_1.REFRESH_MESSAGE}`, false);
    }
};
exports.validateTokenKey = validateTokenKey;


/***/ }),

/***/ 38179:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.writeSSOTokenToFile = void 0;
const shared_ini_file_loader_1 = __webpack_require__(28630);
const fs_1 = __webpack_require__(57147);
const { writeFile } = fs_1.promises;
const writeSSOTokenToFile = (id, ssoToken)=>{
    const tokenFilepath = (0, shared_ini_file_loader_1.getSSOTokenFilepath)(id);
    const tokenString = JSON.stringify(ssoToken, null, 2);
    return writeFile(tokenFilepath, tokenString);
};
exports.writeSSOTokenToFile = writeSSOTokenToFile;


/***/ }),

/***/ 66666:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 71209:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.HttpAuthLocation = void 0;
var types_1 = __webpack_require__(29692);
Object.defineProperty(exports, "HttpAuthLocation", ({
    enumerable: true,
    get: function() {
        return types_1.HttpAuthLocation;
    }
}));


/***/ }),

/***/ 7569:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 79346:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 54390:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 51619:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 76412:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 78408:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 17429:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 10300:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.HostAddressType = void 0;
var HostAddressType;
(function(HostAddressType) {
    HostAddressType["AAAA"] = "AAAA";
    HostAddressType["A"] = "A";
})(HostAddressType = exports.HostAddressType || (exports.HostAddressType = {}));


/***/ }),

/***/ 84795:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 97054:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.EndpointURLScheme = void 0;
var types_1 = __webpack_require__(29692);
Object.defineProperty(exports, "EndpointURLScheme", ({
    enumerable: true,
    get: function() {
        return types_1.EndpointURLScheme;
    }
}));


/***/ }),

/***/ 15187:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 95214:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 28122:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 64611:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 60389:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 46149:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 21286:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 22396:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(28122), exports);
tslib_1.__exportStar(__webpack_require__(64611), exports);
tslib_1.__exportStar(__webpack_require__(60389), exports);
tslib_1.__exportStar(__webpack_require__(46149), exports);
tslib_1.__exportStar(__webpack_require__(21286), exports);


/***/ }),

/***/ 65356:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(66666), exports);
tslib_1.__exportStar(__webpack_require__(71209), exports);
tslib_1.__exportStar(__webpack_require__(7569), exports);
tslib_1.__exportStar(__webpack_require__(79346), exports);
tslib_1.__exportStar(__webpack_require__(54390), exports);
tslib_1.__exportStar(__webpack_require__(51619), exports);
tslib_1.__exportStar(__webpack_require__(76412), exports);
tslib_1.__exportStar(__webpack_require__(78408), exports);
tslib_1.__exportStar(__webpack_require__(17429), exports);
tslib_1.__exportStar(__webpack_require__(10300), exports);
tslib_1.__exportStar(__webpack_require__(84795), exports);
tslib_1.__exportStar(__webpack_require__(97054), exports);
tslib_1.__exportStar(__webpack_require__(15187), exports);
tslib_1.__exportStar(__webpack_require__(95214), exports);
tslib_1.__exportStar(__webpack_require__(22396), exports);
tslib_1.__exportStar(__webpack_require__(2180), exports);
tslib_1.__exportStar(__webpack_require__(38294), exports);
tslib_1.__exportStar(__webpack_require__(39340), exports);
tslib_1.__exportStar(__webpack_require__(89804), exports);
tslib_1.__exportStar(__webpack_require__(51883), exports);
tslib_1.__exportStar(__webpack_require__(82060), exports);
tslib_1.__exportStar(__webpack_require__(66369), exports);
tslib_1.__exportStar(__webpack_require__(73041), exports);
tslib_1.__exportStar(__webpack_require__(80438), exports);
tslib_1.__exportStar(__webpack_require__(4301), exports);
tslib_1.__exportStar(__webpack_require__(38210), exports);
tslib_1.__exportStar(__webpack_require__(8223), exports);
tslib_1.__exportStar(__webpack_require__(29420), exports);
tslib_1.__exportStar(__webpack_require__(40414), exports);
tslib_1.__exportStar(__webpack_require__(8795), exports);
tslib_1.__exportStar(__webpack_require__(21035), exports);


/***/ }),

/***/ 2180:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 38294:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 39340:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 89804:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 51883:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 82060:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 66369:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 73041:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 80438:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 4301:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 38210:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 8223:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 29420:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.RequestHandlerProtocol = void 0;
var types_1 = __webpack_require__(29692);
Object.defineProperty(exports, "RequestHandlerProtocol", ({
    enumerable: true,
    get: function() {
        return types_1.RequestHandlerProtocol;
    }
}));


/***/ }),

/***/ 40414:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 8795:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 21035:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 60008:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 61703:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.HttpAuthLocation = void 0;
var HttpAuthLocation;
(function(HttpAuthLocation) {
    HttpAuthLocation["HEADER"] = "header";
    HttpAuthLocation["QUERY"] = "query";
})(HttpAuthLocation = exports.HttpAuthLocation || (exports.HttpAuthLocation = {}));


/***/ }),

/***/ 10410:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 56535:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 37574:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 67513:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 31311:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(67513), exports);
tslib_1.__exportStar(__webpack_require__(25082), exports);
tslib_1.__exportStar(__webpack_require__(74403), exports);


/***/ }),

/***/ 25082:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 74403:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 64659:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 46852:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 41843:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.EndpointURLScheme = void 0;
var EndpointURLScheme;
(function(EndpointURLScheme) {
    EndpointURLScheme["HTTP"] = "http";
    EndpointURLScheme["HTTPS"] = "https";
})(EndpointURLScheme = exports.EndpointURLScheme || (exports.EndpointURLScheme = {}));


/***/ }),

/***/ 48831:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 20624:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 37522:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 73430:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 21055:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(48831), exports);
tslib_1.__exportStar(__webpack_require__(20624), exports);
tslib_1.__exportStar(__webpack_require__(37522), exports);
tslib_1.__exportStar(__webpack_require__(69830), exports);
tslib_1.__exportStar(__webpack_require__(73430), exports);


/***/ }),

/***/ 69830:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 57759:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 39991:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.FieldPosition = void 0;
var FieldPosition;
(function(FieldPosition) {
    FieldPosition[FieldPosition["HEADER"] = 0] = "HEADER";
    FieldPosition[FieldPosition["TRAILER"] = 1] = "TRAILER";
})(FieldPosition = exports.FieldPosition || (exports.FieldPosition = {}));


/***/ }),

/***/ 66905:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 34654:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 15833:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(66905), exports);
tslib_1.__exportStar(__webpack_require__(34654), exports);


/***/ }),

/***/ 29692:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(60008), exports);
tslib_1.__exportStar(__webpack_require__(61703), exports);
tslib_1.__exportStar(__webpack_require__(10410), exports);
tslib_1.__exportStar(__webpack_require__(56535), exports);
tslib_1.__exportStar(__webpack_require__(37574), exports);
tslib_1.__exportStar(__webpack_require__(31311), exports);
tslib_1.__exportStar(__webpack_require__(64659), exports);
tslib_1.__exportStar(__webpack_require__(46852), exports);
tslib_1.__exportStar(__webpack_require__(41843), exports);
tslib_1.__exportStar(__webpack_require__(21055), exports);
tslib_1.__exportStar(__webpack_require__(57759), exports);
tslib_1.__exportStar(__webpack_require__(39991), exports);
tslib_1.__exportStar(__webpack_require__(15833), exports);
tslib_1.__exportStar(__webpack_require__(3000), exports);
tslib_1.__exportStar(__webpack_require__(80629), exports);
tslib_1.__exportStar(__webpack_require__(96906), exports);
tslib_1.__exportStar(__webpack_require__(78576), exports);
tslib_1.__exportStar(__webpack_require__(37065), exports);
tslib_1.__exportStar(__webpack_require__(20027), exports);
tslib_1.__exportStar(__webpack_require__(5360), exports);
tslib_1.__exportStar(__webpack_require__(25349), exports);
tslib_1.__exportStar(__webpack_require__(96533), exports);
tslib_1.__exportStar(__webpack_require__(99717), exports);
tslib_1.__exportStar(__webpack_require__(52740), exports);
tslib_1.__exportStar(__webpack_require__(27707), exports);
tslib_1.__exportStar(__webpack_require__(63672), exports);
tslib_1.__exportStar(__webpack_require__(4523), exports);


/***/ }),

/***/ 3000:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 80629:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 96906:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 78576:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 37065:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 20027:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 5360:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 25349:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 96533:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 99717:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 52740:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.RequestHandlerProtocol = void 0;
var RequestHandlerProtocol;
(function(RequestHandlerProtocol) {
    RequestHandlerProtocol["HTTP_0_9"] = "http/0.9";
    RequestHandlerProtocol["HTTP_1_0"] = "http/1.0";
    RequestHandlerProtocol["TDS_8_0"] = "tds/8.0";
})(RequestHandlerProtocol = exports.RequestHandlerProtocol || (exports.RequestHandlerProtocol = {}));


/***/ }),

/***/ 27707:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 63672:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 4523:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 59563:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.debugId = void 0;
exports.debugId = "endpoints";


/***/ }),

/***/ 23646:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(59563), exports);
tslib_1.__exportStar(__webpack_require__(12673), exports);


/***/ }),

/***/ 12673:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.toDebugString = void 0;
function toDebugString(input) {
    if (typeof input !== "object" || input == null) {
        return input;
    }
    if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
    }
    if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
    }
    return JSON.stringify(input, null, 2);
}
exports.toDebugString = toDebugString;


/***/ }),

/***/ 43347:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(30974), exports);
tslib_1.__exportStar(__webpack_require__(32021), exports);
tslib_1.__exportStar(__webpack_require__(71659), exports);
tslib_1.__exportStar(__webpack_require__(80238), exports);


/***/ }),

/***/ 7682:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(22918), exports);
tslib_1.__exportStar(__webpack_require__(94527), exports);
tslib_1.__exportStar(__webpack_require__(30974), exports);


/***/ }),

/***/ 22918:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.isVirtualHostableS3Bucket = void 0;
const isIpAddress_1 = __webpack_require__(32021);
const isValidHostLabel_1 = __webpack_require__(97948);
const isVirtualHostableS3Bucket = (value, allowSubDomains = false)=>{
    if (allowSubDomains) {
        for (const label of value.split(".")){
            if (!(0, exports.isVirtualHostableS3Bucket)(label)) {
                return false;
            }
        }
        return true;
    }
    if (!(0, isValidHostLabel_1.isValidHostLabel)(value)) {
        return false;
    }
    if (value.length < 3 || value.length > 63) {
        return false;
    }
    if (value !== value.toLowerCase()) {
        return false;
    }
    if ((0, isIpAddress_1.isIpAddress)(value)) {
        return false;
    }
    return true;
};
exports.isVirtualHostableS3Bucket = isVirtualHostableS3Bucket;


/***/ }),

/***/ 94527:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.parseArn = void 0;
const parseArn = (value)=>{
    const segments = value.split(":");
    if (segments.length < 6) return null;
    const [arn, partition, service, region, accountId, ...resourceId] = segments;
    if (arn !== "arn" || partition === "" || service === "" || resourceId[0] === "") return null;
    return {
        partition,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
    };
};
exports.parseArn = parseArn;


/***/ }),

/***/ 30974:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getUserAgentPrefix = exports.useDefaultPartitionInfo = exports.setPartitionInfo = exports.partition = void 0;
const tslib_1 = __webpack_require__(35092);
const partitions_json_1 = tslib_1.__importDefault(__webpack_require__(84996));
let selectedPartitionsInfo = partitions_json_1.default;
let selectedUserAgentPrefix = "";
const partition = (value)=>{
    const { partitions } = selectedPartitionsInfo;
    for (const partition of partitions){
        const { regions, outputs } = partition;
        for (const [region, regionData] of Object.entries(regions)){
            if (region === value) {
                return {
                    ...outputs,
                    ...regionData
                };
            }
        }
    }
    for (const partition of partitions){
        const { regionRegex, outputs } = partition;
        if (new RegExp(regionRegex).test(value)) {
            return {
                ...outputs
            };
        }
    }
    const DEFAULT_PARTITION = partitions.find((partition)=>partition.id === "aws");
    if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex," + " and default partition with id 'aws' doesn't exist.");
    }
    return {
        ...DEFAULT_PARTITION.outputs
    };
};
exports.partition = partition;
const setPartitionInfo = (partitionsInfo, userAgentPrefix = "")=>{
    selectedPartitionsInfo = partitionsInfo;
    selectedUserAgentPrefix = userAgentPrefix;
};
exports.setPartitionInfo = setPartitionInfo;
const useDefaultPartitionInfo = ()=>{
    (0, exports.setPartitionInfo)(partitions_json_1.default, "");
};
exports.useDefaultPartitionInfo = useDefaultPartitionInfo;
const getUserAgentPrefix = ()=>selectedUserAgentPrefix;
exports.getUserAgentPrefix = getUserAgentPrefix;


/***/ }),

/***/ 58093:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.booleanEquals = void 0;
const booleanEquals = (value1, value2)=>value1 === value2;
exports.booleanEquals = booleanEquals;


/***/ }),

/***/ 11466:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getAttr = void 0;
const types_1 = __webpack_require__(80238);
const getAttrPathList_1 = __webpack_require__(22690);
const getAttr = (value, path)=>(0, getAttrPathList_1.getAttrPathList)(path).reduce((acc, index)=>{
        if (typeof acc !== "object") {
            throw new types_1.EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
        } else if (Array.isArray(acc)) {
            return acc[parseInt(index)];
        }
        return acc[index];
    }, value);
exports.getAttr = getAttr;


/***/ }),

/***/ 22690:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getAttrPathList = void 0;
const types_1 = __webpack_require__(80238);
const getAttrPathList = (path)=>{
    const parts = path.split(".");
    const pathList = [];
    for (const part of parts){
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
            if (part.indexOf("]") !== part.length - 1) {
                throw new types_1.EndpointError(`Path: '${path}' does not end with ']'`);
            }
            const arrayIndex = part.slice(squareBracketIndex + 1, -1);
            if (Number.isNaN(parseInt(arrayIndex))) {
                throw new types_1.EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
            }
            if (squareBracketIndex !== 0) {
                pathList.push(part.slice(0, squareBracketIndex));
            }
            pathList.push(arrayIndex);
        } else {
            pathList.push(part);
        }
    }
    return pathList;
};
exports.getAttrPathList = getAttrPathList;


/***/ }),

/***/ 24071:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.aws = void 0;
const tslib_1 = __webpack_require__(35092);
exports.aws = tslib_1.__importStar(__webpack_require__(7682));
tslib_1.__exportStar(__webpack_require__(58093), exports);
tslib_1.__exportStar(__webpack_require__(11466), exports);
tslib_1.__exportStar(__webpack_require__(66330), exports);
tslib_1.__exportStar(__webpack_require__(97948), exports);
tslib_1.__exportStar(__webpack_require__(33261), exports);
tslib_1.__exportStar(__webpack_require__(56088), exports);
tslib_1.__exportStar(__webpack_require__(27770), exports);
tslib_1.__exportStar(__webpack_require__(48675), exports);
tslib_1.__exportStar(__webpack_require__(57536), exports);


/***/ }),

/***/ 32021:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.isIpAddress = void 0;
const IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
const isIpAddress = (value)=>IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]");
exports.isIpAddress = isIpAddress;


/***/ }),

/***/ 66330:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.isSet = void 0;
const isSet = (value)=>value != null;
exports.isSet = isSet;


/***/ }),

/***/ 97948:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.isValidHostLabel = void 0;
const VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
const isValidHostLabel = (value, allowSubDomains = false)=>{
    if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
    }
    const labels = value.split(".");
    for (const label of labels){
        if (!(0, exports.isValidHostLabel)(label)) {
            return false;
        }
    }
    return true;
};
exports.isValidHostLabel = isValidHostLabel;


/***/ }),

/***/ 33261:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.not = void 0;
const not = (value)=>!value;
exports.not = not;


/***/ }),

/***/ 56088:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.parseURL = void 0;
const types_1 = __webpack_require__(65356);
const isIpAddress_1 = __webpack_require__(32021);
const DEFAULT_PORTS = {
    [types_1.EndpointURLScheme.HTTP]: 80,
    [types_1.EndpointURLScheme.HTTPS]: 443
};
const parseURL = (value)=>{
    const whatwgURL = (()=>{
        try {
            if (value instanceof URL) {
                return value;
            }
            if (typeof value === "object" && "hostname" in value) {
                const { hostname, port, protocol = "", path = "", query = {} } = value;
                const url = new URL(`${protocol}//${hostname}${port ? `:${port}` : ""}${path}`);
                url.search = Object.entries(query).map(([k, v])=>`${k}=${v}`).join("&");
                return url;
            }
            return new URL(value);
        } catch (error) {
            return null;
        }
    })();
    if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
    }
    const urlString = whatwgURL.href;
    const { host, hostname, pathname, protocol, search } = whatwgURL;
    if (search) {
        return null;
    }
    const scheme = protocol.slice(0, -1);
    if (!Object.values(types_1.EndpointURLScheme).includes(scheme)) {
        return null;
    }
    const isIp = (0, isIpAddress_1.isIpAddress)(hostname);
    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
    return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
    };
};
exports.parseURL = parseURL;


/***/ }),

/***/ 27770:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.stringEquals = void 0;
const stringEquals = (value1, value2)=>value1 === value2;
exports.stringEquals = stringEquals;


/***/ }),

/***/ 48675:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.substring = void 0;
const substring = (input, start, stop, reverse)=>{
    if (start >= stop || input.length < stop) {
        return null;
    }
    if (!reverse) {
        return input.substring(start, stop);
    }
    return input.substring(input.length - stop, input.length - start);
};
exports.substring = substring;


/***/ }),

/***/ 57536:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.uriEncode = void 0;
const uriEncode = (value)=>encodeURIComponent(value).replace(/[!*'()]/g, (c)=>`%${c.charCodeAt(0).toString(16).toUpperCase()}`);
exports.uriEncode = uriEncode;


/***/ }),

/***/ 71659:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveEndpoint = void 0;
const debug_1 = __webpack_require__(23646);
const types_1 = __webpack_require__(80238);
const utils_1 = __webpack_require__(97584);
const resolveEndpoint = (ruleSetObject, options)=>{
    var _a, _b, _c, _d, _e, _f;
    const { endpointParams, logger } = options;
    const { parameters, rules } = ruleSetObject;
    (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, `${debug_1.debugId} Initial EndpointParams: ${(0, debug_1.toDebugString)(endpointParams)}`);
    const paramsWithDefault = Object.entries(parameters).filter(([, v])=>v.default != null).map(([k, v])=>[
            k,
            v.default
        ]);
    if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault){
            endpointParams[paramKey] = (_c = endpointParams[paramKey]) !== null && _c !== void 0 ? _c : paramDefaultValue;
        }
    }
    const requiredParams = Object.entries(parameters).filter(([, v])=>v.required).map(([k])=>k);
    for (const requiredParam of requiredParams){
        if (endpointParams[requiredParam] == null) {
            throw new types_1.EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
    }
    const endpoint = (0, utils_1.evaluateRules)(rules, {
        endpointParams,
        logger,
        referenceRecord: {}
    });
    if ((_d = options.endpointParams) === null || _d === void 0 ? void 0 : _d.Endpoint) {
        try {
            const givenEndpoint = new URL(options.endpointParams.Endpoint);
            const { protocol, port } = givenEndpoint;
            endpoint.url.protocol = protocol;
            endpoint.url.port = port;
        } catch (e) {}
    }
    (_f = (_e = options.logger) === null || _e === void 0 ? void 0 : _e.debug) === null || _f === void 0 ? void 0 : _f.call(_e, `${debug_1.debugId} Resolved endpoint: ${(0, debug_1.toDebugString)(endpoint)}`);
    return endpoint;
};
exports.resolveEndpoint = resolveEndpoint;


/***/ }),

/***/ 39542:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.EndpointError = void 0;
class EndpointError extends Error {
    constructor(message){
        super(message);
        this.name = "EndpointError";
    }
}
exports.EndpointError = EndpointError;


/***/ }),

/***/ 33565:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 71629:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 88567:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 7465:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 80238:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(39542), exports);
tslib_1.__exportStar(__webpack_require__(33565), exports);
tslib_1.__exportStar(__webpack_require__(71629), exports);
tslib_1.__exportStar(__webpack_require__(88567), exports);
tslib_1.__exportStar(__webpack_require__(7465), exports);
tslib_1.__exportStar(__webpack_require__(28261), exports);


/***/ }),

/***/ 28261:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 39992:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.callFunction = void 0;
const tslib_1 = __webpack_require__(35092);
const lib = tslib_1.__importStar(__webpack_require__(24071));
const evaluateExpression_1 = __webpack_require__(20205);
const callFunction = ({ fn, argv }, options)=>{
    const evaluatedArgs = argv.map((arg)=>[
            "boolean",
            "number"
        ].includes(typeof arg) ? arg : (0, evaluateExpression_1.evaluateExpression)(arg, "arg", options));
    return fn.split(".").reduce((acc, key)=>acc[key], lib)(...evaluatedArgs);
};
exports.callFunction = callFunction;


/***/ }),

/***/ 26514:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.evaluateCondition = void 0;
const debug_1 = __webpack_require__(23646);
const types_1 = __webpack_require__(80238);
const callFunction_1 = __webpack_require__(39992);
const evaluateCondition = ({ assign, ...fnArgs }, options)=>{
    var _a, _b;
    if (assign && assign in options.referenceRecord) {
        throw new types_1.EndpointError(`'${assign}' is already defined in Reference Record.`);
    }
    const value = (0, callFunction_1.callFunction)(fnArgs, options);
    (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `evaluateCondition: ${(0, debug_1.toDebugString)(fnArgs)} = ${(0, debug_1.toDebugString)(value)}`);
    return {
        result: value === "" ? true : !!value,
        ...assign != null && {
            toAssign: {
                name: assign,
                value
            }
        }
    };
};
exports.evaluateCondition = evaluateCondition;


/***/ }),

/***/ 97128:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.evaluateConditions = void 0;
const debug_1 = __webpack_require__(23646);
const evaluateCondition_1 = __webpack_require__(26514);
const evaluateConditions = (conditions = [], options)=>{
    var _a, _b;
    const conditionsReferenceRecord = {};
    for (const condition of conditions){
        const { result, toAssign } = (0, evaluateCondition_1.evaluateCondition)(condition, {
            ...options,
            referenceRecord: {
                ...options.referenceRecord,
                ...conditionsReferenceRecord
            }
        });
        if (!result) {
            return {
                result
            };
        }
        if (toAssign) {
            conditionsReferenceRecord[toAssign.name] = toAssign.value;
            (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `assign: ${toAssign.name} := ${(0, debug_1.toDebugString)(toAssign.value)}`);
        }
    }
    return {
        result: true,
        referenceRecord: conditionsReferenceRecord
    };
};
exports.evaluateConditions = evaluateConditions;


/***/ }),

/***/ 78960:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.evaluateEndpointRule = void 0;
const debug_1 = __webpack_require__(23646);
const evaluateConditions_1 = __webpack_require__(97128);
const getEndpointHeaders_1 = __webpack_require__(57950);
const getEndpointProperties_1 = __webpack_require__(25306);
const getEndpointUrl_1 = __webpack_require__(46838);
const evaluateEndpointRule = (endpointRule, options)=>{
    var _a, _b;
    const { conditions, endpoint } = endpointRule;
    const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
    if (!result) {
        return;
    }
    const endpointRuleOptions = {
        ...options,
        referenceRecord: {
            ...options.referenceRecord,
            ...referenceRecord
        }
    };
    const { url, properties, headers } = endpoint;
    (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `Resolving endpoint from template: ${(0, debug_1.toDebugString)(endpoint)}`);
    return {
        ...headers != undefined && {
            headers: (0, getEndpointHeaders_1.getEndpointHeaders)(headers, endpointRuleOptions)
        },
        ...properties != undefined && {
            properties: (0, getEndpointProperties_1.getEndpointProperties)(properties, endpointRuleOptions)
        },
        url: (0, getEndpointUrl_1.getEndpointUrl)(url, endpointRuleOptions)
    };
};
exports.evaluateEndpointRule = evaluateEndpointRule;


/***/ }),

/***/ 5248:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.evaluateErrorRule = void 0;
const types_1 = __webpack_require__(80238);
const evaluateConditions_1 = __webpack_require__(97128);
const evaluateExpression_1 = __webpack_require__(20205);
const evaluateErrorRule = (errorRule, options)=>{
    const { conditions, error } = errorRule;
    const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
    if (!result) {
        return;
    }
    throw new types_1.EndpointError((0, evaluateExpression_1.evaluateExpression)(error, "Error", {
        ...options,
        referenceRecord: {
            ...options.referenceRecord,
            ...referenceRecord
        }
    }));
};
exports.evaluateErrorRule = evaluateErrorRule;


/***/ }),

/***/ 20205:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.evaluateExpression = void 0;
const types_1 = __webpack_require__(80238);
const callFunction_1 = __webpack_require__(39992);
const evaluateTemplate_1 = __webpack_require__(78647);
const getReferenceValue_1 = __webpack_require__(71627);
const evaluateExpression = (obj, keyName, options)=>{
    if (typeof obj === "string") {
        return (0, evaluateTemplate_1.evaluateTemplate)(obj, options);
    } else if (obj["fn"]) {
        return (0, callFunction_1.callFunction)(obj, options);
    } else if (obj["ref"]) {
        return (0, getReferenceValue_1.getReferenceValue)(obj, options);
    }
    throw new types_1.EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
};
exports.evaluateExpression = evaluateExpression;


/***/ }),

/***/ 12748:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.evaluateRules = void 0;
const types_1 = __webpack_require__(80238);
const evaluateEndpointRule_1 = __webpack_require__(78960);
const evaluateErrorRule_1 = __webpack_require__(5248);
const evaluateTreeRule_1 = __webpack_require__(59963);
const evaluateRules = (rules, options)=>{
    for (const rule of rules){
        if (rule.type === "endpoint") {
            const endpointOrUndefined = (0, evaluateEndpointRule_1.evaluateEndpointRule)(rule, options);
            if (endpointOrUndefined) {
                return endpointOrUndefined;
            }
        } else if (rule.type === "error") {
            (0, evaluateErrorRule_1.evaluateErrorRule)(rule, options);
        } else if (rule.type === "tree") {
            const endpointOrUndefined = (0, evaluateTreeRule_1.evaluateTreeRule)(rule, options);
            if (endpointOrUndefined) {
                return endpointOrUndefined;
            }
        } else {
            throw new types_1.EndpointError(`Unknown endpoint rule: ${rule}`);
        }
    }
    throw new types_1.EndpointError(`Rules evaluation failed`);
};
exports.evaluateRules = evaluateRules;


/***/ }),

/***/ 78647:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.evaluateTemplate = void 0;
const lib_1 = __webpack_require__(24071);
const evaluateTemplate = (template, options)=>{
    const evaluatedTemplateArr = [];
    const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
    };
    let currentIndex = 0;
    while(currentIndex < template.length){
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
            evaluatedTemplateArr.push(template.slice(currentIndex));
            break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
            evaluatedTemplateArr.push(template.slice(openingBraceIndex));
            break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
            evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
            currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
            const [refName, attrName] = parameterName.split("#");
            evaluatedTemplateArr.push((0, lib_1.getAttr)(templateContext[refName], attrName));
        } else {
            evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
    }
    return evaluatedTemplateArr.join("");
};
exports.evaluateTemplate = evaluateTemplate;


/***/ }),

/***/ 59963:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.evaluateTreeRule = void 0;
const evaluateConditions_1 = __webpack_require__(97128);
const evaluateRules_1 = __webpack_require__(12748);
const evaluateTreeRule = (treeRule, options)=>{
    const { conditions, rules } = treeRule;
    const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
    if (!result) {
        return;
    }
    return (0, evaluateRules_1.evaluateRules)(rules, {
        ...options,
        referenceRecord: {
            ...options.referenceRecord,
            ...referenceRecord
        }
    });
};
exports.evaluateTreeRule = evaluateTreeRule;


/***/ }),

/***/ 57950:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getEndpointHeaders = void 0;
const types_1 = __webpack_require__(80238);
const evaluateExpression_1 = __webpack_require__(20205);
const getEndpointHeaders = (headers, options)=>Object.entries(headers).reduce((acc, [headerKey, headerVal])=>({
            ...acc,
            [headerKey]: headerVal.map((headerValEntry)=>{
                const processedExpr = (0, evaluateExpression_1.evaluateExpression)(headerValEntry, "Header value entry", options);
                if (typeof processedExpr !== "string") {
                    throw new types_1.EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
                }
                return processedExpr;
            })
        }), {});
exports.getEndpointHeaders = getEndpointHeaders;


/***/ }),

/***/ 25306:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getEndpointProperties = void 0;
const getEndpointProperty_1 = __webpack_require__(13171);
const getEndpointProperties = (properties, options)=>Object.entries(properties).reduce((acc, [propertyKey, propertyVal])=>({
            ...acc,
            [propertyKey]: (0, getEndpointProperty_1.getEndpointProperty)(propertyVal, options)
        }), {});
exports.getEndpointProperties = getEndpointProperties;


/***/ }),

/***/ 13171:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getEndpointProperty = void 0;
const types_1 = __webpack_require__(80238);
const evaluateTemplate_1 = __webpack_require__(78647);
const getEndpointProperties_1 = __webpack_require__(25306);
const getEndpointProperty = (property, options)=>{
    if (Array.isArray(property)) {
        return property.map((propertyEntry)=>(0, exports.getEndpointProperty)(propertyEntry, options));
    }
    switch(typeof property){
        case "string":
            return (0, evaluateTemplate_1.evaluateTemplate)(property, options);
        case "object":
            if (property === null) {
                throw new types_1.EndpointError(`Unexpected endpoint property: ${property}`);
            }
            return (0, getEndpointProperties_1.getEndpointProperties)(property, options);
        case "boolean":
            return property;
        default:
            throw new types_1.EndpointError(`Unexpected endpoint property type: ${typeof property}`);
    }
};
exports.getEndpointProperty = getEndpointProperty;


/***/ }),

/***/ 46838:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getEndpointUrl = void 0;
const types_1 = __webpack_require__(80238);
const evaluateExpression_1 = __webpack_require__(20205);
const getEndpointUrl = (endpointUrl, options)=>{
    const expression = (0, evaluateExpression_1.evaluateExpression)(endpointUrl, "Endpoint URL", options);
    if (typeof expression === "string") {
        try {
            return new URL(expression);
        } catch (error) {
            console.error(`Failed to construct URL with ${expression}`, error);
            throw error;
        }
    }
    throw new types_1.EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
};
exports.getEndpointUrl = getEndpointUrl;


/***/ }),

/***/ 71627:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getReferenceValue = void 0;
const getReferenceValue = ({ ref }, options)=>{
    const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
    };
    return referenceRecord[ref];
};
exports.getReferenceValue = getReferenceValue;


/***/ }),

/***/ 97584:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(12748), exports);


/***/ }),

/***/ 57195:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.defaultUserAgent = exports.UA_APP_ID_INI_NAME = exports.UA_APP_ID_ENV_NAME = void 0;
const node_config_provider_1 = __webpack_require__(42429);
const os_1 = __webpack_require__(22037);
const process_1 = __webpack_require__(77282);
const is_crt_available_1 = __webpack_require__(94018);
exports.UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
exports.UA_APP_ID_INI_NAME = "sdk-ua-app-id";
const defaultUserAgent = ({ serviceId, clientVersion })=>{
    const sections = [
        [
            "aws-sdk-js",
            clientVersion
        ],
        [
            "ua",
            "2.0"
        ],
        [
            `os/${(0, os_1.platform)()}`,
            (0, os_1.release)()
        ],
        [
            "lang/js"
        ],
        [
            "md/nodejs",
            `${process_1.versions.node}`
        ]
    ];
    const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
    if (crtAvailable) {
        sections.push(crtAvailable);
    }
    if (serviceId) {
        sections.push([
            `api/${serviceId}`,
            clientVersion
        ]);
    }
    if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([
            `exec-env/${process_1.env.AWS_EXECUTION_ENV}`
        ]);
    }
    const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env)=>env[exports.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile)=>profile[exports.UA_APP_ID_INI_NAME],
        default: undefined
    })();
    let resolvedUserAgent = undefined;
    return async ()=>{
        if (!resolvedUserAgent) {
            const appId = await appIdPromise;
            resolvedUserAgent = appId ? [
                ...sections,
                [
                    `app/${appId}`
                ]
            ] : [
                ...sections
            ];
        }
        return resolvedUserAgent;
    };
};
exports.defaultUserAgent = defaultUserAgent;


/***/ }),

/***/ 94018:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.isCrtAvailable = void 0;
const isCrtAvailable = ()=>{
    try {
        if ( true && __webpack_require__(36254)) {
            return [
                "md/crt-avail"
            ];
        }
        return null;
    } catch (e) {
        return null;
    }
};
exports.isCrtAvailable = isCrtAvailable;


/***/ }),

/***/ 93785:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_DUALSTACK_ENDPOINT = exports.CONFIG_USE_DUALSTACK_ENDPOINT = exports.ENV_USE_DUALSTACK_ENDPOINT = void 0;
const util_config_provider_1 = __webpack_require__(36334);
exports.ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
exports.CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
exports.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>(0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.ENV),
    configFileSelector: (profile)=>(0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
    default: false
};


/***/ }),

/***/ 79471:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_FIPS_ENDPOINT = exports.CONFIG_USE_FIPS_ENDPOINT = exports.ENV_USE_FIPS_ENDPOINT = void 0;
const util_config_provider_1 = __webpack_require__(36334);
exports.ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
exports.CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
exports.DEFAULT_USE_FIPS_ENDPOINT = false;
exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>(0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.ENV),
    configFileSelector: (profile)=>(0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
    default: false
};


/***/ }),

/***/ 72111:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(93785), exports);
tslib_1.__exportStar(__webpack_require__(79471), exports);
tslib_1.__exportStar(__webpack_require__(72771), exports);
tslib_1.__exportStar(__webpack_require__(14885), exports);


/***/ }),

/***/ 72771:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveCustomEndpointsConfig = void 0;
const util_middleware_1 = __webpack_require__(49729);
const resolveCustomEndpointsConfig = (input)=>{
    var _a, _b;
    const { endpoint, urlParser } = input;
    return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false)
    };
};
exports.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;


/***/ }),

/***/ 14885:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveEndpointsConfig = void 0;
const util_middleware_1 = __webpack_require__(49729);
const getEndpointFromRegion_1 = __webpack_require__(66918);
const resolveEndpointsConfig = (input)=>{
    var _a, _b;
    const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)((_a = input.useDualstackEndpoint) !== null && _a !== void 0 ? _a : false);
    const { endpoint, useFipsEndpoint, urlParser } = input;
    return {
        ...input,
        tls: (_b = input.tls) !== null && _b !== void 0 ? _b : true,
        endpoint: endpoint ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : ()=>(0, getEndpointFromRegion_1.getEndpointFromRegion)({
                ...input,
                useDualstackEndpoint,
                useFipsEndpoint
            }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint
    };
};
exports.resolveEndpointsConfig = resolveEndpointsConfig;


/***/ }),

/***/ 66918:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getEndpointFromRegion = void 0;
const getEndpointFromRegion = async (input)=>{
    var _a;
    const { tls = true } = input;
    const region = await input.region();
    const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
    if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
    }
    const useDualstackEndpoint = await input.useDualstackEndpoint();
    const useFipsEndpoint = await input.useFipsEndpoint();
    const { hostname } = (_a = await input.regionInfoProvider(region, {
        useDualstackEndpoint,
        useFipsEndpoint
    })) !== null && _a !== void 0 ? _a : {};
    if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
    }
    return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
};
exports.getEndpointFromRegion = getEndpointFromRegion;


/***/ }),

/***/ 86620:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(72111), exports);
tslib_1.__exportStar(__webpack_require__(1631), exports);
tslib_1.__exportStar(__webpack_require__(68302), exports);


/***/ }),

/***/ 54770:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.NODE_REGION_CONFIG_FILE_OPTIONS = exports.NODE_REGION_CONFIG_OPTIONS = exports.REGION_INI_NAME = exports.REGION_ENV_NAME = void 0;
exports.REGION_ENV_NAME = "AWS_REGION";
exports.REGION_INI_NAME = "region";
exports.NODE_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>env[exports.REGION_ENV_NAME],
    configFileSelector: (profile)=>profile[exports.REGION_INI_NAME],
    default: ()=>{
        throw new Error("Region is missing");
    }
};
exports.NODE_REGION_CONFIG_FILE_OPTIONS = {
    preferredFile: "credentials"
};


/***/ }),

/***/ 62440:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getRealRegion = void 0;
const isFipsRegion_1 = __webpack_require__(56470);
const getRealRegion = (region)=>(0, isFipsRegion_1.isFipsRegion)(region) ? [
        "fips-aws-global",
        "aws-fips"
    ].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
exports.getRealRegion = getRealRegion;


/***/ }),

/***/ 1631:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(54770), exports);
tslib_1.__exportStar(__webpack_require__(30248), exports);


/***/ }),

/***/ 56470:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.isFipsRegion = void 0;
const isFipsRegion = (region)=>typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
exports.isFipsRegion = isFipsRegion;


/***/ }),

/***/ 30248:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveRegionConfig = void 0;
const getRealRegion_1 = __webpack_require__(62440);
const isFipsRegion_1 = __webpack_require__(56470);
const resolveRegionConfig = (input)=>{
    const { region, useFipsEndpoint } = input;
    if (!region) {
        throw new Error("Region is missing");
    }
    return {
        ...input,
        region: async ()=>{
            if (typeof region === "string") {
                return (0, getRealRegion_1.getRealRegion)(region);
            }
            const providedRegion = await region();
            return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async ()=>{
            const providedRegion = typeof region === "string" ? region : await region();
            if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
                return true;
            }
            return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
    };
};
exports.resolveRegionConfig = resolveRegionConfig;


/***/ }),

/***/ 25468:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 82504:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 96838:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getHostnameFromVariants = void 0;
const getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint })=>{
    var _a;
    return (_a = variants.find(({ tags })=>useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))) === null || _a === void 0 ? void 0 : _a.hostname;
};
exports.getHostnameFromVariants = getHostnameFromVariants;


/***/ }),

/***/ 87311:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getRegionInfo = void 0;
const getHostnameFromVariants_1 = __webpack_require__(96838);
const getResolvedHostname_1 = __webpack_require__(97224);
const getResolvedPartition_1 = __webpack_require__(95026);
const getResolvedSigningRegion_1 = __webpack_require__(53518);
const getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash })=>{
    var _a, _b, _c, _d, _e, _f;
    const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, {
        partitionHash
    });
    const resolvedRegion = region in regionHash ? region : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region;
    const hostnameOptions = {
        useFipsEndpoint,
        useDualstackEndpoint
    };
    const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);
    const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);
    const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, {
        regionHostname,
        partitionHostname
    });
    if (hostname === undefined) {
        throw new Error(`Endpoint resolution failed for: ${{
            resolvedRegion,
            useFipsEndpoint,
            useDualstackEndpoint
        }}`);
    }
    const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
    });
    return {
        partition,
        signingService,
        hostname,
        ...signingRegion && {
            signingRegion
        },
        ...((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
            signingService: regionHash[resolvedRegion].signingService
        }
    };
};
exports.getRegionInfo = getRegionInfo;


/***/ }),

/***/ 97224:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getResolvedHostname = void 0;
const getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname })=>regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : undefined;
exports.getResolvedHostname = getResolvedHostname;


/***/ }),

/***/ 95026:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getResolvedPartition = void 0;
const getResolvedPartition = (region, { partitionHash })=>{
    var _a;
    return (_a = Object.keys(partitionHash || {}).find((key)=>partitionHash[key].regions.includes(region))) !== null && _a !== void 0 ? _a : "aws";
};
exports.getResolvedPartition = getResolvedPartition;


/***/ }),

/***/ 53518:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getResolvedSigningRegion = void 0;
const getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint })=>{
    if (signingRegion) {
        return signingRegion;
    } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
            return regionRegexmatchArray[0].slice(1, -1);
        }
    }
};
exports.getResolvedSigningRegion = getResolvedSigningRegion;


/***/ }),

/***/ 68302:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(25468), exports);
tslib_1.__exportStar(__webpack_require__(82504), exports);
tslib_1.__exportStar(__webpack_require__(87311), exports);


/***/ }),

/***/ 11772:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Endpoint = void 0;
var Endpoint;
(function(Endpoint) {
    Endpoint["IPv4"] = "http://169.254.169.254";
    Endpoint["IPv6"] = "http://[fd00:ec2::254]";
})(Endpoint = exports.Endpoint || (exports.Endpoint = {}));


/***/ }),

/***/ 82516:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ENDPOINT_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_NAME = exports.ENV_ENDPOINT_NAME = void 0;
exports.ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
exports.CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
exports.ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>env[exports.ENV_ENDPOINT_NAME],
    configFileSelector: (profile)=>profile[exports.CONFIG_ENDPOINT_NAME],
    default: undefined
};


/***/ }),

/***/ 81221:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.EndpointMode = void 0;
var EndpointMode;
(function(EndpointMode) {
    EndpointMode["IPv4"] = "IPv4";
    EndpointMode["IPv6"] = "IPv6";
})(EndpointMode = exports.EndpointMode || (exports.EndpointMode = {}));


/***/ }),

/***/ 40176:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ENDPOINT_MODE_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_MODE_NAME = exports.ENV_ENDPOINT_MODE_NAME = void 0;
const EndpointMode_1 = __webpack_require__(81221);
exports.ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
exports.CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
exports.ENDPOINT_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>env[exports.ENV_ENDPOINT_MODE_NAME],
    configFileSelector: (profile)=>profile[exports.CONFIG_ENDPOINT_MODE_NAME],
    default: EndpointMode_1.EndpointMode.IPv4
};


/***/ }),

/***/ 5277:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromContainerMetadata = exports.ENV_CMDS_AUTH_TOKEN = exports.ENV_CMDS_RELATIVE_URI = exports.ENV_CMDS_FULL_URI = void 0;
const property_provider_1 = __webpack_require__(44357);
const url_1 = __webpack_require__(57310);
const httpRequest_1 = __webpack_require__(28197);
const ImdsCredentials_1 = __webpack_require__(29802);
const RemoteProviderInit_1 = __webpack_require__(20911);
const retry_1 = __webpack_require__(78181);
exports.ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
exports.ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
exports.ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
const fromContainerMetadata = (init = {})=>{
    const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
    return ()=>(0, retry_1.retry)(async ()=>{
            const requestOptions = await getCmdsUri();
            const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
            if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
                throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
            }
            return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
        }, maxRetries);
};
exports.fromContainerMetadata = fromContainerMetadata;
const requestFromEcsImds = async (timeout, options)=>{
    if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
            ...options.headers,
            Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN]
        };
    }
    const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout
    });
    return buffer.toString();
};
const CMDS_IP = "169.254.170.2";
const GREENGRASS_HOSTS = {
    localhost: true,
    "127.0.0.1": true
};
const GREENGRASS_PROTOCOLS = {
    "http:": true,
    "https:": true
};
const getCmdsUri = async ()=>{
    if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {
        return {
            hostname: CMDS_IP,
            path: process.env[exports.ENV_CMDS_RELATIVE_URI]
        };
    }
    if (process.env[exports.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
            throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
            throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
        }
        return {
            ...parsed,
            port: parsed.port ? parseInt(parsed.port, 10) : undefined
        };
    }
    throw new property_provider_1.CredentialsProviderError("The container metadata credential provider cannot be used unless" + ` the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment` + " variable is set", false);
};


/***/ }),

/***/ 67694:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromInstanceMetadata = void 0;
const property_provider_1 = __webpack_require__(44357);
const httpRequest_1 = __webpack_require__(28197);
const ImdsCredentials_1 = __webpack_require__(29802);
const RemoteProviderInit_1 = __webpack_require__(20911);
const retry_1 = __webpack_require__(78181);
const getInstanceMetadataEndpoint_1 = __webpack_require__(31999);
const staticStabilityProvider_1 = __webpack_require__(33893);
const IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
const IMDS_TOKEN_PATH = "/latest/api/token";
const fromInstanceMetadata = (init = {})=>(0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), {
        logger: init.logger
    });
exports.fromInstanceMetadata = fromInstanceMetadata;
const getInstanceImdsProvider = (init)=>{
    let disableFetchToken = false;
    const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
    const getCredentials = async (maxRetries, options)=>{
        const profile = (await (0, retry_1.retry)(async ()=>{
            let profile;
            try {
                profile = await getProfile(options);
            } catch (err) {
                if (err.statusCode === 401) {
                    disableFetchToken = false;
                }
                throw err;
            }
            return profile;
        }, maxRetries)).trim();
        return (0, retry_1.retry)(async ()=>{
            let creds;
            try {
                creds = await getCredentialsFromProfile(profile, options);
            } catch (err) {
                if (err.statusCode === 401) {
                    disableFetchToken = false;
                }
                throw err;
            }
            return creds;
        }, maxRetries);
    };
    return async ()=>{
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
            return getCredentials(maxRetries, {
                ...endpoint,
                timeout
            });
        } else {
            let token;
            try {
                token = (await getMetadataToken({
                    ...endpoint,
                    timeout
                })).toString();
            } catch (error) {
                if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
                    throw Object.assign(error, {
                        message: "EC2 Metadata token request returned error"
                    });
                } else if (error.message === "TimeoutError" || [
                    403,
                    404,
                    405
                ].includes(error.statusCode)) {
                    disableFetchToken = true;
                }
                return getCredentials(maxRetries, {
                    ...endpoint,
                    timeout
                });
            }
            return getCredentials(maxRetries, {
                ...endpoint,
                headers: {
                    "x-aws-ec2-metadata-token": token
                },
                timeout
            });
        }
    };
};
const getMetadataToken = async (options)=>(0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_TOKEN_PATH,
        method: "PUT",
        headers: {
            "x-aws-ec2-metadata-token-ttl-seconds": "21600"
        }
    });
const getProfile = async (options)=>(await (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_PATH
    })).toString();
const getCredentialsFromProfile = async (profile, options)=>{
    const credsResponse = JSON.parse((await (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_PATH + profile
    })).toString());
    if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
    }
    return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
};


/***/ }),

/***/ 30065:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getInstanceMetadataEndpoint = exports.httpRequest = void 0;
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(5277), exports);
tslib_1.__exportStar(__webpack_require__(67694), exports);
tslib_1.__exportStar(__webpack_require__(20911), exports);
tslib_1.__exportStar(__webpack_require__(20047), exports);
var httpRequest_1 = __webpack_require__(28197);
Object.defineProperty(exports, "httpRequest", ({
    enumerable: true,
    get: function() {
        return httpRequest_1.httpRequest;
    }
}));
var getInstanceMetadataEndpoint_1 = __webpack_require__(31999);
Object.defineProperty(exports, "getInstanceMetadataEndpoint", ({
    enumerable: true,
    get: function() {
        return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
    }
}));


/***/ }),

/***/ 29802:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromImdsCredentials = exports.isImdsCredentials = void 0;
const isImdsCredentials = (arg)=>Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
exports.isImdsCredentials = isImdsCredentials;
const fromImdsCredentials = (creds)=>({
        accessKeyId: creds.AccessKeyId,
        secretAccessKey: creds.SecretAccessKey,
        sessionToken: creds.Token,
        expiration: new Date(creds.Expiration)
    });
exports.fromImdsCredentials = fromImdsCredentials;


/***/ }),

/***/ 20911:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.providerConfigFromInit = exports.DEFAULT_MAX_RETRIES = exports.DEFAULT_TIMEOUT = void 0;
exports.DEFAULT_TIMEOUT = 1000;
exports.DEFAULT_MAX_RETRIES = 0;
const providerConfigFromInit = ({ maxRetries = exports.DEFAULT_MAX_RETRIES, timeout = exports.DEFAULT_TIMEOUT })=>({
        maxRetries,
        timeout
    });
exports.providerConfigFromInit = providerConfigFromInit;


/***/ }),

/***/ 28197:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.httpRequest = void 0;
const property_provider_1 = __webpack_require__(44357);
const buffer_1 = __webpack_require__(14300);
const http_1 = __webpack_require__(13685);
function httpRequest(options) {
    return new Promise((resolve, reject)=>{
        var _a;
        const req = (0, http_1.request)({
            method: "GET",
            ...options,
            hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        });
        req.on("error", (err)=>{
            reject(Object.assign(new property_provider_1.ProviderError("Unable to connect to instance metadata service"), err));
            req.destroy();
        });
        req.on("timeout", ()=>{
            reject(new property_provider_1.ProviderError("TimeoutError from instance metadata service"));
            req.destroy();
        });
        req.on("response", (res)=>{
            const { statusCode = 400 } = res;
            if (statusCode < 200 || 300 <= statusCode) {
                reject(Object.assign(new property_provider_1.ProviderError("Error response received from instance metadata service"), {
                    statusCode
                }));
                req.destroy();
            }
            const chunks = [];
            res.on("data", (chunk)=>{
                chunks.push(chunk);
            });
            res.on("end", ()=>{
                resolve(buffer_1.Buffer.concat(chunks));
                req.destroy();
            });
        });
        req.end();
    });
}
exports.httpRequest = httpRequest;


/***/ }),

/***/ 78181:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.retry = void 0;
const retry = (toRetry, maxRetries)=>{
    let promise = toRetry();
    for(let i = 0; i < maxRetries; i++){
        promise = promise.catch(toRetry);
    }
    return promise;
};
exports.retry = retry;


/***/ }),

/***/ 20047:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 14261:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getExtendedInstanceMetadataCredentials = void 0;
const STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
const STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
const STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
const getExtendedInstanceMetadataCredentials = (credentials, logger)=>{
    var _a;
    const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
    const newExpiration = new Date(Date.now() + refreshInterval * 1000);
    logger.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these " + "credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
    const originalExpiration = (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
    return {
        ...credentials,
        ...originalExpiration ? {
            originalExpiration
        } : {},
        expiration: newExpiration
    };
};
exports.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;


/***/ }),

/***/ 31999:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getInstanceMetadataEndpoint = void 0;
const node_config_provider_1 = __webpack_require__(42429);
const url_parser_1 = __webpack_require__(63679);
const Endpoint_1 = __webpack_require__(11772);
const EndpointConfigOptions_1 = __webpack_require__(82516);
const EndpointMode_1 = __webpack_require__(81221);
const EndpointModeConfigOptions_1 = __webpack_require__(40176);
const getInstanceMetadataEndpoint = async ()=>(0, url_parser_1.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig());
exports.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
const getFromEndpointConfig = async ()=>(0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
const getFromEndpointModeConfig = async ()=>{
    const endpointMode = await (0, node_config_provider_1.loadConfig)(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();
    switch(endpointMode){
        case EndpointMode_1.EndpointMode.IPv4:
            return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
            return Endpoint_1.Endpoint.IPv6;
        default:
            throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(EndpointMode_1.EndpointMode)}`);
    }
};


/***/ }),

/***/ 33893:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.staticStabilityProvider = void 0;
const getExtendedInstanceMetadataCredentials_1 = __webpack_require__(14261);
const staticStabilityProvider = (provider, options = {})=>{
    const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
    let pastCredentials;
    return async ()=>{
        let credentials;
        try {
            credentials = await provider();
            if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
                credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(credentials, logger);
            }
        } catch (e) {
            if (pastCredentials) {
                logger.warn("Credential renew failed: ", e);
                credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(pastCredentials, logger);
            } else {
                throw e;
            }
        }
        pastCredentials = credentials;
        return credentials;
    };
};
exports.staticStabilityProvider = staticStabilityProvider;


/***/ }),

/***/ 16262:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.EventStreamCodec = void 0;
const crc32_1 = __webpack_require__(71079);
const HeaderMarshaller_1 = __webpack_require__(14686);
const splitMessage_1 = __webpack_require__(83954);
class EventStreamCodec {
    constructor(toUtf8, fromUtf8){
        this.headerMarshaller = new HeaderMarshaller_1.HeaderMarshaller(toUtf8, fromUtf8);
        this.messageBuffer = [];
        this.isEndOfStream = false;
    }
    feed(message) {
        this.messageBuffer.push(this.decode(message));
    }
    endOfStream() {
        this.isEndOfStream = true;
    }
    getMessage() {
        const message = this.messageBuffer.pop();
        const isEndOfStream = this.isEndOfStream;
        return {
            getMessage () {
                return message;
            },
            isEndOfStream () {
                return isEndOfStream;
            }
        };
    }
    getAvailableMessages() {
        const messages = this.messageBuffer;
        this.messageBuffer = [];
        const isEndOfStream = this.isEndOfStream;
        return {
            getMessages () {
                return messages;
            },
            isEndOfStream () {
                return isEndOfStream;
            }
        };
    }
    encode({ headers: rawHeaders, body }) {
        const headers = this.headerMarshaller.format(rawHeaders);
        const length = headers.byteLength + body.byteLength + 16;
        const out = new Uint8Array(length);
        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        const checksum = new crc32_1.Crc32();
        view.setUint32(0, length, false);
        view.setUint32(4, headers.byteLength, false);
        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
        out.set(headers, 12);
        out.set(body, headers.byteLength + 12);
        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
        return out;
    }
    decode(message) {
        const { headers, body } = (0, splitMessage_1.splitMessage)(message);
        return {
            headers: this.headerMarshaller.parse(headers),
            body
        };
    }
    formatHeaders(rawHeaders) {
        return this.headerMarshaller.format(rawHeaders);
    }
}
exports.EventStreamCodec = EventStreamCodec;


/***/ }),

/***/ 14686:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.HeaderMarshaller = void 0;
const util_hex_encoding_1 = __webpack_require__(57005);
const Int64_1 = __webpack_require__(85706);
class HeaderMarshaller {
    constructor(toUtf8, fromUtf8){
        this.toUtf8 = toUtf8;
        this.fromUtf8 = fromUtf8;
    }
    format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)){
            const bytes = this.fromUtf8(headerName);
            chunks.push(Uint8Array.from([
                bytes.byteLength
            ]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes)=>carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks){
            out.set(chunk, position);
            position += chunk.byteLength;
        }
        return out;
    }
    formatHeaderValue(header) {
        switch(header.type){
            case "boolean":
                return Uint8Array.from([
                    header.value ? 0 : 1
                ]);
            case "byte":
                return Uint8Array.from([
                    2,
                    header.value
                ]);
            case "short":
                const shortView = new DataView(new ArrayBuffer(3));
                shortView.setUint8(0, 3);
                shortView.setInt16(1, header.value, false);
                return new Uint8Array(shortView.buffer);
            case "integer":
                const intView = new DataView(new ArrayBuffer(5));
                intView.setUint8(0, 4);
                intView.setInt32(1, header.value, false);
                return new Uint8Array(intView.buffer);
            case "long":
                const longBytes = new Uint8Array(9);
                longBytes[0] = 5;
                longBytes.set(header.value.bytes, 1);
                return longBytes;
            case "binary":
                const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
                binView.setUint8(0, 6);
                binView.setUint16(1, header.value.byteLength, false);
                const binBytes = new Uint8Array(binView.buffer);
                binBytes.set(header.value, 3);
                return binBytes;
            case "string":
                const utf8Bytes = this.fromUtf8(header.value);
                const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
                strView.setUint8(0, 7);
                strView.setUint16(1, utf8Bytes.byteLength, false);
                const strBytes = new Uint8Array(strView.buffer);
                strBytes.set(utf8Bytes, 3);
                return strBytes;
            case "timestamp":
                const tsBytes = new Uint8Array(9);
                tsBytes[0] = 8;
                tsBytes.set(Int64_1.Int64.fromNumber(header.value.valueOf()).bytes, 1);
                return tsBytes;
            case "uuid":
                if (!UUID_PATTERN.test(header.value)) {
                    throw new Error(`Invalid UUID received: ${header.value}`);
                }
                const uuidBytes = new Uint8Array(17);
                uuidBytes[0] = 9;
                uuidBytes.set((0, util_hex_encoding_1.fromHex)(header.value.replace(/\-/g, "")), 1);
                return uuidBytes;
        }
    }
    parse(headers) {
        const out = {};
        let position = 0;
        while(position < headers.byteLength){
            const nameLength = headers.getUint8(position++);
            const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
            position += nameLength;
            switch(headers.getUint8(position++)){
                case 0:
                    out[name] = {
                        type: BOOLEAN_TAG,
                        value: true
                    };
                    break;
                case 1:
                    out[name] = {
                        type: BOOLEAN_TAG,
                        value: false
                    };
                    break;
                case 2:
                    out[name] = {
                        type: BYTE_TAG,
                        value: headers.getInt8(position++)
                    };
                    break;
                case 3:
                    out[name] = {
                        type: SHORT_TAG,
                        value: headers.getInt16(position, false)
                    };
                    position += 2;
                    break;
                case 4:
                    out[name] = {
                        type: INT_TAG,
                        value: headers.getInt32(position, false)
                    };
                    position += 4;
                    break;
                case 5:
                    out[name] = {
                        type: LONG_TAG,
                        value: new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
                    };
                    position += 8;
                    break;
                case 6:
                    const binaryLength = headers.getUint16(position, false);
                    position += 2;
                    out[name] = {
                        type: BINARY_TAG,
                        value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
                    };
                    position += binaryLength;
                    break;
                case 7:
                    const stringLength = headers.getUint16(position, false);
                    position += 2;
                    out[name] = {
                        type: STRING_TAG,
                        value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
                    };
                    position += stringLength;
                    break;
                case 8:
                    out[name] = {
                        type: TIMESTAMP_TAG,
                        value: new Date(new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
                    };
                    position += 8;
                    break;
                case 9:
                    const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
                    position += 16;
                    out[name] = {
                        type: UUID_TAG,
                        value: `${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(0, 4))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(4, 6))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(6, 8))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(8, 10))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(10))}`
                    };
                    break;
                default:
                    throw new Error(`Unrecognized header type tag`);
            }
        }
        return out;
    }
}
exports.HeaderMarshaller = HeaderMarshaller;
var HEADER_VALUE_TYPE;
(function(HEADER_VALUE_TYPE) {
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolTrue"] = 0] = "boolTrue";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolFalse"] = 1] = "boolFalse";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byte"] = 2] = "byte";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["short"] = 3] = "short";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["integer"] = 4] = "integer";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["long"] = 5] = "long";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byteArray"] = 6] = "byteArray";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["string"] = 7] = "string";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["timestamp"] = 8] = "timestamp";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["uuid"] = 9] = "uuid";
})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
const BOOLEAN_TAG = "boolean";
const BYTE_TAG = "byte";
const SHORT_TAG = "short";
const INT_TAG = "integer";
const LONG_TAG = "long";
const BINARY_TAG = "binary";
const STRING_TAG = "string";
const TIMESTAMP_TAG = "timestamp";
const UUID_TAG = "uuid";
const UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;


/***/ }),

/***/ 85706:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Int64 = void 0;
const util_hex_encoding_1 = __webpack_require__(57005);
class Int64 {
    constructor(bytes){
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
            throw new Error("Int64 buffers must be exactly 8 bytes");
        }
    }
    static fromNumber(number) {
        if (number > 9223372036854776000 || number < -9223372036854776000) {
            throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for(let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256){
            bytes[i] = remaining;
        }
        if (number < 0) {
            negate(bytes);
        }
        return new Int64(bytes);
    }
    valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
            negate(bytes);
        }
        return parseInt((0, util_hex_encoding_1.toHex)(bytes), 16) * (negative ? -1 : 1);
    }
    toString() {
        return String(this.valueOf());
    }
}
exports.Int64 = Int64;
function negate(bytes) {
    for(let i = 0; i < 8; i++){
        bytes[i] ^= 0xff;
    }
    for(let i = 7; i > -1; i--){
        bytes[i]++;
        if (bytes[i] !== 0) break;
    }
}


/***/ }),

/***/ 26529:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 49070:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.MessageDecoderStream = void 0;
class MessageDecoderStream {
    constructor(options){
        this.options = options;
    }
    [Symbol.asyncIterator]() {
        return this.asyncIterator();
    }
    async *asyncIterator() {
        for await (const bytes of this.options.inputStream){
            const decoded = this.options.decoder.decode(bytes);
            yield decoded;
        }
    }
}
exports.MessageDecoderStream = MessageDecoderStream;


/***/ }),

/***/ 14944:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.MessageEncoderStream = void 0;
class MessageEncoderStream {
    constructor(options){
        this.options = options;
    }
    [Symbol.asyncIterator]() {
        return this.asyncIterator();
    }
    async *asyncIterator() {
        for await (const msg of this.options.messageStream){
            const encoded = this.options.encoder.encode(msg);
            yield encoded;
        }
        if (this.options.includeEndFrame) {
            yield new Uint8Array(0);
        }
    }
}
exports.MessageEncoderStream = MessageEncoderStream;


/***/ }),

/***/ 24297:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SmithyMessageDecoderStream = void 0;
class SmithyMessageDecoderStream {
    constructor(options){
        this.options = options;
    }
    [Symbol.asyncIterator]() {
        return this.asyncIterator();
    }
    async *asyncIterator() {
        for await (const message of this.options.messageStream){
            const deserialized = await this.options.deserializer(message);
            if (deserialized === undefined) continue;
            yield deserialized;
        }
    }
}
exports.SmithyMessageDecoderStream = SmithyMessageDecoderStream;


/***/ }),

/***/ 57705:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SmithyMessageEncoderStream = void 0;
class SmithyMessageEncoderStream {
    constructor(options){
        this.options = options;
    }
    [Symbol.asyncIterator]() {
        return this.asyncIterator();
    }
    async *asyncIterator() {
        for await (const chunk of this.options.inputStream){
            const payloadBuf = this.options.serializer(chunk);
            yield payloadBuf;
        }
    }
}
exports.SmithyMessageEncoderStream = SmithyMessageEncoderStream;


/***/ }),

/***/ 5782:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(16262), exports);
tslib_1.__exportStar(__webpack_require__(14686), exports);
tslib_1.__exportStar(__webpack_require__(85706), exports);
tslib_1.__exportStar(__webpack_require__(26529), exports);
tslib_1.__exportStar(__webpack_require__(49070), exports);
tslib_1.__exportStar(__webpack_require__(14944), exports);
tslib_1.__exportStar(__webpack_require__(24297), exports);
tslib_1.__exportStar(__webpack_require__(57705), exports);


/***/ }),

/***/ 83954:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.splitMessage = void 0;
const crc32_1 = __webpack_require__(71079);
const PRELUDE_MEMBER_LENGTH = 4;
const PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
const CHECKSUM_LENGTH = 4;
const MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
function splitMessage({ byteLength, byteOffset, buffer }) {
    if (byteLength < MINIMUM_MESSAGE_LENGTH) {
        throw new Error("Provided message too short to accommodate event stream message overhead");
    }
    const view = new DataView(buffer, byteOffset, byteLength);
    const messageLength = view.getUint32(0, false);
    if (byteLength !== messageLength) {
        throw new Error("Reported message length does not match received message length");
    }
    const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
    const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
    const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
    const checksummer = new crc32_1.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
    if (expectedPreludeChecksum !== checksummer.digest()) {
        throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);
    }
    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
    if (expectedMessageChecksum !== checksummer.digest()) {
        throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);
    }
    return {
        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
    };
}
exports.splitMessage = splitMessage;


/***/ }),

/***/ 67474:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Hash = void 0;
const util_buffer_from_1 = __webpack_require__(31071);
const util_utf8_1 = __webpack_require__(50170);
const buffer_1 = __webpack_require__(14300);
const crypto_1 = __webpack_require__(6113);
class Hash {
    constructor(algorithmIdentifier, secret){
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
    }
    update(toHash, encoding) {
        this.hash.update((0, util_utf8_1.toUint8Array)(castSourceData(toHash, encoding)));
    }
    digest() {
        return Promise.resolve(this.hash.digest());
    }
    reset() {
        this.hash = this.secret ? (0, crypto_1.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, crypto_1.createHash)(this.algorithmIdentifier);
    }
}
exports.Hash = Hash;
function castSourceData(toCast, encoding) {
    if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
    }
    if (typeof toCast === "string") {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
    }
    if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
    }
    return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
}


/***/ }),

/***/ 72938:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.isArrayBuffer = void 0;
const isArrayBuffer = (arg)=>typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
exports.isArrayBuffer = isArrayBuffer;


/***/ }),

/***/ 44732:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getContentLengthPlugin = exports.contentLengthMiddlewareOptions = exports.contentLengthMiddleware = void 0;
const protocol_http_1 = __webpack_require__(45395);
const CONTENT_LENGTH_HEADER = "content-length";
function contentLengthMiddleware(bodyLengthChecker) {
    return (next)=>async (args)=>{
            const request = args.request;
            if (protocol_http_1.HttpRequest.isInstance(request)) {
                const { body, headers } = request;
                if (body && Object.keys(headers).map((str)=>str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
                    try {
                        const length = bodyLengthChecker(body);
                        request.headers = {
                            ...request.headers,
                            [CONTENT_LENGTH_HEADER]: String(length)
                        };
                    } catch (error) {}
                }
            }
            return next({
                ...args,
                request
            });
        };
}
exports.contentLengthMiddleware = contentLengthMiddleware;
exports.contentLengthMiddlewareOptions = {
    step: "build",
    tags: [
        "SET_CONTENT_LENGTH",
        "CONTENT_LENGTH"
    ],
    name: "contentLengthMiddleware",
    override: true
};
const getContentLengthPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports.contentLengthMiddlewareOptions);
        }
    });
exports.getContentLengthPlugin = getContentLengthPlugin;


/***/ }),

/***/ 51595:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.createConfigValueProvider = void 0;
const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config)=>{
    const configProvider = async ()=>{
        var _a;
        const configValue = (_a = config[configKey]) !== null && _a !== void 0 ? _a : config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
            return configValue();
        }
        return configValue;
    };
    if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async ()=>{
            const endpoint = await configProvider();
            if (endpoint && typeof endpoint === "object") {
                if ("url" in endpoint) {
                    return endpoint.url.href;
                }
                if ("hostname" in endpoint) {
                    const { protocol, hostname, port, path } = endpoint;
                    return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
                }
            }
            return endpoint;
        };
    }
    return configProvider;
};
exports.createConfigValueProvider = createConfigValueProvider;


/***/ }),

/***/ 2517:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveParams = exports.getEndpointFromInstructions = void 0;
const service_customizations_1 = __webpack_require__(21741);
const createConfigValueProvider_1 = __webpack_require__(51595);
const getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context)=>{
    const endpointParams = await (0, exports.resolveParams)(commandInput, instructionsSupplier, clientConfig);
    if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
    }
    const endpoint = clientConfig.endpointProvider(endpointParams, context);
    return endpoint;
};
exports.getEndpointFromInstructions = getEndpointFromInstructions;
const resolveParams = async (commandInput, instructionsSupplier, clientConfig)=>{
    var _a;
    const endpointParams = {};
    const instructions = ((_a = instructionsSupplier === null || instructionsSupplier === void 0 ? void 0 : instructionsSupplier.getEndpointParameterInstructions) === null || _a === void 0 ? void 0 : _a.call(instructionsSupplier)) || {};
    for (const [name, instruction] of Object.entries(instructions)){
        switch(instruction.type){
            case "staticContextParams":
                endpointParams[name] = instruction.value;
                break;
            case "contextParams":
                endpointParams[name] = commandInput[instruction.name];
                break;
            case "clientContextParams":
            case "builtInParams":
                endpointParams[name] = await (0, createConfigValueProvider_1.createConfigValueProvider)(instruction.name, name, clientConfig)();
                break;
            default:
                throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
    }
    if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
    }
    if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await (0, service_customizations_1.resolveParamsForS3)(endpointParams);
    }
    return endpointParams;
};
exports.resolveParams = resolveParams;


/***/ }),

/***/ 99952:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(2517), exports);
tslib_1.__exportStar(__webpack_require__(79882), exports);


/***/ }),

/***/ 79882:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.toEndpointV1 = void 0;
const url_parser_1 = __webpack_require__(63679);
const toEndpointV1 = (endpoint)=>{
    if (typeof endpoint === "object") {
        if ("url" in endpoint) {
            return (0, url_parser_1.parseUrl)(endpoint.url);
        }
        return endpoint;
    }
    return (0, url_parser_1.parseUrl)(endpoint);
};
exports.toEndpointV1 = toEndpointV1;


/***/ }),

/***/ 54702:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.endpointMiddleware = void 0;
const getEndpointFromInstructions_1 = __webpack_require__(2517);
const endpointMiddleware = ({ config, instructions })=>{
    return (next, context)=>async (args)=>{
            var _a, _b;
            const endpoint = await (0, getEndpointFromInstructions_1.getEndpointFromInstructions)(args.input, {
                getEndpointParameterInstructions () {
                    return instructions;
                }
            }, {
                ...config
            }, context);
            context.endpointV2 = endpoint;
            context.authSchemes = (_a = endpoint.properties) === null || _a === void 0 ? void 0 : _a.authSchemes;
            const authScheme = (_b = context.authSchemes) === null || _b === void 0 ? void 0 : _b[0];
            if (authScheme) {
                context["signing_region"] = authScheme.signingRegion;
                context["signing_service"] = authScheme.signingName;
            }
            return next({
                ...args
            });
        };
};
exports.endpointMiddleware = endpointMiddleware;


/***/ }),

/***/ 86098:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getEndpointPlugin = exports.endpointMiddlewareOptions = void 0;
const middleware_serde_1 = __webpack_require__(72380);
const endpointMiddleware_1 = __webpack_require__(54702);
exports.endpointMiddlewareOptions = {
    step: "serialize",
    tags: [
        "ENDPOINT_PARAMETERS",
        "ENDPOINT_V2",
        "ENDPOINT"
    ],
    name: "endpointV2Middleware",
    override: true,
    relation: "before",
    toMiddleware: middleware_serde_1.serializerMiddlewareOption.name
};
const getEndpointPlugin = (config, instructions)=>({
        applyToStack: (clientStack)=>{
            clientStack.addRelativeTo((0, endpointMiddleware_1.endpointMiddleware)({
                config,
                instructions
            }), exports.endpointMiddlewareOptions);
        }
    });
exports.getEndpointPlugin = getEndpointPlugin;


/***/ }),

/***/ 17663:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(99952), exports);
tslib_1.__exportStar(__webpack_require__(54702), exports);
tslib_1.__exportStar(__webpack_require__(86098), exports);
tslib_1.__exportStar(__webpack_require__(142), exports);
tslib_1.__exportStar(__webpack_require__(26054), exports);


/***/ }),

/***/ 142:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveEndpointConfig = void 0;
const util_middleware_1 = __webpack_require__(49729);
const toEndpointV1_1 = __webpack_require__(79882);
const resolveEndpointConfig = (input)=>{
    var _a, _b, _c;
    const tls = (_a = input.tls) !== null && _a !== void 0 ? _a : true;
    const { endpoint } = input;
    const customEndpointProvider = endpoint != null ? async ()=>(0, toEndpointV1_1.toEndpointV1)(await (0, util_middleware_1.normalizeProvider)(endpoint)()) : undefined;
    const isCustomEndpoint = !!endpoint;
    return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false),
        useFipsEndpoint: (0, util_middleware_1.normalizeProvider)((_c = input.useFipsEndpoint) !== null && _c !== void 0 ? _c : false)
    };
};
exports.resolveEndpointConfig = resolveEndpointConfig;


/***/ }),

/***/ 21741:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(44720), exports);


/***/ }),

/***/ 44720:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.isArnBucketName = exports.isDnsCompatibleBucketName = exports.S3_HOSTNAME_PATTERN = exports.DOT_PATTERN = exports.resolveParamsForS3 = void 0;
const resolveParamsForS3 = async (endpointParams)=>{
    const bucket = (endpointParams === null || endpointParams === void 0 ? void 0 : endpointParams.Bucket) || "";
    if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
    }
    if ((0, exports.isArnBucketName)(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
            throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
    } else if (!(0, exports.isDnsCompatibleBucketName)(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
    }
    if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
    }
    return endpointParams;
};
exports.resolveParamsForS3 = resolveParamsForS3;
const DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
const IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
const DOTS_PATTERN = /\.\./;
exports.DOT_PATTERN = /\./;
exports.S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
const isDnsCompatibleBucketName = (bucketName)=>DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
exports.isDnsCompatibleBucketName = isDnsCompatibleBucketName;
const isArnBucketName = (bucketName)=>{
    const [arn, partition, service, region, account, typeOrId] = bucketName.split(":");
    const isArn = arn === "arn" && bucketName.split(":").length >= 6;
    const isValidArn = [
        arn,
        partition,
        service,
        account,
        typeOrId
    ].filter(Boolean).length === 5;
    if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
    }
    return arn === "arn" && !!partition && !!service && !!account && !!typeOrId;
};
exports.isArnBucketName = isArnBucketName;


/***/ }),

/***/ 26054:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 32566:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.AdaptiveRetryStrategy = void 0;
const util_retry_1 = __webpack_require__(1761);
const StandardRetryStrategy_1 = __webpack_require__(35369);
class AdaptiveRetryStrategy extends StandardRetryStrategy_1.StandardRetryStrategy {
    constructor(maxAttemptsProvider, options){
        const { rateLimiter, ...superOptions } = options !== null && options !== void 0 ? options : {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new util_retry_1.DefaultRateLimiter();
        this.mode = util_retry_1.RETRY_MODES.ADAPTIVE;
    }
    async retry(next, args) {
        return super.retry(next, args, {
            beforeRequest: async ()=>{
                return this.rateLimiter.getSendToken();
            },
            afterRequest: (response)=>{
                this.rateLimiter.updateClientSendingRate(response);
            }
        });
    }
}
exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;


/***/ }),

/***/ 35369:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.StandardRetryStrategy = void 0;
const protocol_http_1 = __webpack_require__(45395);
const service_error_classification_1 = __webpack_require__(82041);
const util_retry_1 = __webpack_require__(1761);
const uuid_1 = __webpack_require__(72011);
const defaultRetryQuota_1 = __webpack_require__(880);
const delayDecider_1 = __webpack_require__(9502);
const retryDecider_1 = __webpack_require__(31347);
const util_1 = __webpack_require__(55896);
class StandardRetryStrategy {
    constructor(maxAttemptsProvider, options){
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = util_retry_1.RETRY_MODES.STANDARD;
        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;
        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;
        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);
    }
    shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
    }
    async getMaxAttempts() {
        let maxAttempts;
        try {
            maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
    }
    async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while(true){
            try {
                if (protocol_http_1.HttpRequest.isInstance(request)) {
                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
                }
                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
                    await options.beforeRequest();
                }
                const { response, output } = await next(args);
                if (options === null || options === void 0 ? void 0 : options.afterRequest) {
                    options.afterRequest(response);
                }
                this.retryQuota.releaseRetryTokens(retryTokenAmount);
                output.$metadata.attempts = attempts + 1;
                output.$metadata.totalRetryDelay = totalDelay;
                return {
                    response,
                    output
                };
            } catch (e) {
                const err = (0, util_1.asSdkError)(e);
                attempts++;
                if (this.shouldRetry(err, attempts, maxAttempts)) {
                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);
                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);
                    totalDelay += delay;
                    await new Promise((resolve)=>setTimeout(resolve, delay));
                    continue;
                }
                if (!err.$metadata) {
                    err.$metadata = {};
                }
                err.$metadata.attempts = attempts;
                err.$metadata.totalRetryDelay = totalDelay;
                throw err;
            }
        }
    }
}
exports.StandardRetryStrategy = StandardRetryStrategy;
const getDelayFromRetryAfterHeader = (response)=>{
    if (!protocol_http_1.HttpResponse.isInstance(response)) return;
    const retryAfterHeaderName = Object.keys(response.headers).find((key)=>key.toLowerCase() === "retry-after");
    if (!retryAfterHeaderName) return;
    const retryAfter = response.headers[retryAfterHeaderName];
    const retryAfterSeconds = Number(retryAfter);
    if (!Number.isNaN(retryAfterSeconds)) return retryAfterSeconds * 1000;
    const retryAfterDate = new Date(retryAfter);
    return retryAfterDate.getTime() - Date.now();
};


/***/ }),

/***/ 53414:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.NODE_RETRY_MODE_CONFIG_OPTIONS = exports.CONFIG_RETRY_MODE = exports.ENV_RETRY_MODE = exports.resolveRetryConfig = exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports.CONFIG_MAX_ATTEMPTS = exports.ENV_MAX_ATTEMPTS = void 0;
const util_middleware_1 = __webpack_require__(49729);
const util_retry_1 = __webpack_require__(1761);
exports.ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
exports.CONFIG_MAX_ATTEMPTS = "max_attempts";
exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>{
        const value = env[exports.ENV_MAX_ATTEMPTS];
        if (!value) return undefined;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
            throw new Error(`Environment variable ${exports.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
    },
    configFileSelector: (profile)=>{
        const value = profile[exports.CONFIG_MAX_ATTEMPTS];
        if (!value) return undefined;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
            throw new Error(`Shared config file entry ${exports.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
    },
    default: util_retry_1.DEFAULT_MAX_ATTEMPTS
};
const resolveRetryConfig = (input)=>{
    var _a;
    const { retryStrategy } = input;
    const maxAttempts = (0, util_middleware_1.normalizeProvider)((_a = input.maxAttempts) !== null && _a !== void 0 ? _a : util_retry_1.DEFAULT_MAX_ATTEMPTS);
    return {
        ...input,
        maxAttempts,
        retryStrategy: async ()=>{
            if (retryStrategy) {
                return retryStrategy;
            }
            const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();
            if (retryMode === util_retry_1.RETRY_MODES.ADAPTIVE) {
                return new util_retry_1.AdaptiveRetryStrategy(maxAttempts);
            }
            return new util_retry_1.StandardRetryStrategy(maxAttempts);
        }
    };
};
exports.resolveRetryConfig = resolveRetryConfig;
exports.ENV_RETRY_MODE = "AWS_RETRY_MODE";
exports.CONFIG_RETRY_MODE = "retry_mode";
exports.NODE_RETRY_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>env[exports.ENV_RETRY_MODE],
    configFileSelector: (profile)=>profile[exports.CONFIG_RETRY_MODE],
    default: util_retry_1.DEFAULT_RETRY_MODE
};


/***/ }),

/***/ 880:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getDefaultRetryQuota = void 0;
const util_retry_1 = __webpack_require__(1761);
const getDefaultRetryQuota = (initialRetryTokens, options)=>{
    var _a, _b, _c;
    const MAX_CAPACITY = initialRetryTokens;
    const noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : util_retry_1.NO_RETRY_INCREMENT;
    const retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : util_retry_1.RETRY_COST;
    const timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : util_retry_1.TIMEOUT_RETRY_COST;
    let availableCapacity = initialRetryTokens;
    const getCapacityAmount = (error)=>error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
    const hasRetryTokens = (error)=>getCapacityAmount(error) <= availableCapacity;
    const retrieveRetryTokens = (error)=>{
        if (!hasRetryTokens(error)) {
            throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
    };
    const releaseRetryTokens = (capacityReleaseAmount)=>{
        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
    };
    return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
    });
};
exports.getDefaultRetryQuota = getDefaultRetryQuota;


/***/ }),

/***/ 9502:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.defaultDelayDecider = void 0;
const util_retry_1 = __webpack_require__(1761);
const defaultDelayDecider = (delayBase, attempts)=>Math.floor(Math.min(util_retry_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
exports.defaultDelayDecider = defaultDelayDecider;


/***/ }),

/***/ 23120:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(32566), exports);
tslib_1.__exportStar(__webpack_require__(35369), exports);
tslib_1.__exportStar(__webpack_require__(53414), exports);
tslib_1.__exportStar(__webpack_require__(9502), exports);
tslib_1.__exportStar(__webpack_require__(2142), exports);
tslib_1.__exportStar(__webpack_require__(31347), exports);
tslib_1.__exportStar(__webpack_require__(88901), exports);


/***/ }),

/***/ 2142:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getOmitRetryHeadersPlugin = exports.omitRetryHeadersMiddlewareOptions = exports.omitRetryHeadersMiddleware = void 0;
const protocol_http_1 = __webpack_require__(45395);
const util_retry_1 = __webpack_require__(1761);
const omitRetryHeadersMiddleware = ()=>(next)=>async (args)=>{
            const { request } = args;
            if (protocol_http_1.HttpRequest.isInstance(request)) {
                delete request.headers[util_retry_1.INVOCATION_ID_HEADER];
                delete request.headers[util_retry_1.REQUEST_HEADER];
            }
            return next(args);
        };
exports.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
exports.omitRetryHeadersMiddlewareOptions = {
    name: "omitRetryHeadersMiddleware",
    tags: [
        "RETRY",
        "HEADERS",
        "OMIT_RETRY_HEADERS"
    ],
    relation: "before",
    toMiddleware: "awsAuthMiddleware",
    override: true
};
const getOmitRetryHeadersPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.addRelativeTo((0, exports.omitRetryHeadersMiddleware)(), exports.omitRetryHeadersMiddlewareOptions);
        }
    });
exports.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;


/***/ }),

/***/ 31347:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.defaultRetryDecider = void 0;
const service_error_classification_1 = __webpack_require__(82041);
const defaultRetryDecider = (error)=>{
    if (!error) {
        return false;
    }
    return (0, service_error_classification_1.isRetryableByTrait)(error) || (0, service_error_classification_1.isClockSkewError)(error) || (0, service_error_classification_1.isThrottlingError)(error) || (0, service_error_classification_1.isTransientError)(error);
};
exports.defaultRetryDecider = defaultRetryDecider;


/***/ }),

/***/ 88901:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getRetryAfterHint = exports.getRetryPlugin = exports.retryMiddlewareOptions = exports.retryMiddleware = void 0;
const protocol_http_1 = __webpack_require__(45395);
const service_error_classification_1 = __webpack_require__(82041);
const util_retry_1 = __webpack_require__(1761);
const uuid_1 = __webpack_require__(72011);
const util_1 = __webpack_require__(55896);
const retryMiddleware = (options)=>(next, context)=>async (args)=>{
            let retryStrategy = await options.retryStrategy();
            const maxAttempts = await options.maxAttempts();
            if (isRetryStrategyV2(retryStrategy)) {
                retryStrategy = retryStrategy;
                let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
                let lastError = new Error();
                let attempts = 0;
                let totalRetryDelay = 0;
                const { request } = args;
                if (protocol_http_1.HttpRequest.isInstance(request)) {
                    request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
                }
                while(true){
                    try {
                        if (protocol_http_1.HttpRequest.isInstance(request)) {
                            request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
                        }
                        const { response, output } = await next(args);
                        retryStrategy.recordSuccess(retryToken);
                        output.$metadata.attempts = attempts + 1;
                        output.$metadata.totalRetryDelay = totalRetryDelay;
                        return {
                            response,
                            output
                        };
                    } catch (e) {
                        const retryErrorInfo = getRetryErrorInfo(e);
                        lastError = (0, util_1.asSdkError)(e);
                        try {
                            retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
                        } catch (refreshError) {
                            if (!lastError.$metadata) {
                                lastError.$metadata = {};
                            }
                            lastError.$metadata.attempts = attempts + 1;
                            lastError.$metadata.totalRetryDelay = totalRetryDelay;
                            throw lastError;
                        }
                        attempts = retryToken.getRetryCount();
                        const delay = retryToken.getRetryDelay();
                        totalRetryDelay += delay;
                        await new Promise((resolve)=>setTimeout(resolve, delay));
                    }
                }
            } else {
                retryStrategy = retryStrategy;
                if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode) context.userAgent = [
                    ...context.userAgent || [],
                    [
                        "cfg/retry-mode",
                        retryStrategy.mode
                    ]
                ];
                return retryStrategy.retry(next, args);
            }
        };
exports.retryMiddleware = retryMiddleware;
const isRetryStrategyV2 = (retryStrategy)=>typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined";
const getRetryErrorInfo = (error)=>{
    const errorInfo = {
        errorType: getRetryErrorType(error)
    };
    const retryAfterHint = (0, exports.getRetryAfterHint)(error.$response);
    if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
    }
    return errorInfo;
};
const getRetryErrorType = (error)=>{
    if ((0, service_error_classification_1.isThrottlingError)(error)) return "THROTTLING";
    if ((0, service_error_classification_1.isTransientError)(error)) return "TRANSIENT";
    if ((0, service_error_classification_1.isServerError)(error)) return "SERVER_ERROR";
    return "CLIENT_ERROR";
};
exports.retryMiddlewareOptions = {
    name: "retryMiddleware",
    tags: [
        "RETRY"
    ],
    step: "finalizeRequest",
    priority: "high",
    override: true
};
const getRetryPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add((0, exports.retryMiddleware)(options), exports.retryMiddlewareOptions);
        }
    });
exports.getRetryPlugin = getRetryPlugin;
const getRetryAfterHint = (response)=>{
    if (!protocol_http_1.HttpResponse.isInstance(response)) return;
    const retryAfterHeaderName = Object.keys(response.headers).find((key)=>key.toLowerCase() === "retry-after");
    if (!retryAfterHeaderName) return;
    const retryAfter = response.headers[retryAfterHeaderName];
    const retryAfterSeconds = Number(retryAfter);
    if (!Number.isNaN(retryAfterSeconds)) return new Date(retryAfterSeconds * 1000);
    const retryAfterDate = new Date(retryAfter);
    return retryAfterDate;
};
exports.getRetryAfterHint = getRetryAfterHint;


/***/ }),

/***/ 55896:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.asSdkError = void 0;
const asSdkError = (error)=>{
    if (error instanceof Error) return error;
    if (error instanceof Object) return Object.assign(new Error(), error);
    if (typeof error === "string") return new Error(error);
    return new Error(`AWS SDK error wrapper for ${error}`);
};
exports.asSdkError = asSdkError;


/***/ }),

/***/ 72011:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  NIL: () => (/* reexport */ nil),
  parse: () => (/* reexport */ esm_node_parse),
  stringify: () => (/* reexport */ esm_node_stringify),
  v1: () => (/* reexport */ esm_node_v1),
  v3: () => (/* reexport */ esm_node_v3),
  v4: () => (/* reexport */ esm_node_v4),
  v5: () => (/* reexport */ esm_node_v5),
  validate: () => (/* reexport */ esm_node_validate),
  version: () => (/* reexport */ esm_node_version)
});

// EXTERNAL MODULE: external "crypto"
var external_crypto_ = __webpack_require__(6113);
var external_crypto_default = /*#__PURE__*/__webpack_require__.n(external_crypto_);
;// CONCATENATED MODULE: ../../node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/rng.js

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate
let poolPtr = rnds8Pool.length;
function rng() {
    if (poolPtr > rnds8Pool.length - 16) {
        external_crypto_default().randomFillSync(rnds8Pool);
        poolPtr = 0;
    }
    return rnds8Pool.slice(poolPtr, poolPtr += 16);
}

;// CONCATENATED MODULE: ../../node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/regex.js
/* harmony default export */ const regex = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);

;// CONCATENATED MODULE: ../../node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/validate.js

function validate(uuid) {
    return typeof uuid === "string" && regex.test(uuid);
}
/* harmony default export */ const esm_node_validate = (validate);

;// CONCATENATED MODULE: ../../node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/stringify.js

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */ const byteToHex = [];
for(let i = 0; i < 256; ++i){
    byteToHex.push((i + 0x100).toString(16).substr(1));
}
function stringify(arr, offset = 0) {
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields
    if (!esm_node_validate(uuid)) {
        throw TypeError("Stringified UUID is invalid");
    }
    return uuid;
}
/* harmony default export */ const esm_node_stringify = (stringify);

;// CONCATENATED MODULE: ../../node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/v1.js

 // **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;
let _clockseq; // Previous uuid creation time
let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details
function v1(options, buf, offset) {
    let i = buf && offset || 0;
    const b = buf || new Array(16);
    options = options || {};
    let node = options.node || _nodeId;
    let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
    // specified.  We do this lazily to minimize issues related to insufficient
    // system entropy.  See #189
    if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || rng)();
        if (node == null) {
            // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
            node = _nodeId = [
                seedBytes[0] | 0x01,
                seedBytes[1],
                seedBytes[2],
                seedBytes[3],
                seedBytes[4],
                seedBytes[5]
            ];
        }
        if (clockseq == null) {
            // Per 4.2.2, randomize (14 bit) clockseq
            clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
        }
    } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)
    const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq === undefined) {
        clockseq = clockseq + 1 & 0x3fff;
    } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
        nsecs = 0;
    } // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    }
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000; // `time_low`
    const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff; // `time_mid`
    const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff; // `time_high_and_version`
    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
    b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`
    b[i++] = clockseq & 0xff; // `node`
    for(let n = 0; n < 6; ++n){
        b[i + n] = node[n];
    }
    return buf || esm_node_stringify(b);
}
/* harmony default export */ const esm_node_v1 = (v1);

;// CONCATENATED MODULE: ../../node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/parse.js

function parse(uuid) {
    if (!esm_node_validate(uuid)) {
        throw TypeError("Invalid UUID");
    }
    let v;
    const arr = new Uint8Array(16); // Parse ########-....-....-....-............
    arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
    arr[1] = v >>> 16 & 0xff;
    arr[2] = v >>> 8 & 0xff;
    arr[3] = v & 0xff; // Parse ........-####-....-....-............
    arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
    arr[5] = v & 0xff; // Parse ........-....-####-....-............
    arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
    arr[7] = v & 0xff; // Parse ........-....-....-####-............
    arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
    arr[9] = v & 0xff; // Parse ........-....-....-....-############
    // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)
    arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
    arr[11] = v / 0x100000000 & 0xff;
    arr[12] = v >>> 24 & 0xff;
    arr[13] = v >>> 16 & 0xff;
    arr[14] = v >>> 8 & 0xff;
    arr[15] = v & 0xff;
    return arr;
}
/* harmony default export */ const esm_node_parse = (parse);

;// CONCATENATED MODULE: ../../node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/v35.js


function stringToBytes(str) {
    str = unescape(encodeURIComponent(str)); // UTF8 escape
    const bytes = [];
    for(let i = 0; i < str.length; ++i){
        bytes.push(str.charCodeAt(i));
    }
    return bytes;
}
const DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
const URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
/* harmony default export */ function v35(name, version, hashfunc) {
    function generateUUID(value, namespace, buf, offset) {
        if (typeof value === "string") {
            value = stringToBytes(value);
        }
        if (typeof namespace === "string") {
            namespace = esm_node_parse(namespace);
        }
        if (namespace.length !== 16) {
            throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
        } // Compute hash of namespace and value, Per 4.3
        // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
        // hashfunc([...namespace, ... value])`
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 0x0f | version;
        bytes[8] = bytes[8] & 0x3f | 0x80;
        if (buf) {
            offset = offset || 0;
            for(let i = 0; i < 16; ++i){
                buf[offset + i] = bytes[i];
            }
            return buf;
        }
        return esm_node_stringify(bytes);
    } // Function#name is not settable on some platforms (#270)
    try {
        generateUUID.name = name; // eslint-disable-next-line no-empty
    } catch (err) {} // For CommonJS default export support
    generateUUID.DNS = DNS;
    generateUUID.URL = URL;
    return generateUUID;
}

;// CONCATENATED MODULE: ../../node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/md5.js

function md5(bytes) {
    if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
    } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
    }
    return external_crypto_default().createHash("md5").update(bytes).digest();
}
/* harmony default export */ const esm_node_md5 = (md5);

;// CONCATENATED MODULE: ../../node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/v3.js


const v3 = v35("v3", 0x30, esm_node_md5);
/* harmony default export */ const esm_node_v3 = (v3);

;// CONCATENATED MODULE: ../../node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/v4.js


function v4(options, buf, offset) {
    options = options || {};
    const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided
    if (buf) {
        offset = offset || 0;
        for(let i = 0; i < 16; ++i){
            buf[offset + i] = rnds[i];
        }
        return buf;
    }
    return esm_node_stringify(rnds);
}
/* harmony default export */ const esm_node_v4 = (v4);

;// CONCATENATED MODULE: ../../node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/sha1.js

function sha1(bytes) {
    if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
    } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
    }
    return external_crypto_default().createHash("sha1").update(bytes).digest();
}
/* harmony default export */ const esm_node_sha1 = (sha1);

;// CONCATENATED MODULE: ../../node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/v5.js


const v5 = v35("v5", 0x50, esm_node_sha1);
/* harmony default export */ const esm_node_v5 = (v5);

;// CONCATENATED MODULE: ../../node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/nil.js
/* harmony default export */ const nil = ("00000000-0000-0000-0000-000000000000");

;// CONCATENATED MODULE: ../../node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/version.js

function version(uuid) {
    if (!esm_node_validate(uuid)) {
        throw TypeError("Invalid UUID");
    }
    return parseInt(uuid.substr(14, 1), 16);
}
/* harmony default export */ const esm_node_version = (version);

;// CONCATENATED MODULE: ../../node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/index.js











/***/ }),

/***/ 88806:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.deserializerMiddleware = void 0;
const deserializerMiddleware = (options, deserializer)=>(next, context)=>async (args)=>{
            const { response } = await next(args);
            try {
                const parsed = await deserializer(response, options);
                return {
                    response,
                    output: parsed
                };
            } catch (error) {
                Object.defineProperty(error, "$response", {
                    value: response
                });
                if (!("$metadata" in error)) {
                    const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
                    error.message += "\n  " + hint;
                }
                throw error;
            }
        };
exports.deserializerMiddleware = deserializerMiddleware;


/***/ }),

/***/ 72380:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(88806), exports);
tslib_1.__exportStar(__webpack_require__(46863), exports);
tslib_1.__exportStar(__webpack_require__(61407), exports);


/***/ }),

/***/ 46863:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getSerdePlugin = exports.serializerMiddlewareOption = exports.deserializerMiddlewareOption = void 0;
const deserializerMiddleware_1 = __webpack_require__(88806);
const serializerMiddleware_1 = __webpack_require__(61407);
exports.deserializerMiddlewareOption = {
    name: "deserializerMiddleware",
    step: "deserialize",
    tags: [
        "DESERIALIZER"
    ],
    override: true
};
exports.serializerMiddlewareOption = {
    name: "serializerMiddleware",
    step: "serialize",
    tags: [
        "SERIALIZER"
    ],
    override: true
};
function getSerdePlugin(config, serializer, deserializer) {
    return {
        applyToStack: (commandStack)=>{
            commandStack.add((0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer), exports.deserializerMiddlewareOption);
            commandStack.add((0, serializerMiddleware_1.serializerMiddleware)(config, serializer), exports.serializerMiddlewareOption);
        }
    };
}
exports.getSerdePlugin = getSerdePlugin;


/***/ }),

/***/ 61407:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.serializerMiddleware = void 0;
const serializerMiddleware = (options, serializer)=>(next, context)=>async (args)=>{
            var _a;
            const endpoint = ((_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.url) && options.urlParser ? async ()=>options.urlParser(context.endpointV2.url) : options.endpoint;
            if (!endpoint) {
                throw new Error("No valid endpoint provider available.");
            }
            const request = await serializer(args.input, {
                ...options,
                endpoint
            });
            return next({
                ...args,
                request
            });
        };
exports.serializerMiddleware = serializerMiddleware;


/***/ }),

/***/ 21890:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.constructStack = void 0;
const constructStack = ()=>{
    let absoluteEntries = [];
    let relativeEntries = [];
    const entriesNameSet = new Set();
    const sort = (entries)=>entries.sort((a, b)=>stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
    const removeByName = (toRemove)=>{
        let isRemoved = false;
        const filterCb = (entry)=>{
            if (entry.name && entry.name === toRemove) {
                isRemoved = true;
                entriesNameSet.delete(toRemove);
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    const removeByReference = (toRemove)=>{
        let isRemoved = false;
        const filterCb = (entry)=>{
            if (entry.middleware === toRemove) {
                isRemoved = true;
                if (entry.name) entriesNameSet.delete(entry.name);
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    const cloneTo = (toStack)=>{
        absoluteEntries.forEach((entry)=>{
            toStack.add(entry.middleware, {
                ...entry
            });
        });
        relativeEntries.forEach((entry)=>{
            toStack.addRelativeTo(entry.middleware, {
                ...entry
            });
        });
        return toStack;
    };
    const expandRelativeMiddlewareList = (from)=>{
        const expandedMiddlewareList = [];
        from.before.forEach((entry)=>{
            if (entry.before.length === 0 && entry.after.length === 0) {
                expandedMiddlewareList.push(entry);
            } else {
                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
            }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry)=>{
            if (entry.before.length === 0 && entry.after.length === 0) {
                expandedMiddlewareList.push(entry);
            } else {
                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
            }
        });
        return expandedMiddlewareList;
    };
    const getMiddlewareList = (debug = false)=>{
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry)=>{
            const normalizedEntry = {
                ...entry,
                before: [],
                after: []
            };
            if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
            normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry)=>{
            const normalizedEntry = {
                ...entry,
                before: [],
                after: []
            };
            if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
            normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry)=>{
            if (entry.toMiddleware) {
                const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
                if (toMiddleware === undefined) {
                    if (debug) {
                        return;
                    }
                    throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
                }
                if (entry.relation === "after") {
                    toMiddleware.after.push(entry);
                }
                if (entry.relation === "before") {
                    toMiddleware.before.push(entry);
                }
            }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expandedMiddlewareList)=>{
            wholeList.push(...expandedMiddlewareList);
            return wholeList;
        }, []);
        return mainChain;
    };
    const stack = {
        add: (middleware, options = {})=>{
            const { name, override } = options;
            const entry = {
                step: "initialize",
                priority: "normal",
                middleware,
                ...options
            };
            if (name) {
                if (entriesNameSet.has(name)) {
                    if (!override) throw new Error(`Duplicate middleware name '${name}'`);
                    const toOverrideIndex = absoluteEntries.findIndex((entry)=>entry.name === name);
                    const toOverride = absoluteEntries[toOverrideIndex];
                    if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                        throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` + `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
                    }
                    absoluteEntries.splice(toOverrideIndex, 1);
                }
                entriesNameSet.add(name);
            }
            absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options)=>{
            const { name, override } = options;
            const entry = {
                middleware,
                ...options
            };
            if (name) {
                if (entriesNameSet.has(name)) {
                    if (!override) throw new Error(`Duplicate middleware name '${name}'`);
                    const toOverrideIndex = relativeEntries.findIndex((entry)=>entry.name === name);
                    const toOverride = relativeEntries[toOverrideIndex];
                    if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                        throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden ` + `by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
                    }
                    relativeEntries.splice(toOverrideIndex, 1);
                }
                entriesNameSet.add(name);
            }
            relativeEntries.push(entry);
        },
        clone: ()=>cloneTo((0, exports.constructStack)()),
        use: (plugin)=>{
            plugin.applyToStack(stack);
        },
        remove: (toRemove)=>{
            if (typeof toRemove === "string") return removeByName(toRemove);
            else return removeByReference(toRemove);
        },
        removeByTag: (toRemove)=>{
            let isRemoved = false;
            const filterCb = (entry)=>{
                const { tags, name } = entry;
                if (tags && tags.includes(toRemove)) {
                    if (name) entriesNameSet.delete(name);
                    isRemoved = true;
                    return false;
                }
                return true;
            };
            absoluteEntries = absoluteEntries.filter(filterCb);
            relativeEntries = relativeEntries.filter(filterCb);
            return isRemoved;
        },
        concat: (from)=>{
            const cloned = cloneTo((0, exports.constructStack)());
            cloned.use(from);
            return cloned;
        },
        applyToStack: cloneTo,
        identify: ()=>{
            return getMiddlewareList(true).map((mw)=>{
                return mw.name + ": " + (mw.tags || []).join(",");
            });
        },
        resolve: (handler, context)=>{
            for (const middleware of getMiddlewareList().map((entry)=>entry.middleware).reverse()){
                handler = middleware(handler, context);
            }
            return handler;
        }
    };
    return stack;
};
exports.constructStack = constructStack;
const stepWeights = {
    initialize: 5,
    serialize: 4,
    build: 3,
    finalizeRequest: 2,
    deserialize: 1
};
const priorityWeights = {
    high: 3,
    normal: 2,
    low: 1
};


/***/ }),

/***/ 56757:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(21890), exports);


/***/ }),

/***/ 14959:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.loadConfig = void 0;
const property_provider_1 = __webpack_require__(44357);
const fromEnv_1 = __webpack_require__(83986);
const fromSharedConfigFiles_1 = __webpack_require__(71454);
const fromStatic_1 = __webpack_require__(2933);
const loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {})=>(0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromEnv_1.fromEnv)(environmentVariableSelector), (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration), (0, fromStatic_1.fromStatic)(defaultValue)));
exports.loadConfig = loadConfig;


/***/ }),

/***/ 83986:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromEnv = void 0;
const property_provider_1 = __webpack_require__(44357);
const fromEnv = (envVarSelector)=>async ()=>{
        try {
            const config = envVarSelector(process.env);
            if (config === undefined) {
                throw new Error();
            }
            return config;
        } catch (e) {
            throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
        }
    };
exports.fromEnv = fromEnv;


/***/ }),

/***/ 71454:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromSharedConfigFiles = void 0;
const property_provider_1 = __webpack_require__(44357);
const shared_ini_file_loader_1 = __webpack_require__(28630);
const fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {})=>async ()=>{
        const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
        const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
        const profileFromCredentials = credentialsFile[profile] || {};
        const profileFromConfig = configFile[profile] || {};
        const mergedProfile = preferredFile === "config" ? {
            ...profileFromCredentials,
            ...profileFromConfig
        } : {
            ...profileFromConfig,
            ...profileFromCredentials
        };
        try {
            const configValue = configSelector(mergedProfile);
            if (configValue === undefined) {
                throw new Error();
            }
            return configValue;
        } catch (e) {
            throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
        }
    };
exports.fromSharedConfigFiles = fromSharedConfigFiles;


/***/ }),

/***/ 2933:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromStatic = void 0;
const property_provider_1 = __webpack_require__(44357);
const isFunction = (func)=>typeof func === "function";
const fromStatic = (defaultValue)=>isFunction(defaultValue) ? async ()=>await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
exports.fromStatic = fromStatic;


/***/ }),

/***/ 42429:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(14959), exports);


/***/ }),

/***/ 22218:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.NODEJS_TIMEOUT_ERROR_CODES = void 0;
exports.NODEJS_TIMEOUT_ERROR_CODES = [
    "ECONNRESET",
    "EPIPE",
    "ETIMEDOUT"
];


/***/ }),

/***/ 60617:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getTransformedHeaders = void 0;
const getTransformedHeaders = (headers)=>{
    const transformedHeaders = {};
    for (const name of Object.keys(headers)){
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
    }
    return transformedHeaders;
};
exports.getTransformedHeaders = getTransformedHeaders;


/***/ }),

/***/ 17292:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(2280), exports);
tslib_1.__exportStar(__webpack_require__(51649), exports);
tslib_1.__exportStar(__webpack_require__(43373), exports);


/***/ }),

/***/ 2280:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.NodeHttpHandler = exports.DEFAULT_REQUEST_TIMEOUT = void 0;
const protocol_http_1 = __webpack_require__(45395);
const querystring_builder_1 = __webpack_require__(76166);
const http_1 = __webpack_require__(13685);
const https_1 = __webpack_require__(95687);
const constants_1 = __webpack_require__(22218);
const get_transformed_headers_1 = __webpack_require__(60617);
const set_connection_timeout_1 = __webpack_require__(62542);
const set_socket_keep_alive_1 = __webpack_require__(53317);
const set_socket_timeout_1 = __webpack_require__(45033);
const write_request_body_1 = __webpack_require__(38542);
exports.DEFAULT_REQUEST_TIMEOUT = 0;
class NodeHttpHandler {
    constructor(options){
        this.metadata = {
            handlerProtocol: "http/1.1"
        };
        this.configProvider = new Promise((resolve, reject)=>{
            if (typeof options === "function") {
                options().then((_options)=>{
                    resolve(this.resolveDefaultConfig(_options));
                }).catch(reject);
            } else {
                resolve(this.resolveDefaultConfig(options));
            }
        });
    }
    resolveDefaultConfig(options) {
        const { requestTimeout, connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
            connectionTimeout,
            requestTimeout: requestTimeout !== null && requestTimeout !== void 0 ? requestTimeout : socketTimeout,
            httpAgent: httpAgent || new http_1.Agent({
                keepAlive,
                maxSockets
            }),
            httpsAgent: httpsAgent || new https_1.Agent({
                keepAlive,
                maxSockets
            })
        };
    }
    destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();
    }
    async handle(request, { abortSignal } = {}) {
        if (!this.config) {
            this.config = await this.configProvider;
        }
        return new Promise((_resolve, _reject)=>{
            var _a, _b;
            let writeRequestBodyPromise = undefined;
            const resolve = async (arg)=>{
                await writeRequestBodyPromise;
                _resolve(arg);
            };
            const reject = async (arg)=>{
                await writeRequestBodyPromise;
                _reject(arg);
            };
            if (!this.config) {
                throw new Error("Node HTTP request handler config is not resolved");
            }
            if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
                const abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                reject(abortError);
                return;
            }
            const isSSL = request.protocol === "https:";
            const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
            let auth = undefined;
            if (request.username != null || request.password != null) {
                const username = (_a = request.username) !== null && _a !== void 0 ? _a : "";
                const password = (_b = request.password) !== null && _b !== void 0 ? _b : "";
                auth = `${username}:${password}`;
            }
            let path = request.path;
            if (queryString) {
                path += `?${queryString}`;
            }
            if (request.fragment) {
                path += `#${request.fragment}`;
            }
            const nodeHttpsOptions = {
                headers: request.headers,
                host: request.hostname,
                method: request.method,
                path,
                port: request.port,
                agent: isSSL ? this.config.httpsAgent : this.config.httpAgent,
                auth
            };
            const requestFunc = isSSL ? https_1.request : http_1.request;
            const req = requestFunc(nodeHttpsOptions, (res)=>{
                const httpResponse = new protocol_http_1.HttpResponse({
                    statusCode: res.statusCode || -1,
                    reason: res.statusMessage,
                    headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
                    body: res
                });
                resolve({
                    response: httpResponse
                });
            });
            req.on("error", (err)=>{
                if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
                    reject(Object.assign(err, {
                        name: "TimeoutError"
                    }));
                } else {
                    reject(err);
                }
            });
            (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
            (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.requestTimeout);
            if (abortSignal) {
                abortSignal.onabort = ()=>{
                    req.abort();
                    const abortError = new Error("Request aborted");
                    abortError.name = "AbortError";
                    reject(abortError);
                };
            }
            const httpAgent = nodeHttpsOptions.agent;
            if (typeof httpAgent === "object" && "keepAlive" in httpAgent) {
                (0, set_socket_keep_alive_1.setSocketKeepAlive)(req, {
                    keepAlive: httpAgent.keepAlive,
                    keepAliveMsecs: httpAgent.keepAliveMsecs
                });
            }
            writeRequestBodyPromise = (0, write_request_body_1.writeRequestBody)(req, request, this.config.requestTimeout).catch(_reject);
        });
    }
}
exports.NodeHttpHandler = NodeHttpHandler;


/***/ }),

/***/ 35227:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.NodeHttp2ConnectionManager = void 0;
const tslib_1 = __webpack_require__(35092);
const http2_1 = tslib_1.__importDefault(__webpack_require__(85158));
const node_http2_connection_pool_1 = __webpack_require__(59912);
class NodeHttp2ConnectionManager {
    constructor(config){
        this.sessionCache = new Map();
        this.config = config;
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
            throw new RangeError("maxConcurrency must be greater than zero.");
        }
    }
    lease(requestContext, connectionConfiguration) {
        const url = this.getUrlString(requestContext);
        const existingPool = this.sessionCache.get(url);
        if (existingPool) {
            const existingSession = existingPool.poll();
            if (existingSession && !this.config.disableConcurrency) {
                return existingSession;
            }
        }
        const session = http2_1.default.connect(url);
        if (this.config.maxConcurrency) {
            session.settings({
                maxConcurrentStreams: this.config.maxConcurrency
            }, (err)=>{
                if (err) {
                    throw new Error("Fail to set maxConcurrentStreams to " + this.config.maxConcurrency + "when creating new session for " + requestContext.destination.toString());
                }
            });
        }
        session.unref();
        const destroySessionCb = ()=>{
            session.destroy();
            this.deleteSession(url, session);
        };
        session.on("goaway", destroySessionCb);
        session.on("error", destroySessionCb);
        session.on("frameError", destroySessionCb);
        session.on("close", ()=>this.deleteSession(url, session));
        if (connectionConfiguration.requestTimeout) {
            session.setTimeout(connectionConfiguration.requestTimeout, destroySessionCb);
        }
        const connectionPool = this.sessionCache.get(url) || new node_http2_connection_pool_1.NodeHttp2ConnectionPool();
        connectionPool.offerLast(session);
        this.sessionCache.set(url, connectionPool);
        return session;
    }
    deleteSession(authority, session) {
        const existingConnectionPool = this.sessionCache.get(authority);
        if (!existingConnectionPool) {
            return;
        }
        if (!existingConnectionPool.contains(session)) {
            return;
        }
        existingConnectionPool.remove(session);
        this.sessionCache.set(authority, existingConnectionPool);
    }
    release(requestContext, session) {
        var _a;
        const cacheKey = this.getUrlString(requestContext);
        (_a = this.sessionCache.get(cacheKey)) === null || _a === void 0 ? void 0 : _a.offerLast(session);
    }
    destroy() {
        for (const [key, connectionPool] of this.sessionCache){
            for (const session of connectionPool){
                if (!session.destroyed) {
                    session.destroy();
                }
                connectionPool.remove(session);
            }
            this.sessionCache.delete(key);
        }
    }
    setMaxConcurrentStreams(maxConcurrentStreams) {
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
            throw new RangeError("maxConcurrentStreams must be greater than zero.");
        }
        this.config.maxConcurrency = maxConcurrentStreams;
    }
    setDisableConcurrentStreams(disableConcurrentStreams) {
        this.config.disableConcurrency = disableConcurrentStreams;
    }
    getUrlString(request) {
        return request.destination.toString();
    }
}
exports.NodeHttp2ConnectionManager = NodeHttp2ConnectionManager;


/***/ }),

/***/ 59912:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.NodeHttp2ConnectionPool = void 0;
class NodeHttp2ConnectionPool {
    constructor(sessions){
        this.sessions = [];
        this.sessions = sessions !== null && sessions !== void 0 ? sessions : [];
    }
    poll() {
        if (this.sessions.length > 0) {
            return this.sessions.shift();
        }
    }
    offerLast(session) {
        this.sessions.push(session);
    }
    contains(session) {
        return this.sessions.includes(session);
    }
    remove(session) {
        this.sessions = this.sessions.filter((s)=>s !== session);
    }
    [Symbol.iterator]() {
        return this.sessions[Symbol.iterator]();
    }
    destroy(connection) {
        for (const session of this.sessions){
            if (session === connection) {
                if (!session.destroyed) {
                    session.destroy();
                }
            }
        }
    }
}
exports.NodeHttp2ConnectionPool = NodeHttp2ConnectionPool;


/***/ }),

/***/ 51649:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.NodeHttp2Handler = void 0;
const protocol_http_1 = __webpack_require__(45395);
const querystring_builder_1 = __webpack_require__(76166);
const http2_1 = __webpack_require__(85158);
const get_transformed_headers_1 = __webpack_require__(60617);
const node_http2_connection_manager_1 = __webpack_require__(35227);
const write_request_body_1 = __webpack_require__(38542);
class NodeHttp2Handler {
    constructor(options){
        this.metadata = {
            handlerProtocol: "h2"
        };
        this.connectionManager = new node_http2_connection_manager_1.NodeHttp2ConnectionManager({});
        this.configProvider = new Promise((resolve, reject)=>{
            if (typeof options === "function") {
                options().then((opts)=>{
                    resolve(opts || {});
                }).catch(reject);
            } else {
                resolve(options || {});
            }
        });
    }
    destroy() {
        this.connectionManager.destroy();
    }
    async handle(request, { abortSignal } = {}) {
        if (!this.config) {
            this.config = await this.configProvider;
            this.connectionManager.setDisableConcurrentStreams(this.config.disableConcurrentStreams || false);
            if (this.config.maxConcurrentStreams) {
                this.connectionManager.setMaxConcurrentStreams(this.config.maxConcurrentStreams);
            }
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((_resolve, _reject)=>{
            var _a, _b, _c;
            let fulfilled = false;
            let writeRequestBodyPromise = undefined;
            const resolve = async (arg)=>{
                await writeRequestBodyPromise;
                _resolve(arg);
            };
            const reject = async (arg)=>{
                await writeRequestBodyPromise;
                _reject(arg);
            };
            if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
                fulfilled = true;
                const abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                reject(abortError);
                return;
            }
            const { hostname, method, port, protocol, query } = request;
            let auth = "";
            if (request.username != null || request.password != null) {
                const username = (_a = request.username) !== null && _a !== void 0 ? _a : "";
                const password = (_b = request.password) !== null && _b !== void 0 ? _b : "";
                auth = `${username}:${password}@`;
            }
            const authority = `${protocol}//${auth}${hostname}${port ? `:${port}` : ""}`;
            const requestContext = {
                destination: new URL(authority)
            };
            const session = this.connectionManager.lease(requestContext, {
                requestTimeout: (_c = this.config) === null || _c === void 0 ? void 0 : _c.sessionTimeout,
                disableConcurrentStreams: disableConcurrentStreams || false
            });
            const rejectWithDestroy = (err)=>{
                if (disableConcurrentStreams) {
                    this.destroySession(session);
                }
                fulfilled = true;
                reject(err);
            };
            const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
            let path = request.path;
            if (queryString) {
                path += `?${queryString}`;
            }
            if (request.fragment) {
                path += `#${request.fragment}`;
            }
            const req = session.request({
                ...request.headers,
                [http2_1.constants.HTTP2_HEADER_PATH]: path,
                [http2_1.constants.HTTP2_HEADER_METHOD]: method
            });
            session.ref();
            req.on("response", (headers)=>{
                const httpResponse = new protocol_http_1.HttpResponse({
                    statusCode: headers[":status"] || -1,
                    headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
                    body: req
                });
                fulfilled = true;
                resolve({
                    response: httpResponse
                });
                if (disableConcurrentStreams) {
                    session.close();
                    this.connectionManager.deleteSession(authority, session);
                }
            });
            if (requestTimeout) {
                req.setTimeout(requestTimeout, ()=>{
                    req.close();
                    const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
                    timeoutError.name = "TimeoutError";
                    rejectWithDestroy(timeoutError);
                });
            }
            if (abortSignal) {
                abortSignal.onabort = ()=>{
                    req.close();
                    const abortError = new Error("Request aborted");
                    abortError.name = "AbortError";
                    rejectWithDestroy(abortError);
                };
            }
            req.on("frameError", (type, code, id)=>{
                rejectWithDestroy(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
            });
            req.on("error", rejectWithDestroy);
            req.on("aborted", ()=>{
                rejectWithDestroy(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
            });
            req.on("close", ()=>{
                session.unref();
                if (disableConcurrentStreams) {
                    session.destroy();
                }
                if (!fulfilled) {
                    rejectWithDestroy(new Error("Unexpected error: http2 request did not get a response"));
                }
            });
            writeRequestBodyPromise = (0, write_request_body_1.writeRequestBody)(req, request, requestTimeout);
        });
    }
    destroySession(session) {
        if (!session.destroyed) {
            session.destroy();
        }
    }
}
exports.NodeHttp2Handler = NodeHttp2Handler;


/***/ }),

/***/ 62542:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.setConnectionTimeout = void 0;
const setConnectionTimeout = (request, reject, timeoutInMs = 0)=>{
    if (!timeoutInMs) {
        return;
    }
    const timeoutId = setTimeout(()=>{
        request.destroy();
        reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
            name: "TimeoutError"
        }));
    }, timeoutInMs);
    request.on("socket", (socket)=>{
        if (socket.connecting) {
            socket.on("connect", ()=>{
                clearTimeout(timeoutId);
            });
        } else {
            clearTimeout(timeoutId);
        }
    });
};
exports.setConnectionTimeout = setConnectionTimeout;


/***/ }),

/***/ 53317:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.setSocketKeepAlive = void 0;
const setSocketKeepAlive = (request, { keepAlive, keepAliveMsecs })=>{
    if (keepAlive !== true) {
        return;
    }
    request.on("socket", (socket)=>{
        socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
    });
};
exports.setSocketKeepAlive = setSocketKeepAlive;


/***/ }),

/***/ 45033:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.setSocketTimeout = void 0;
const setSocketTimeout = (request, reject, timeoutInMs = 0)=>{
    request.setTimeout(timeoutInMs, ()=>{
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), {
            name: "TimeoutError"
        }));
    });
};
exports.setSocketTimeout = setSocketTimeout;


/***/ }),

/***/ 20593:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Collector = void 0;
const stream_1 = __webpack_require__(12781);
class Collector extends stream_1.Writable {
    constructor(){
        super(...arguments);
        this.bufferedBytes = [];
    }
    _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
    }
}
exports.Collector = Collector;


/***/ }),

/***/ 43373:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.streamCollector = void 0;
const collector_1 = __webpack_require__(20593);
const streamCollector = (stream)=>new Promise((resolve, reject)=>{
        const collector = new collector_1.Collector();
        stream.pipe(collector);
        stream.on("error", (err)=>{
            collector.end();
            reject(err);
        });
        collector.on("error", reject);
        collector.on("finish", function() {
            const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
            resolve(bytes);
        });
    });
exports.streamCollector = streamCollector;


/***/ }),

/***/ 38542:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.writeRequestBody = void 0;
const stream_1 = __webpack_require__(12781);
const MIN_WAIT_TIME = 1000;
async function writeRequestBody(httpRequest, request, maxContinueTimeoutMs = MIN_WAIT_TIME) {
    var _a;
    const headers = (_a = request.headers) !== null && _a !== void 0 ? _a : {};
    const expect = headers["Expect"] || headers["expect"];
    let timeoutId = -1;
    let hasError = false;
    if (expect === "100-continue") {
        await Promise.race([
            new Promise((resolve)=>{
                timeoutId = Number(setTimeout(resolve, Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));
            }),
            new Promise((resolve)=>{
                httpRequest.on("continue", ()=>{
                    clearTimeout(timeoutId);
                    resolve();
                });
                httpRequest.on("error", ()=>{
                    hasError = true;
                    clearTimeout(timeoutId);
                    resolve();
                });
            })
        ]);
    }
    if (!hasError) {
        writeBody(httpRequest, request.body);
    }
}
exports.writeRequestBody = writeRequestBody;
function writeBody(httpRequest, body) {
    if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
    } else if (body) {
        httpRequest.end(Buffer.from(body));
    } else {
        httpRequest.end();
    }
}


/***/ }),

/***/ 59226:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.CredentialsProviderError = void 0;
const ProviderError_1 = __webpack_require__(33065);
class CredentialsProviderError extends ProviderError_1.ProviderError {
    constructor(message, tryNextLink = true){
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
    }
}
exports.CredentialsProviderError = CredentialsProviderError;


/***/ }),

/***/ 33065:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ProviderError = void 0;
class ProviderError extends Error {
    constructor(message, tryNextLink = true){
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, ProviderError.prototype);
    }
    static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
    }
}
exports.ProviderError = ProviderError;


/***/ }),

/***/ 16988:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.TokenProviderError = void 0;
const ProviderError_1 = __webpack_require__(33065);
class TokenProviderError extends ProviderError_1.ProviderError {
    constructor(message, tryNextLink = true){
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, TokenProviderError.prototype);
    }
}
exports.TokenProviderError = TokenProviderError;


/***/ }),

/***/ 2705:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.chain = void 0;
const ProviderError_1 = __webpack_require__(33065);
function chain(...providers) {
    return ()=>{
        let promise = Promise.reject(new ProviderError_1.ProviderError("No providers in chain"));
        for (const provider of providers){
            promise = promise.catch((err)=>{
                if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
                    return provider();
                }
                throw err;
            });
        }
        return promise;
    };
}
exports.chain = chain;


/***/ }),

/***/ 78701:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromStatic = void 0;
const fromStatic = (staticValue)=>()=>Promise.resolve(staticValue);
exports.fromStatic = fromStatic;


/***/ }),

/***/ 44357:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(59226), exports);
tslib_1.__exportStar(__webpack_require__(33065), exports);
tslib_1.__exportStar(__webpack_require__(16988), exports);
tslib_1.__exportStar(__webpack_require__(2705), exports);
tslib_1.__exportStar(__webpack_require__(78701), exports);
tslib_1.__exportStar(__webpack_require__(81342), exports);


/***/ }),

/***/ 81342:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.memoize = void 0;
const memoize = (provider, isExpired, requiresRefresh)=>{
    let resolved;
    let pending;
    let hasResult;
    let isConstant = false;
    const coalesceProvider = async ()=>{
        if (!pending) {
            pending = provider();
        }
        try {
            resolved = await pending;
            hasResult = true;
            isConstant = false;
        } finally{
            pending = undefined;
        }
        return resolved;
    };
    if (isExpired === undefined) {
        return async (options)=>{
            if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
                resolved = await coalesceProvider();
            }
            return resolved;
        };
    }
    return async (options)=>{
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
        }
        if (isConstant) {
            return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
            isConstant = true;
            return resolved;
        }
        if (isExpired(resolved)) {
            await coalesceProvider();
            return resolved;
        }
        return resolved;
    };
};
exports.memoize = memoize;


/***/ }),

/***/ 91683:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Field = void 0;
const types_1 = __webpack_require__(99705);
class Field {
    constructor({ name, kind = types_1.FieldPosition.HEADER, values = [] }){
        this.name = name;
        this.kind = kind;
        this.values = values;
    }
    add(value) {
        this.values.push(value);
    }
    set(values) {
        this.values = values;
    }
    remove(value) {
        this.values = this.values.filter((v)=>v !== value);
    }
    toString() {
        return this.values.map((v)=>v.includes(",") || v.includes(" ") ? `"${v}"` : v).join(", ");
    }
    get() {
        return this.values;
    }
}
exports.Field = Field;


/***/ }),

/***/ 80786:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Fields = void 0;
class Fields {
    constructor({ fields = [], encoding = "utf-8" }){
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
    }
    setField(field) {
        this.entries[field.name.toLowerCase()] = field;
    }
    getField(name) {
        return this.entries[name.toLowerCase()];
    }
    removeField(name) {
        delete this.entries[name.toLowerCase()];
    }
    getByType(kind) {
        return Object.values(this.entries).filter((field)=>field.kind === kind);
    }
}
exports.Fields = Fields;


/***/ }),

/***/ 75062:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 93559:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.HttpRequest = void 0;
class HttpRequest {
    constructor(options){
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
    }
    static isInstance(request) {
        if (!request) return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
    }
    clone() {
        const cloned = new HttpRequest({
            ...this,
            headers: {
                ...this.headers
            }
        });
        if (cloned.query) cloned.query = cloneQuery(cloned.query);
        return cloned;
    }
}
exports.HttpRequest = HttpRequest;
function cloneQuery(query) {
    return Object.keys(query).reduce((carry, paramName)=>{
        const param = query[paramName];
        return {
            ...carry,
            [paramName]: Array.isArray(param) ? [
                ...param
            ] : param
        };
    }, {});
}


/***/ }),

/***/ 11111:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.HttpResponse = void 0;
class HttpResponse {
    constructor(options){
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
    }
    static isInstance(response) {
        if (!response) return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
    }
}
exports.HttpResponse = HttpResponse;


/***/ }),

/***/ 45395:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(91683), exports);
tslib_1.__exportStar(__webpack_require__(80786), exports);
tslib_1.__exportStar(__webpack_require__(75062), exports);
tslib_1.__exportStar(__webpack_require__(93559), exports);
tslib_1.__exportStar(__webpack_require__(11111), exports);
tslib_1.__exportStar(__webpack_require__(45776), exports);
tslib_1.__exportStar(__webpack_require__(69321), exports);


/***/ }),

/***/ 45776:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.isValidHostname = void 0;
function isValidHostname(hostname) {
    const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
    return hostPattern.test(hostname);
}
exports.isValidHostname = isValidHostname;


/***/ }),

/***/ 69321:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 76166:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.buildQueryString = void 0;
const util_uri_escape_1 = __webpack_require__(25262);
function buildQueryString(query) {
    const parts = [];
    for (let key of Object.keys(query).sort()){
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
            for(let i = 0, iLen = value.length; i < iLen; i++){
                parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
            }
        } else {
            let qsEntry = key;
            if (value || typeof value === "string") {
                qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
            }
            parts.push(qsEntry);
        }
    }
    return parts.join("&");
}
exports.buildQueryString = buildQueryString;


/***/ }),

/***/ 36594:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.parseQueryString = void 0;
function parseQueryString(querystring) {
    const query = {};
    querystring = querystring.replace(/^\?/, "");
    if (querystring) {
        for (const pair of querystring.split("&")){
            let [key, value = null] = pair.split("=");
            key = decodeURIComponent(key);
            if (value) {
                value = decodeURIComponent(value);
            }
            if (!(key in query)) {
                query[key] = value;
            } else if (Array.isArray(query[key])) {
                query[key].push(value);
            } else {
                query[key] = [
                    query[key],
                    value
                ];
            }
        }
    }
    return query;
}
exports.parseQueryString = parseQueryString;


/***/ }),

/***/ 98012:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.NODEJS_TIMEOUT_ERROR_CODES = exports.TRANSIENT_ERROR_STATUS_CODES = exports.TRANSIENT_ERROR_CODES = exports.THROTTLING_ERROR_CODES = exports.CLOCK_SKEW_ERROR_CODES = void 0;
exports.CLOCK_SKEW_ERROR_CODES = [
    "AuthFailure",
    "InvalidSignatureException",
    "RequestExpired",
    "RequestInTheFuture",
    "RequestTimeTooSkewed",
    "SignatureDoesNotMatch"
];
exports.THROTTLING_ERROR_CODES = [
    "BandwidthLimitExceeded",
    "EC2ThrottledException",
    "LimitExceededException",
    "PriorRequestNotComplete",
    "ProvisionedThroughputExceededException",
    "RequestLimitExceeded",
    "RequestThrottled",
    "RequestThrottledException",
    "SlowDown",
    "ThrottledException",
    "Throttling",
    "ThrottlingException",
    "TooManyRequestsException",
    "TransactionInProgressException"
];
exports.TRANSIENT_ERROR_CODES = [
    "TimeoutError",
    "RequestTimeout",
    "RequestTimeoutException"
];
exports.TRANSIENT_ERROR_STATUS_CODES = [
    500,
    502,
    503,
    504
];
exports.NODEJS_TIMEOUT_ERROR_CODES = [
    "ECONNRESET",
    "ECONNREFUSED",
    "EPIPE",
    "ETIMEDOUT"
];


/***/ }),

/***/ 82041:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.isServerError = exports.isTransientError = exports.isThrottlingError = exports.isClockSkewError = exports.isRetryableByTrait = void 0;
const constants_1 = __webpack_require__(98012);
const isRetryableByTrait = (error)=>error.$retryable !== undefined;
exports.isRetryableByTrait = isRetryableByTrait;
const isClockSkewError = (error)=>constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
exports.isClockSkewError = isClockSkewError;
const isThrottlingError = (error)=>{
    var _a, _b;
    return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
};
exports.isThrottlingError = isThrottlingError;
const isTransientError = (error)=>{
    var _a;
    return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes((error === null || error === void 0 ? void 0 : error.code) || "") || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
};
exports.isTransientError = isTransientError;
const isServerError = (error)=>{
    var _a;
    if (((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) !== undefined) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !(0, exports.isTransientError)(error)) {
            return true;
        }
        return false;
    }
    return false;
};
exports.isServerError = isServerError;


/***/ }),

/***/ 87353:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getConfigFilepath = exports.ENV_CONFIG_PATH = void 0;
const path_1 = __webpack_require__(71017);
const getHomeDir_1 = __webpack_require__(15850);
exports.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
const getConfigFilepath = ()=>process.env[exports.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "config");
exports.getConfigFilepath = getConfigFilepath;


/***/ }),

/***/ 89460:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getCredentialsFilepath = exports.ENV_CREDENTIALS_PATH = void 0;
const path_1 = __webpack_require__(71017);
const getHomeDir_1 = __webpack_require__(15850);
exports.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
const getCredentialsFilepath = ()=>process.env[exports.ENV_CREDENTIALS_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "credentials");
exports.getCredentialsFilepath = getCredentialsFilepath;


/***/ }),

/***/ 15850:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getHomeDir = void 0;
const os_1 = __webpack_require__(22037);
const path_1 = __webpack_require__(71017);
const getHomeDir = ()=>{
    const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
    if (HOME) return HOME;
    if (USERPROFILE) return USERPROFILE;
    if (HOMEPATH) return `${HOMEDRIVE}${HOMEPATH}`;
    return (0, os_1.homedir)();
};
exports.getHomeDir = getHomeDir;


/***/ }),

/***/ 14712:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getProfileData = void 0;
const profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
const getProfileData = (data)=>Object.entries(data).filter(([key])=>profileKeyRegex.test(key)).reduce((acc, [key, value])=>({
            ...acc,
            [profileKeyRegex.exec(key)[2]]: value
        }), {
        ...data.default && {
            default: data.default
        }
    });
exports.getProfileData = getProfileData;


/***/ }),

/***/ 50298:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getProfileName = exports.DEFAULT_PROFILE = exports.ENV_PROFILE = void 0;
exports.ENV_PROFILE = "AWS_PROFILE";
exports.DEFAULT_PROFILE = "default";
const getProfileName = (init)=>init.profile || process.env[exports.ENV_PROFILE] || exports.DEFAULT_PROFILE;
exports.getProfileName = getProfileName;


/***/ }),

/***/ 16835:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getSSOTokenFilepath = void 0;
const crypto_1 = __webpack_require__(6113);
const path_1 = __webpack_require__(71017);
const getHomeDir_1 = __webpack_require__(15850);
const getSSOTokenFilepath = (id)=>{
    const hasher = (0, crypto_1.createHash)("sha1");
    const cacheName = hasher.update(id).digest("hex");
    return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
};
exports.getSSOTokenFilepath = getSSOTokenFilepath;


/***/ }),

/***/ 91651:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getSSOTokenFromFile = void 0;
const fs_1 = __webpack_require__(57147);
const getSSOTokenFilepath_1 = __webpack_require__(16835);
const { readFile } = fs_1.promises;
const getSSOTokenFromFile = async (id)=>{
    const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);
    const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
    return JSON.parse(ssoTokenText);
};
exports.getSSOTokenFromFile = getSSOTokenFromFile;


/***/ }),

/***/ 99285:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getSsoSessionData = void 0;
const ssoSessionKeyRegex = /^sso-session\s(["'])?([^\1]+)\1$/;
const getSsoSessionData = (data)=>Object.entries(data).filter(([key])=>ssoSessionKeyRegex.test(key)).reduce((acc, [key, value])=>({
            ...acc,
            [ssoSessionKeyRegex.exec(key)[2]]: value
        }), {});
exports.getSsoSessionData = getSsoSessionData;


/***/ }),

/***/ 28630:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(15850), exports);
tslib_1.__exportStar(__webpack_require__(50298), exports);
tslib_1.__exportStar(__webpack_require__(16835), exports);
tslib_1.__exportStar(__webpack_require__(91651), exports);
tslib_1.__exportStar(__webpack_require__(75689), exports);
tslib_1.__exportStar(__webpack_require__(2342), exports);
tslib_1.__exportStar(__webpack_require__(17828), exports);
tslib_1.__exportStar(__webpack_require__(66381), exports);


/***/ }),

/***/ 75689:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.loadSharedConfigFiles = void 0;
const getConfigFilepath_1 = __webpack_require__(87353);
const getCredentialsFilepath_1 = __webpack_require__(89460);
const getProfileData_1 = __webpack_require__(14712);
const parseIni_1 = __webpack_require__(96788);
const slurpFile_1 = __webpack_require__(23794);
const swallowError = ()=>({});
const loadSharedConfigFiles = async (init = {})=>{
    const { filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(), configFilepath = (0, getConfigFilepath_1.getConfigFilepath)() } = init;
    const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath, {
            ignoreCache: init.ignoreCache
        }).then(parseIni_1.parseIni).then(getProfileData_1.getProfileData).catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath, {
            ignoreCache: init.ignoreCache
        }).then(parseIni_1.parseIni).catch(swallowError)
    ]);
    return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
    };
};
exports.loadSharedConfigFiles = loadSharedConfigFiles;


/***/ }),

/***/ 2342:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.loadSsoSessionData = void 0;
const getConfigFilepath_1 = __webpack_require__(87353);
const getSsoSessionData_1 = __webpack_require__(99285);
const parseIni_1 = __webpack_require__(96788);
const slurpFile_1 = __webpack_require__(23794);
const swallowError = ()=>({});
const loadSsoSessionData = async (init = {})=>{
    var _a;
    return (0, slurpFile_1.slurpFile)((_a = init.configFilepath) !== null && _a !== void 0 ? _a : (0, getConfigFilepath_1.getConfigFilepath)()).then(parseIni_1.parseIni).then(getSsoSessionData_1.getSsoSessionData).catch(swallowError);
};
exports.loadSsoSessionData = loadSsoSessionData;


/***/ }),

/***/ 25233:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.mergeConfigFiles = void 0;
const mergeConfigFiles = (...files)=>{
    const merged = {};
    for (const file of files){
        for (const [key, values] of Object.entries(file)){
            if (merged[key] !== undefined) {
                Object.assign(merged[key], values);
            } else {
                merged[key] = values;
            }
        }
    }
    return merged;
};
exports.mergeConfigFiles = mergeConfigFiles;


/***/ }),

/***/ 96788:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.parseIni = void 0;
const profileNameBlockList = [
    "__proto__",
    "profile __proto__"
];
const parseIni = (iniData)=>{
    const map = {};
    let currentSection;
    for (let line of iniData.split(/\r?\n/)){
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === "[" && line[line.length - 1] === "]";
        if (isSection) {
            currentSection = line.substring(1, line.length - 1);
            if (profileNameBlockList.includes(currentSection)) {
                throw new Error(`Found invalid profile name "${currentSection}"`);
            }
        } else if (currentSection) {
            const indexOfEqualsSign = line.indexOf("=");
            const start = 0;
            const end = line.length - 1;
            const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
            if (isAssignment) {
                const [name, value] = [
                    line.substring(0, indexOfEqualsSign).trim(),
                    line.substring(indexOfEqualsSign + 1).trim()
                ];
                map[currentSection] = map[currentSection] || {};
                map[currentSection][name] = value;
            }
        }
    }
    return map;
};
exports.parseIni = parseIni;


/***/ }),

/***/ 17828:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.parseKnownFiles = void 0;
const loadSharedConfigFiles_1 = __webpack_require__(75689);
const mergeConfigFiles_1 = __webpack_require__(25233);
const parseKnownFiles = async (init)=>{
    const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
    return (0, mergeConfigFiles_1.mergeConfigFiles)(parsedFiles.configFile, parsedFiles.credentialsFile);
};
exports.parseKnownFiles = parseKnownFiles;


/***/ }),

/***/ 23794:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.slurpFile = void 0;
const fs_1 = __webpack_require__(57147);
const { readFile } = fs_1.promises;
const filePromisesHash = {};
const slurpFile = (path, options)=>{
    if (!filePromisesHash[path] || (options === null || options === void 0 ? void 0 : options.ignoreCache)) {
        filePromisesHash[path] = readFile(path, "utf8");
    }
    return filePromisesHash[path];
};
exports.slurpFile = slurpFile;


/***/ }),

/***/ 66381:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 93870:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SignatureV4 = void 0;
const eventstream_codec_1 = __webpack_require__(5782);
const util_hex_encoding_1 = __webpack_require__(57005);
const util_middleware_1 = __webpack_require__(49729);
const util_utf8_1 = __webpack_require__(50170);
const constants_1 = __webpack_require__(87113);
const credentialDerivation_1 = __webpack_require__(23171);
const getCanonicalHeaders_1 = __webpack_require__(33792);
const getCanonicalQuery_1 = __webpack_require__(47516);
const getPayloadHash_1 = __webpack_require__(40221);
const headerUtil_1 = __webpack_require__(85934);
const moveHeadersToQuery_1 = __webpack_require__(29379);
const prepareRequest_1 = __webpack_require__(61759);
const utilDate_1 = __webpack_require__(38181);
class SignatureV4 {
    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }){
        this.headerMarshaller = new eventstream_codec_1.HeaderMarshaller(util_utf8_1.toUtf8, util_utf8_1.fromUtf8);
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(credentials);
    }
    async presign(originalRequest, options = {}) {
        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
            return Promise.reject("Signature version 4 presigned URLs" + " must have an expiration date less than one week in" + " the future");
        }
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)((0, prepareRequest_1.prepareRequest)(originalRequest), {
            unhoistableHeaders
        });
        if (credentials.sessionToken) {
            request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0, getPayloadHash_1.getPayloadHash)(originalRequest, this.sha256)));
        return request;
    }
    async sign(toSign, options) {
        if (typeof toSign === "string") {
            return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
            return this.signEvent(toSign, options);
        } else if (toSign.message) {
            return this.signMessage(toSign, options);
        } else {
            return this.signRequest(toSign, options);
        }
    }
    async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)({
            headers: {},
            body: payload
        }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(await hash.digest());
        const stringToSign = [
            constants_1.EVENT_ALGORITHM_IDENTIFIER,
            longDate,
            scope,
            priorSignature,
            hashedHeaders,
            hashedPayload
        ].join("\n");
        return this.signString(stringToSign, {
            signingDate,
            signingRegion: region,
            signingService
        });
    }
    async signMessage(signableMessage, { signingDate = new Date(), signingRegion, signingService }) {
        const promise = this.signEvent({
            headers: this.headerMarshaller.format(signableMessage.message.headers),
            payload: signableMessage.message.body
        }, {
            signingDate,
            signingRegion,
            signingService,
            priorSignature: signableMessage.priorSignature
        });
        return promise.then((signature)=>{
            return {
                message: signableMessage.message,
                signature
            };
        });
    }
    async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
    }
    async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
            request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(request, this.sha256);
        if (!(0, headerUtil_1.hasHeader)(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
            request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} ` + `Credential=${credentials.accessKeyId}/${scope}, ` + `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` + `Signature=${signature}`;
        return request;
    }
    createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name)=>`${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
    }
    async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update((0, util_utf8_1.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
    }
    getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
            const normalizedPathSegments = [];
            for (const pathSegment of path.split("/")){
                if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0) continue;
                if (pathSegment === ".") continue;
                if (pathSegment === "..") {
                    normalizedPathSegments.pop();
                } else {
                    normalizedPathSegments.push(pathSegment);
                }
            }
            const normalizedPath = `${(path === null || path === void 0 ? void 0 : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith("/")) ? "/" : ""}`;
            const doubleEncoded = encodeURIComponent(normalizedPath);
            return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
    }
    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
    }
    getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
    }
    validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
            throw new Error("Resolved credential object is not valid");
        }
    }
}
exports.SignatureV4 = SignatureV4;
const formatDate = (now)=>{
    const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, "");
    return {
        longDate,
        shortDate: longDate.slice(0, 8)
    };
};
const getCanonicalHeaderList = (headers)=>Object.keys(headers).sort().join(";");


/***/ }),

/***/ 75725:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.cloneQuery = exports.cloneRequest = void 0;
const cloneRequest = ({ headers, query, ...rest })=>({
        ...rest,
        headers: {
            ...headers
        },
        query: query ? (0, exports.cloneQuery)(query) : undefined
    });
exports.cloneRequest = cloneRequest;
const cloneQuery = (query)=>Object.keys(query).reduce((carry, paramName)=>{
        const param = query[paramName];
        return {
            ...carry,
            [paramName]: Array.isArray(param) ? [
                ...param
            ] : param
        };
    }, {});
exports.cloneQuery = cloneQuery;


/***/ }),

/***/ 87113:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.MAX_PRESIGNED_TTL = exports.KEY_TYPE_IDENTIFIER = exports.MAX_CACHE_SIZE = exports.UNSIGNED_PAYLOAD = exports.EVENT_ALGORITHM_IDENTIFIER = exports.ALGORITHM_IDENTIFIER_V4A = exports.ALGORITHM_IDENTIFIER = exports.UNSIGNABLE_PATTERNS = exports.SEC_HEADER_PATTERN = exports.PROXY_HEADER_PATTERN = exports.ALWAYS_UNSIGNABLE_HEADERS = exports.HOST_HEADER = exports.TOKEN_HEADER = exports.SHA256_HEADER = exports.SIGNATURE_HEADER = exports.GENERATED_HEADERS = exports.DATE_HEADER = exports.AMZ_DATE_HEADER = exports.AUTH_HEADER = exports.REGION_SET_PARAM = exports.TOKEN_QUERY_PARAM = exports.SIGNATURE_QUERY_PARAM = exports.EXPIRES_QUERY_PARAM = exports.SIGNED_HEADERS_QUERY_PARAM = exports.AMZ_DATE_QUERY_PARAM = exports.CREDENTIAL_QUERY_PARAM = exports.ALGORITHM_QUERY_PARAM = void 0;
exports.ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
exports.CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
exports.AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
exports.SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
exports.EXPIRES_QUERY_PARAM = "X-Amz-Expires";
exports.SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
exports.TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
exports.REGION_SET_PARAM = "X-Amz-Region-Set";
exports.AUTH_HEADER = "authorization";
exports.AMZ_DATE_HEADER = exports.AMZ_DATE_QUERY_PARAM.toLowerCase();
exports.DATE_HEADER = "date";
exports.GENERATED_HEADERS = [
    exports.AUTH_HEADER,
    exports.AMZ_DATE_HEADER,
    exports.DATE_HEADER
];
exports.SIGNATURE_HEADER = exports.SIGNATURE_QUERY_PARAM.toLowerCase();
exports.SHA256_HEADER = "x-amz-content-sha256";
exports.TOKEN_HEADER = exports.TOKEN_QUERY_PARAM.toLowerCase();
exports.HOST_HEADER = "host";
exports.ALWAYS_UNSIGNABLE_HEADERS = {
    authorization: true,
    "cache-control": true,
    connection: true,
    expect: true,
    from: true,
    "keep-alive": true,
    "max-forwards": true,
    pragma: true,
    referer: true,
    te: true,
    trailer: true,
    "transfer-encoding": true,
    upgrade: true,
    "user-agent": true,
    "x-amzn-trace-id": true
};
exports.PROXY_HEADER_PATTERN = /^proxy-/;
exports.SEC_HEADER_PATTERN = /^sec-/;
exports.UNSIGNABLE_PATTERNS = [
    /^proxy-/i,
    /^sec-/i
];
exports.ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
exports.ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
exports.EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
exports.UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
exports.MAX_CACHE_SIZE = 50;
exports.KEY_TYPE_IDENTIFIER = "aws4_request";
exports.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;


/***/ }),

/***/ 23171:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.clearCredentialCache = exports.getSigningKey = exports.createScope = void 0;
const util_hex_encoding_1 = __webpack_require__(57005);
const util_utf8_1 = __webpack_require__(50170);
const constants_1 = __webpack_require__(87113);
const signingKeyCache = {};
const cacheQueue = [];
const createScope = (shortDate, region, service)=>`${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
exports.createScope = createScope;
const getSigningKey = async (sha256Constructor, credentials, shortDate, region, service)=>{
    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
    const cacheKey = `${shortDate}:${region}:${service}:${(0, util_hex_encoding_1.toHex)(credsHash)}:${credentials.sessionToken}`;
    if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
    }
    cacheQueue.push(cacheKey);
    while(cacheQueue.length > constants_1.MAX_CACHE_SIZE){
        delete signingKeyCache[cacheQueue.shift()];
    }
    let key = `AWS4${credentials.secretAccessKey}`;
    for (const signable of [
        shortDate,
        region,
        service,
        constants_1.KEY_TYPE_IDENTIFIER
    ]){
        key = await hmac(sha256Constructor, key, signable);
    }
    return signingKeyCache[cacheKey] = key;
};
exports.getSigningKey = getSigningKey;
const clearCredentialCache = ()=>{
    cacheQueue.length = 0;
    Object.keys(signingKeyCache).forEach((cacheKey)=>{
        delete signingKeyCache[cacheKey];
    });
};
exports.clearCredentialCache = clearCredentialCache;
const hmac = (ctor, secret, data)=>{
    const hash = new ctor(secret);
    hash.update((0, util_utf8_1.toUint8Array)(data));
    return hash.digest();
};


/***/ }),

/***/ 33792:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getCanonicalHeaders = void 0;
const constants_1 = __webpack_require__(87113);
const getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders)=>{
    const canonical = {};
    for (const headerName of Object.keys(headers).sort()){
        if (headers[headerName] == undefined) {
            continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) || constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
            if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
                continue;
            }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
    return canonical;
};
exports.getCanonicalHeaders = getCanonicalHeaders;


/***/ }),

/***/ 47516:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getCanonicalQuery = void 0;
const util_uri_escape_1 = __webpack_require__(25262);
const constants_1 = __webpack_require__(87113);
const getCanonicalQuery = ({ query = {} })=>{
    const keys = [];
    const serialized = {};
    for (const key of Object.keys(query).sort()){
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
            continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
            serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
            serialized[key] = value.slice(0).sort().reduce((encoded, value)=>encoded.concat([
                    `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value)}`
                ]), []).join("&");
        }
    }
    return keys.map((key)=>serialized[key]).filter((serialized)=>serialized).join("&");
};
exports.getCanonicalQuery = getCanonicalQuery;


/***/ }),

/***/ 40221:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getPayloadHash = void 0;
const is_array_buffer_1 = __webpack_require__(72938);
const util_hex_encoding_1 = __webpack_require__(57005);
const util_utf8_1 = __webpack_require__(50170);
const constants_1 = __webpack_require__(87113);
const getPayloadHash = async ({ headers, body }, hashConstructor)=>{
    for (const headerName of Object.keys(headers)){
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
            return headers[headerName];
        }
    }
    if (body == undefined) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
    } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, is_array_buffer_1.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, util_utf8_1.toUint8Array)(body));
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
    }
    return constants_1.UNSIGNED_PAYLOAD;
};
exports.getPayloadHash = getPayloadHash;


/***/ }),

/***/ 85934:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.deleteHeader = exports.getHeaderValue = exports.hasHeader = void 0;
const hasHeader = (soughtHeader, headers)=>{
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)){
        if (soughtHeader === headerName.toLowerCase()) {
            return true;
        }
    }
    return false;
};
exports.hasHeader = hasHeader;
const getHeaderValue = (soughtHeader, headers)=>{
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)){
        if (soughtHeader === headerName.toLowerCase()) {
            return headers[headerName];
        }
    }
    return undefined;
};
exports.getHeaderValue = getHeaderValue;
const deleteHeader = (soughtHeader, headers)=>{
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)){
        if (soughtHeader === headerName.toLowerCase()) {
            delete headers[headerName];
        }
    }
};
exports.deleteHeader = deleteHeader;


/***/ }),

/***/ 70279:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.prepareRequest = exports.moveHeadersToQuery = exports.getPayloadHash = exports.getCanonicalQuery = exports.getCanonicalHeaders = void 0;
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(93870), exports);
var getCanonicalHeaders_1 = __webpack_require__(33792);
Object.defineProperty(exports, "getCanonicalHeaders", ({
    enumerable: true,
    get: function() {
        return getCanonicalHeaders_1.getCanonicalHeaders;
    }
}));
var getCanonicalQuery_1 = __webpack_require__(47516);
Object.defineProperty(exports, "getCanonicalQuery", ({
    enumerable: true,
    get: function() {
        return getCanonicalQuery_1.getCanonicalQuery;
    }
}));
var getPayloadHash_1 = __webpack_require__(40221);
Object.defineProperty(exports, "getPayloadHash", ({
    enumerable: true,
    get: function() {
        return getPayloadHash_1.getPayloadHash;
    }
}));
var moveHeadersToQuery_1 = __webpack_require__(29379);
Object.defineProperty(exports, "moveHeadersToQuery", ({
    enumerable: true,
    get: function() {
        return moveHeadersToQuery_1.moveHeadersToQuery;
    }
}));
var prepareRequest_1 = __webpack_require__(61759);
Object.defineProperty(exports, "prepareRequest", ({
    enumerable: true,
    get: function() {
        return prepareRequest_1.prepareRequest;
    }
}));
tslib_1.__exportStar(__webpack_require__(23171), exports);


/***/ }),

/***/ 29379:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.moveHeadersToQuery = void 0;
const cloneRequest_1 = __webpack_require__(75725);
const moveHeadersToQuery = (request, options = {})=>{
    var _a;
    const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
    for (const name of Object.keys(headers)){
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))) {
            query[name] = headers[name];
            delete headers[name];
        }
    }
    return {
        ...request,
        headers,
        query
    };
};
exports.moveHeadersToQuery = moveHeadersToQuery;


/***/ }),

/***/ 61759:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.prepareRequest = void 0;
const cloneRequest_1 = __webpack_require__(75725);
const constants_1 = __webpack_require__(87113);
const prepareRequest = (request)=>{
    request = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
    for (const headerName of Object.keys(request.headers)){
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
            delete request.headers[headerName];
        }
    }
    return request;
};
exports.prepareRequest = prepareRequest;


/***/ }),

/***/ 38181:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.toDate = exports.iso8601 = void 0;
const iso8601 = (time)=>(0, exports.toDate)(time).toISOString().replace(/\.\d{3}Z$/, "Z");
exports.iso8601 = iso8601;
const toDate = (time)=>{
    if (typeof time === "number") {
        return new Date(time * 1000);
    }
    if (typeof time === "string") {
        if (Number(time)) {
            return new Date(Number(time) * 1000);
        }
        return new Date(time);
    }
    return time;
};
exports.toDate = toDate;


/***/ }),

/***/ 9441:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.NoOpLogger = void 0;
class NoOpLogger {
    trace() {}
    debug() {}
    info() {}
    warn() {}
    error() {}
}
exports.NoOpLogger = NoOpLogger;


/***/ }),

/***/ 45891:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Client = void 0;
const middleware_stack_1 = __webpack_require__(56757);
class Client {
    constructor(config){
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
        this.config = config;
    }
    send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : undefined;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
            handler(command).then((result)=>callback(null, result.output), (err)=>callback(err)).catch(()=>{});
        } else {
            return handler(command).then((result)=>result.output);
        }
    }
    destroy() {
        if (this.config.requestHandler.destroy) this.config.requestHandler.destroy();
    }
}
exports.Client = Client;


/***/ }),

/***/ 65660:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.collectBody = void 0;
const util_stream_1 = __webpack_require__(93829);
const collectBody = async (streamBody = new Uint8Array(), context)=>{
    if (streamBody instanceof Uint8Array) {
        return util_stream_1.Uint8ArrayBlobAdapter.mutate(streamBody);
    }
    if (!streamBody) {
        return util_stream_1.Uint8ArrayBlobAdapter.mutate(new Uint8Array());
    }
    const fromContext = context.streamCollector(streamBody);
    return util_stream_1.Uint8ArrayBlobAdapter.mutate(await fromContext);
};
exports.collectBody = collectBody;


/***/ }),

/***/ 99711:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Command = void 0;
const middleware_stack_1 = __webpack_require__(56757);
class Command {
    constructor(){
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
    }
}
exports.Command = Command;


/***/ }),

/***/ 61151:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SENSITIVE_STRING = void 0;
exports.SENSITIVE_STRING = "***SensitiveInformation***";


/***/ }),

/***/ 64600:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.createAggregatedClient = void 0;
const createAggregatedClient = (commands, Client)=>{
    for (const command of Object.keys(commands)){
        const CommandCtor = commands[command];
        const methodImpl = async function(args, optionsOrCb, cb) {
            const command = new CommandCtor(args);
            if (typeof optionsOrCb === "function") {
                this.send(command, optionsOrCb);
            } else if (typeof cb === "function") {
                if (typeof optionsOrCb !== "object") throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
                this.send(command, optionsOrCb || {}, cb);
            } else {
                return this.send(command, optionsOrCb);
            }
        };
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client.prototype[methodName] = methodImpl;
    }
};
exports.createAggregatedClient = createAggregatedClient;


/***/ }),

/***/ 56217:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.parseEpochTimestamp = exports.parseRfc7231DateTime = exports.parseRfc3339DateTimeWithOffset = exports.parseRfc3339DateTime = exports.dateToUtcString = void 0;
const parse_utils_1 = __webpack_require__(38101);
const DAYS = [
    "Sun",
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat"
];
const MONTHS = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
function dateToUtcString(date) {
    const year = date.getUTCFullYear();
    const month = date.getUTCMonth();
    const dayOfWeek = date.getUTCDay();
    const dayOfMonthInt = date.getUTCDate();
    const hoursInt = date.getUTCHours();
    const minutesInt = date.getUTCMinutes();
    const secondsInt = date.getUTCSeconds();
    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
    return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
}
exports.dateToUtcString = dateToUtcString;
const RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
const parseRfc3339DateTime = (value)=>{
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
    }
    const match = RFC3339.exec(value);
    if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
    }
    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
    const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
    const month = parseDateValue(monthStr, "month", 1, 12);
    const day = parseDateValue(dayStr, "day", 1, 31);
    return buildDate(year, month, day, {
        hours,
        minutes,
        seconds,
        fractionalMilliseconds
    });
};
exports.parseRfc3339DateTime = parseRfc3339DateTime;
const RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
const parseRfc3339DateTimeWithOffset = (value)=>{
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
    }
    const match = RFC3339_WITH_OFFSET.exec(value);
    if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
    }
    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
    const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
    const month = parseDateValue(monthStr, "month", 1, 12);
    const day = parseDateValue(dayStr, "day", 1, 31);
    const date = buildDate(year, month, day, {
        hours,
        minutes,
        seconds,
        fractionalMilliseconds
    });
    if (offsetStr.toUpperCase() != "Z") {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
    }
    return date;
};
exports.parseRfc3339DateTimeWithOffset = parseRfc3339DateTimeWithOffset;
const IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
const RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
const ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
const parseRfc7231DateTime = (value)=>{
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
    }
    let match = IMF_FIXDATE.exec(value);
    if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds
        });
    }
    match = RFC_850_DATE.exec(value);
    if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds
        }));
    }
    match = ASC_TIME.exec(value);
    if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds
        });
    }
    throw new TypeError("Invalid RFC-7231 date-time value");
};
exports.parseRfc7231DateTime = parseRfc7231DateTime;
const parseEpochTimestamp = (value)=>{
    if (value === null || value === undefined) {
        return undefined;
    }
    let valueAsDouble;
    if (typeof value === "number") {
        valueAsDouble = value;
    } else if (typeof value === "string") {
        valueAsDouble = (0, parse_utils_1.strictParseDouble)(value);
    } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
    }
    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
    }
    return new Date(Math.round(valueAsDouble * 1000));
};
exports.parseEpochTimestamp = parseEpochTimestamp;
const buildDate = (year, month, day, time)=>{
    const adjustedMonth = month - 1;
    validateDayOfMonth(year, adjustedMonth, day);
    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
};
const parseTwoDigitYear = (value)=>{
    const thisYear = new Date().getUTCFullYear();
    const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(value));
    if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
    }
    return valueInThisCentury;
};
const FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;
const adjustRfc850Year = (input)=>{
    if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
    }
    return input;
};
const parseMonthByShortName = (value)=>{
    const monthIdx = MONTHS.indexOf(value);
    if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
    }
    return monthIdx + 1;
};
const DAYS_IN_MONTH = [
    31,
    28,
    31,
    30,
    31,
    30,
    31,
    31,
    30,
    31,
    30,
    31
];
const validateDayOfMonth = (year, month, day)=>{
    let maxDays = DAYS_IN_MONTH[month];
    if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
    }
    if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
    }
};
const isLeapYear = (year)=>{
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
};
const parseDateValue = (value, type, lower, upper)=>{
    const dateVal = (0, parse_utils_1.strictParseByte)(stripLeadingZeroes(value));
    if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
    }
    return dateVal;
};
const parseMilliseconds = (value)=>{
    if (value === null || value === undefined) {
        return 0;
    }
    return (0, parse_utils_1.strictParseFloat32)("0." + value) * 1000;
};
const parseOffsetToMilliseconds = (value)=>{
    const directionStr = value[0];
    let direction = 1;
    if (directionStr == "+") {
        direction = 1;
    } else if (directionStr == "-") {
        direction = -1;
    } else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
    }
    const hour = Number(value.substring(1, 3));
    const minute = Number(value.substring(4, 6));
    return direction * (hour * 60 + minute) * 60 * 1000;
};
const stripLeadingZeroes = (value)=>{
    let idx = 0;
    while(idx < value.length - 1 && value.charAt(idx) === "0"){
        idx++;
    }
    if (idx === 0) {
        return value;
    }
    return value.slice(idx);
};


/***/ }),

/***/ 29442:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.withBaseException = exports.throwDefaultError = void 0;
const exceptions_1 = __webpack_require__(9584);
const throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode })=>{
    const $metadata = deserializeMetadata(output);
    const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
    const response = new exceptionCtor({
        name: (parsedBody === null || parsedBody === void 0 ? void 0 : parsedBody.code) || (parsedBody === null || parsedBody === void 0 ? void 0 : parsedBody.Code) || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
    });
    throw (0, exceptions_1.decorateServiceException)(response, parsedBody);
};
exports.throwDefaultError = throwDefaultError;
const withBaseException = (ExceptionCtor)=>{
    return ({ output, parsedBody, errorCode })=>{
        (0, exports.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: ExceptionCtor,
            errorCode
        });
    };
};
exports.withBaseException = withBaseException;
const deserializeMetadata = (output)=>{
    var _a, _b;
    return {
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"]) !== null && _b !== void 0 ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    };
};


/***/ }),

/***/ 96186:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.loadConfigsForDefaultMode = void 0;
const loadConfigsForDefaultMode = (mode)=>{
    switch(mode){
        case "standard":
            return {
                retryMode: "standard",
                connectionTimeout: 3100
            };
        case "in-region":
            return {
                retryMode: "standard",
                connectionTimeout: 1100
            };
        case "cross-region":
            return {
                retryMode: "standard",
                connectionTimeout: 3100
            };
        case "mobile":
            return {
                retryMode: "standard",
                connectionTimeout: 30000
            };
        default:
            return {};
    }
};
exports.loadConfigsForDefaultMode = loadConfigsForDefaultMode;


/***/ }),

/***/ 56126:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.emitWarningIfUnsupportedVersion = void 0;
let warningEmitted = false;
const emitWarningIfUnsupportedVersion = (version)=>{
    if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 14) {
        warningEmitted = true;
    }
};
exports.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;


/***/ }),

/***/ 9584:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.decorateServiceException = exports.ServiceException = void 0;
class ServiceException extends Error {
    constructor(options){
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
    }
}
exports.ServiceException = ServiceException;
const decorateServiceException = (exception, additions = {})=>{
    Object.entries(additions).filter(([, v])=>v !== undefined).forEach(([k, v])=>{
        if (exception[k] == undefined || exception[k] === "") {
            exception[k] = v;
        }
    });
    const message = exception.message || exception.Message || "UnknownError";
    exception.message = message;
    delete exception.Message;
    return exception;
};
exports.decorateServiceException = decorateServiceException;


/***/ }),

/***/ 16848:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.extendedEncodeURIComponent = void 0;
function extendedEncodeURIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
    });
}
exports.extendedEncodeURIComponent = extendedEncodeURIComponent;


/***/ }),

/***/ 57221:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getArrayIfSingleItem = void 0;
const getArrayIfSingleItem = (mayBeArray)=>Array.isArray(mayBeArray) ? mayBeArray : [
        mayBeArray
    ];
exports.getArrayIfSingleItem = getArrayIfSingleItem;


/***/ }),

/***/ 64181:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getValueFromTextNode = void 0;
const getValueFromTextNode = (obj)=>{
    const textNodeName = "#text";
    for(const key in obj){
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== undefined) {
            obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
            obj[key] = (0, exports.getValueFromTextNode)(obj[key]);
        }
    }
    return obj;
};
exports.getValueFromTextNode = getValueFromTextNode;


/***/ }),

/***/ 69775:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(9441), exports);
tslib_1.__exportStar(__webpack_require__(45891), exports);
tslib_1.__exportStar(__webpack_require__(65660), exports);
tslib_1.__exportStar(__webpack_require__(99711), exports);
tslib_1.__exportStar(__webpack_require__(61151), exports);
tslib_1.__exportStar(__webpack_require__(64600), exports);
tslib_1.__exportStar(__webpack_require__(56217), exports);
tslib_1.__exportStar(__webpack_require__(29442), exports);
tslib_1.__exportStar(__webpack_require__(96186), exports);
tslib_1.__exportStar(__webpack_require__(56126), exports);
tslib_1.__exportStar(__webpack_require__(9584), exports);
tslib_1.__exportStar(__webpack_require__(16848), exports);
tslib_1.__exportStar(__webpack_require__(57221), exports);
tslib_1.__exportStar(__webpack_require__(64181), exports);
tslib_1.__exportStar(__webpack_require__(1626), exports);
tslib_1.__exportStar(__webpack_require__(77259), exports);
tslib_1.__exportStar(__webpack_require__(38101), exports);
tslib_1.__exportStar(__webpack_require__(44498), exports);
tslib_1.__exportStar(__webpack_require__(99151), exports);
tslib_1.__exportStar(__webpack_require__(61340), exports);
tslib_1.__exportStar(__webpack_require__(79160), exports);


/***/ }),

/***/ 1626:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.LazyJsonString = exports.StringWrapper = void 0;
const StringWrapper = function() {
    const Class = Object.getPrototypeOf(this).constructor;
    const Constructor = Function.bind.apply(String, [
        null,
        ...arguments
    ]);
    const instance = new Constructor();
    Object.setPrototypeOf(instance, Class.prototype);
    return instance;
};
exports.StringWrapper = StringWrapper;
exports.StringWrapper.prototype = Object.create(String.prototype, {
    constructor: {
        value: exports.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
    }
});
Object.setPrototypeOf(exports.StringWrapper, String);
class LazyJsonString extends exports.StringWrapper {
    deserializeJSON() {
        return JSON.parse(super.toString());
    }
    toJSON() {
        return super.toString();
    }
    static fromObject(object) {
        if (object instanceof LazyJsonString) {
            return object;
        } else if (object instanceof String || typeof object === "string") {
            return new LazyJsonString(object);
        }
        return new LazyJsonString(JSON.stringify(object));
    }
}
exports.LazyJsonString = LazyJsonString;


/***/ }),

/***/ 77259:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.take = exports.convertMap = exports.map = void 0;
function map(arg0, arg1, arg2) {
    let target;
    let filter;
    let instructions;
    if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
    } else {
        target = arg0;
        if (typeof arg1 === "function") {
            filter = arg1;
            instructions = arg2;
            return mapWithFilter(target, filter, instructions);
        } else {
            instructions = arg1;
        }
    }
    for (const key of Object.keys(instructions)){
        if (!Array.isArray(instructions[key])) {
            target[key] = instructions[key];
            continue;
        }
        applyInstruction(target, null, instructions, key);
    }
    return target;
}
exports.map = map;
const convertMap = (target)=>{
    const output = {};
    for (const [k, v] of Object.entries(target || {})){
        output[k] = [
            ,
            v
        ];
    }
    return output;
};
exports.convertMap = convertMap;
const take = (source, instructions)=>{
    const out = {};
    for(const key in instructions){
        applyInstruction(out, source, instructions, key);
    }
    return out;
};
exports.take = take;
const mapWithFilter = (target, filter, instructions)=>{
    return map(target, Object.entries(instructions).reduce((_instructions, [key, value])=>{
        if (Array.isArray(value)) {
            _instructions[key] = value;
        } else {
            if (typeof value === "function") {
                _instructions[key] = [
                    filter,
                    value()
                ];
            } else {
                _instructions[key] = [
                    filter,
                    value
                ];
            }
        }
        return _instructions;
    }, {}));
};
const applyInstruction = (target, source, instructions, targetKey)=>{
    if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") {
            instruction = [
                ,
                instruction
            ];
        }
        const [filter = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if (typeof filter === "function" && filter(source[sourceKey]) || typeof filter !== "function" && !!filter) {
            target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
    }
    let [filter, value] = instructions[targetKey];
    if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === undefined && (_value = value()) != null;
        const customFilterPassed = typeof filter === "function" && !!filter(void 0) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed) {
            target[targetKey] = _value;
        } else if (customFilterPassed) {
            target[targetKey] = value();
        }
    } else {
        const defaultFilterPassed = filter === undefined && value != null;
        const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed || customFilterPassed) {
            target[targetKey] = value;
        }
    }
};
const nonNullish = (_)=>_ != null;
const pass = (_)=>_;


/***/ }),

/***/ 38101:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.logger = exports.strictParseByte = exports.strictParseShort = exports.strictParseInt32 = exports.strictParseInt = exports.strictParseLong = exports.limitedParseFloat32 = exports.limitedParseFloat = exports.handleFloat = exports.limitedParseDouble = exports.strictParseFloat32 = exports.strictParseFloat = exports.strictParseDouble = exports.expectUnion = exports.expectString = exports.expectObject = exports.expectNonNull = exports.expectByte = exports.expectShort = exports.expectInt32 = exports.expectInt = exports.expectLong = exports.expectFloat32 = exports.expectNumber = exports.expectBoolean = exports.parseBoolean = void 0;
const parseBoolean = (value)=>{
    switch(value){
        case "true":
            return true;
        case "false":
            return false;
        default:
            throw new Error(`Unable to parse boolean value "${value}"`);
    }
};
exports.parseBoolean = parseBoolean;
const expectBoolean = (value)=>{
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value === "number") {
        if (value === 0 || value === 1) {
            exports.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
            return false;
        }
        if (value === 1) {
            return true;
        }
    }
    if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") {
            exports.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === "false") {
            return false;
        }
        if (lower === "true") {
            return true;
        }
    }
    if (typeof value === "boolean") {
        return value;
    }
    throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
};
exports.expectBoolean = expectBoolean;
const expectNumber = (value)=>{
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
            if (String(parsed) !== String(value)) {
                exports.logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
            }
            return parsed;
        }
    }
    if (typeof value === "number") {
        return value;
    }
    throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
};
exports.expectNumber = expectNumber;
const MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
const expectFloat32 = (value)=>{
    const expected = (0, exports.expectNumber)(value);
    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
            throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
    }
    return expected;
};
exports.expectFloat32 = expectFloat32;
const expectLong = (value)=>{
    if (value === null || value === undefined) {
        return undefined;
    }
    if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
    }
    throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
};
exports.expectLong = expectLong;
exports.expectInt = exports.expectLong;
const expectInt32 = (value)=>expectSizedInt(value, 32);
exports.expectInt32 = expectInt32;
const expectShort = (value)=>expectSizedInt(value, 16);
exports.expectShort = expectShort;
const expectByte = (value)=>expectSizedInt(value, 8);
exports.expectByte = expectByte;
const expectSizedInt = (value, size)=>{
    const expected = (0, exports.expectLong)(value);
    if (expected !== undefined && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
    }
    return expected;
};
const castInt = (value, size)=>{
    switch(size){
        case 32:
            return Int32Array.of(value)[0];
        case 16:
            return Int16Array.of(value)[0];
        case 8:
            return Int8Array.of(value)[0];
    }
};
const expectNonNull = (value, location)=>{
    if (value === null || value === undefined) {
        if (location) {
            throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
    }
    return value;
};
exports.expectNonNull = expectNonNull;
const expectObject = (value)=>{
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value === "object" && !Array.isArray(value)) {
        return value;
    }
    const receivedType = Array.isArray(value) ? "array" : typeof value;
    throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
};
exports.expectObject = expectObject;
const expectString = (value)=>{
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value === "string") {
        return value;
    }
    if ([
        "boolean",
        "number",
        "bigint"
    ].includes(typeof value)) {
        exports.logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
    }
    throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
};
exports.expectString = expectString;
const expectUnion = (value)=>{
    if (value === null || value === undefined) {
        return undefined;
    }
    const asObject = (0, exports.expectObject)(value);
    const setKeys = Object.entries(asObject).filter(([, v])=>v != null).map(([k])=>k);
    if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
    }
    if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
    }
    return asObject;
};
exports.expectUnion = expectUnion;
const strictParseDouble = (value)=>{
    if (typeof value == "string") {
        return (0, exports.expectNumber)(parseNumber(value));
    }
    return (0, exports.expectNumber)(value);
};
exports.strictParseDouble = strictParseDouble;
exports.strictParseFloat = exports.strictParseDouble;
const strictParseFloat32 = (value)=>{
    if (typeof value == "string") {
        return (0, exports.expectFloat32)(parseNumber(value));
    }
    return (0, exports.expectFloat32)(value);
};
exports.strictParseFloat32 = strictParseFloat32;
const NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
const parseNumber = (value)=>{
    const matches = value.match(NUMBER_REGEX);
    if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
    }
    return parseFloat(value);
};
const limitedParseDouble = (value)=>{
    if (typeof value == "string") {
        return parseFloatString(value);
    }
    return (0, exports.expectNumber)(value);
};
exports.limitedParseDouble = limitedParseDouble;
exports.handleFloat = exports.limitedParseDouble;
exports.limitedParseFloat = exports.limitedParseDouble;
const limitedParseFloat32 = (value)=>{
    if (typeof value == "string") {
        return parseFloatString(value);
    }
    return (0, exports.expectFloat32)(value);
};
exports.limitedParseFloat32 = limitedParseFloat32;
const parseFloatString = (value)=>{
    switch(value){
        case "NaN":
            return NaN;
        case "Infinity":
            return Infinity;
        case "-Infinity":
            return -Infinity;
        default:
            throw new Error(`Unable to parse float value: ${value}`);
    }
};
const strictParseLong = (value)=>{
    if (typeof value === "string") {
        return (0, exports.expectLong)(parseNumber(value));
    }
    return (0, exports.expectLong)(value);
};
exports.strictParseLong = strictParseLong;
exports.strictParseInt = exports.strictParseLong;
const strictParseInt32 = (value)=>{
    if (typeof value === "string") {
        return (0, exports.expectInt32)(parseNumber(value));
    }
    return (0, exports.expectInt32)(value);
};
exports.strictParseInt32 = strictParseInt32;
const strictParseShort = (value)=>{
    if (typeof value === "string") {
        return (0, exports.expectShort)(parseNumber(value));
    }
    return (0, exports.expectShort)(value);
};
exports.strictParseShort = strictParseShort;
const strictParseByte = (value)=>{
    if (typeof value === "string") {
        return (0, exports.expectByte)(parseNumber(value));
    }
    return (0, exports.expectByte)(value);
};
exports.strictParseByte = strictParseByte;
const stackTraceWarning = (message)=>{
    return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s)=>!s.includes("stackTraceWarning")).join("\n");
};
exports.logger = {
    warn: console.warn
};


/***/ }),

/***/ 44498:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolvedPath = void 0;
const extended_encode_uri_component_1 = __webpack_require__(16848);
const resolvedPath = (resolvedPath, input, memberName, labelValueProvider, uriLabel, isGreedyLabel)=>{
    if (input != null && input[memberName] !== undefined) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath = resolvedPath.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment)=>(0, extended_encode_uri_component_1.extendedEncodeURIComponent)(segment)).join("/") : (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(labelValue));
    } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
    }
    return resolvedPath;
};
exports.resolvedPath = resolvedPath;


/***/ }),

/***/ 99151:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.serializeFloat = void 0;
const serializeFloat = (value)=>{
    if (value !== value) {
        return "NaN";
    }
    switch(value){
        case Infinity:
            return "Infinity";
        case -Infinity:
            return "-Infinity";
        default:
            return value;
    }
};
exports.serializeFloat = serializeFloat;


/***/ }),

/***/ 61340:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports._json = void 0;
const _json = (obj)=>{
    if (obj == null) {
        return {};
    }
    if (Array.isArray(obj)) {
        return obj.filter((_)=>_ != null);
    }
    if (typeof obj === "object") {
        const target = {};
        for (const key of Object.keys(obj)){
            if (obj[key] == null) {
                continue;
            }
            target[key] = (0, exports._json)(obj[key]);
        }
        return target;
    }
    return obj;
};
exports._json = _json;


/***/ }),

/***/ 79160:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.splitEvery = void 0;
function splitEvery(value, delimiter, numDelimiters) {
    if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
    }
    const segments = value.split(delimiter);
    if (numDelimiters === 1) {
        return segments;
    }
    const compoundSegments = [];
    let currentSegment = "";
    for(let i = 0; i < segments.length; i++){
        if (currentSegment === "") {
            currentSegment = segments[i];
        } else {
            currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
            compoundSegments.push(currentSegment);
            currentSegment = "";
        }
    }
    if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
    }
    return compoundSegments;
}
exports.splitEvery = splitEvery;


/***/ }),

/***/ 37309:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 10390:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.HttpAuthLocation = void 0;
var HttpAuthLocation;
(function(HttpAuthLocation) {
    HttpAuthLocation["HEADER"] = "header";
    HttpAuthLocation["QUERY"] = "query";
})(HttpAuthLocation = exports.HttpAuthLocation || (exports.HttpAuthLocation = {}));


/***/ }),

/***/ 54910:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 99669:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 81210:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 36059:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 37202:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(36059), exports);
tslib_1.__exportStar(__webpack_require__(98412), exports);
tslib_1.__exportStar(__webpack_require__(44478), exports);


/***/ }),

/***/ 98412:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 44478:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 62925:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 19834:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 48872:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.EndpointURLScheme = void 0;
var EndpointURLScheme;
(function(EndpointURLScheme) {
    EndpointURLScheme["HTTP"] = "http";
    EndpointURLScheme["HTTPS"] = "https";
})(EndpointURLScheme = exports.EndpointURLScheme || (exports.EndpointURLScheme = {}));


/***/ }),

/***/ 66434:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 74710:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 4827:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 47488:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 61757:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(66434), exports);
tslib_1.__exportStar(__webpack_require__(74710), exports);
tslib_1.__exportStar(__webpack_require__(4827), exports);
tslib_1.__exportStar(__webpack_require__(6953), exports);
tslib_1.__exportStar(__webpack_require__(47488), exports);


/***/ }),

/***/ 6953:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 48205:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 80705:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.FieldPosition = void 0;
var FieldPosition;
(function(FieldPosition) {
    FieldPosition[FieldPosition["HEADER"] = 0] = "HEADER";
    FieldPosition[FieldPosition["TRAILER"] = 1] = "TRAILER";
})(FieldPosition = exports.FieldPosition || (exports.FieldPosition = {}));


/***/ }),

/***/ 78678:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 9948:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 93757:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(78678), exports);
tslib_1.__exportStar(__webpack_require__(9948), exports);


/***/ }),

/***/ 99705:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(37309), exports);
tslib_1.__exportStar(__webpack_require__(10390), exports);
tslib_1.__exportStar(__webpack_require__(54910), exports);
tslib_1.__exportStar(__webpack_require__(99669), exports);
tslib_1.__exportStar(__webpack_require__(81210), exports);
tslib_1.__exportStar(__webpack_require__(37202), exports);
tslib_1.__exportStar(__webpack_require__(62925), exports);
tslib_1.__exportStar(__webpack_require__(19834), exports);
tslib_1.__exportStar(__webpack_require__(48872), exports);
tslib_1.__exportStar(__webpack_require__(61757), exports);
tslib_1.__exportStar(__webpack_require__(48205), exports);
tslib_1.__exportStar(__webpack_require__(80705), exports);
tslib_1.__exportStar(__webpack_require__(93757), exports);
tslib_1.__exportStar(__webpack_require__(55058), exports);
tslib_1.__exportStar(__webpack_require__(74184), exports);
tslib_1.__exportStar(__webpack_require__(52237), exports);
tslib_1.__exportStar(__webpack_require__(94758), exports);
tslib_1.__exportStar(__webpack_require__(1579), exports);
tslib_1.__exportStar(__webpack_require__(58182), exports);
tslib_1.__exportStar(__webpack_require__(24979), exports);
tslib_1.__exportStar(__webpack_require__(61302), exports);
tslib_1.__exportStar(__webpack_require__(35297), exports);
tslib_1.__exportStar(__webpack_require__(5699), exports);
tslib_1.__exportStar(__webpack_require__(21592), exports);
tslib_1.__exportStar(__webpack_require__(43418), exports);
tslib_1.__exportStar(__webpack_require__(17500), exports);
tslib_1.__exportStar(__webpack_require__(55588), exports);


/***/ }),

/***/ 55058:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 74184:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 52237:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 94758:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 1579:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 58182:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 24979:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 61302:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 35297:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 5699:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 21592:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.RequestHandlerProtocol = void 0;
var RequestHandlerProtocol;
(function(RequestHandlerProtocol) {
    RequestHandlerProtocol["HTTP_0_9"] = "http/0.9";
    RequestHandlerProtocol["HTTP_1_0"] = "http/1.0";
    RequestHandlerProtocol["TDS_8_0"] = "tds/8.0";
})(RequestHandlerProtocol = exports.RequestHandlerProtocol || (exports.RequestHandlerProtocol = {}));


/***/ }),

/***/ 43418:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 17500:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 55588:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 63679:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.parseUrl = void 0;
const querystring_parser_1 = __webpack_require__(36594);
const parseUrl = (url)=>{
    if (typeof url === "string") {
        return (0, exports.parseUrl)(new URL(url));
    }
    const { hostname, pathname, port, protocol, search } = url;
    let query;
    if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
    }
    return {
        hostname,
        port: port ? parseInt(port) : undefined,
        protocol,
        path: pathname,
        query
    };
};
exports.parseUrl = parseUrl;


/***/ }),

/***/ 6919:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromBase64 = void 0;
const util_buffer_from_1 = __webpack_require__(31071);
const BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
const fromBase64 = (input)=>{
    if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
    }
    if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
    }
    const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
};
exports.fromBase64 = fromBase64;


/***/ }),

/***/ 45607:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(6919), exports);
tslib_1.__exportStar(__webpack_require__(81829), exports);


/***/ }),

/***/ 81829:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.toBase64 = void 0;
const util_buffer_from_1 = __webpack_require__(31071);
const toBase64 = (input)=>(0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
exports.toBase64 = toBase64;


/***/ }),

/***/ 259:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.calculateBodyLength = void 0;
const fs_1 = __webpack_require__(57147);
const calculateBodyLength = (body)=>{
    if (!body) {
        return 0;
    }
    if (typeof body === "string") {
        return Buffer.from(body).length;
    } else if (typeof body.byteLength === "number") {
        return body.byteLength;
    } else if (typeof body.size === "number") {
        return body.size;
    } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
    } else if (typeof body.fd === "number") {
        return (0, fs_1.fstatSync)(body.fd).size;
    }
    throw new Error(`Body Length computation failed for ${body}`);
};
exports.calculateBodyLength = calculateBodyLength;


/***/ }),

/***/ 4677:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(259), exports);


/***/ }),

/***/ 31071:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromString = exports.fromArrayBuffer = void 0;
const is_array_buffer_1 = __webpack_require__(72938);
const buffer_1 = __webpack_require__(14300);
const fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset)=>{
    if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
    }
    return buffer_1.Buffer.from(input, offset, length);
};
exports.fromArrayBuffer = fromArrayBuffer;
const fromString = (input, encoding)=>{
    if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
    }
    return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
};
exports.fromString = fromString;


/***/ }),

/***/ 76320:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.booleanSelector = exports.SelectorType = void 0;
var SelectorType;
(function(SelectorType) {
    SelectorType["ENV"] = "env";
    SelectorType["CONFIG"] = "shared config entry";
})(SelectorType = exports.SelectorType || (exports.SelectorType = {}));
const booleanSelector = (obj, key, type)=>{
    if (!(key in obj)) return undefined;
    if (obj[key] === "true") return true;
    if (obj[key] === "false") return false;
    throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
};
exports.booleanSelector = booleanSelector;


/***/ }),

/***/ 36334:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(76320), exports);


/***/ }),

/***/ 45340:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.IMDS_REGION_PATH = exports.DEFAULTS_MODE_OPTIONS = exports.ENV_IMDS_DISABLED = exports.AWS_DEFAULT_REGION_ENV = exports.AWS_REGION_ENV = exports.AWS_EXECUTION_ENV = void 0;
exports.AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
exports.AWS_REGION_ENV = "AWS_REGION";
exports.AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
exports.DEFAULTS_MODE_OPTIONS = [
    "in-region",
    "cross-region",
    "mobile",
    "standard",
    "legacy"
];
exports.IMDS_REGION_PATH = "/latest/meta-data/placement/region";


/***/ }),

/***/ 47414:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
const AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
const AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>{
        return env[AWS_DEFAULTS_MODE_ENV];
    },
    configFileSelector: (profile)=>{
        return profile[AWS_DEFAULTS_MODE_CONFIG];
    },
    default: "legacy"
};


/***/ }),

/***/ 95268:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(33052), exports);


/***/ }),

/***/ 33052:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.resolveDefaultsModeConfig = void 0;
const config_resolver_1 = __webpack_require__(86620);
const credential_provider_imds_1 = __webpack_require__(30065);
const node_config_provider_1 = __webpack_require__(42429);
const property_provider_1 = __webpack_require__(44357);
const constants_1 = __webpack_require__(45340);
const defaultsModeConfig_1 = __webpack_require__(47414);
const resolveDefaultsModeConfig = ({ region = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {})=>(0, property_provider_1.memoize)(async ()=>{
        const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
        switch(mode === null || mode === void 0 ? void 0 : mode.toLowerCase()){
            case "auto":
                return resolveNodeDefaultsModeAuto(region);
            case "in-region":
            case "cross-region":
            case "mobile":
            case "standard":
            case "legacy":
                return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());
            case undefined:
                return Promise.resolve("legacy");
            default:
                throw new Error(`Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
        }
    });
exports.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
const resolveNodeDefaultsModeAuto = async (clientRegion)=>{
    if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
            return "standard";
        }
        if (resolvedRegion === inferredRegion) {
            return "in-region";
        } else {
            return "cross-region";
        }
    }
    return "standard";
};
const inferPhysicalRegion = async ()=>{
    var _a;
    if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
    }
    if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
            const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();
            return (await (0, credential_provider_imds_1.httpRequest)({
                ...endpoint,
                path: constants_1.IMDS_REGION_PATH
            })).toString();
        } catch (e) {}
    }
};


/***/ }),

/***/ 57005:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.toHex = exports.fromHex = void 0;
const SHORT_TO_HEX = {};
const HEX_TO_SHORT = {};
for(let i = 0; i < 256; i++){
    let encodedByte = i.toString(16).toLowerCase();
    if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
    }
    SHORT_TO_HEX[i] = encodedByte;
    HEX_TO_SHORT[encodedByte] = i;
}
function fromHex(encoded) {
    if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
    }
    const out = new Uint8Array(encoded.length / 2);
    for(let i = 0; i < encoded.length; i += 2){
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
            out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
            throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
    }
    return out;
}
exports.fromHex = fromHex;
function toHex(bytes) {
    let out = "";
    for(let i = 0; i < bytes.byteLength; i++){
        out += SHORT_TO_HEX[bytes[i]];
    }
    return out;
}
exports.toHex = toHex;


/***/ }),

/***/ 49729:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(6904), exports);


/***/ }),

/***/ 6904:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.normalizeProvider = void 0;
const normalizeProvider = (input)=>{
    if (typeof input === "function") return input;
    const promisified = Promise.resolve(input);
    return ()=>promisified;
};
exports.normalizeProvider = normalizeProvider;


/***/ }),

/***/ 47965:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.AdaptiveRetryStrategy = void 0;
const config_1 = __webpack_require__(22704);
const DefaultRateLimiter_1 = __webpack_require__(66126);
const StandardRetryStrategy_1 = __webpack_require__(76899);
class AdaptiveRetryStrategy {
    constructor(maxAttemptsProvider, options){
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
        const { rateLimiter } = options !== null && options !== void 0 ? options : {};
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy_1.StandardRetryStrategy(maxAttemptsProvider);
    }
    async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
    }
    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
    }
    recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
    }
}
exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;


/***/ }),

/***/ 49478:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ConfiguredRetryStrategy = void 0;
const constants_1 = __webpack_require__(16347);
const StandardRetryStrategy_1 = __webpack_require__(76899);
class ConfiguredRetryStrategy extends StandardRetryStrategy_1.StandardRetryStrategy {
    constructor(maxAttempts, computeNextBackoffDelay = constants_1.DEFAULT_RETRY_DELAY_BASE){
        super(typeof maxAttempts === "function" ? maxAttempts : async ()=>maxAttempts);
        if (typeof computeNextBackoffDelay === "number") {
            this.computeNextBackoffDelay = ()=>computeNextBackoffDelay;
        } else {
            this.computeNextBackoffDelay = computeNextBackoffDelay;
        }
    }
    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
        token.getRetryDelay = ()=>this.computeNextBackoffDelay(token.getRetryCount());
        return token;
    }
}
exports.ConfiguredRetryStrategy = ConfiguredRetryStrategy;


/***/ }),

/***/ 66126:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DefaultRateLimiter = void 0;
const service_error_classification_1 = __webpack_require__(82041);
class DefaultRateLimiter {
    constructor(options){
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
    }
    getCurrentTimeInSeconds() {
        return Date.now() / 1000;
    }
    async getSendToken() {
        return this.acquireTokenBucket(1);
    }
    async acquireTokenBucket(amount) {
        if (!this.enabled) {
            return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
            const delay = (amount - this.currentCapacity) / this.fillRate * 1000;
            await new Promise((resolve)=>setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
    }
    refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
            this.lastTimestamp = timestamp;
            return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
    }
    updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
            const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
            this.lastMaxRate = rateToUse;
            this.calculateTimeWindow();
            this.lastThrottleTime = this.getCurrentTimeInSeconds();
            calculatedRate = this.cubicThrottle(rateToUse);
            this.enableTokenBucket();
        } else {
            this.calculateTimeWindow();
            calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
    }
    calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
    }
    cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
    }
    cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
    }
    enableTokenBucket() {
        this.enabled = true;
    }
    updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
    }
    updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
            const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
            this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
            this.requestCount = 0;
            this.lastTxRateBucket = timeBucket;
        }
    }
    getPrecise(num) {
        return parseFloat(num.toFixed(8));
    }
}
exports.DefaultRateLimiter = DefaultRateLimiter;


/***/ }),

/***/ 76899:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.StandardRetryStrategy = void 0;
const config_1 = __webpack_require__(22704);
const constants_1 = __webpack_require__(16347);
const defaultRetryBackoffStrategy_1 = __webpack_require__(65827);
const defaultRetryToken_1 = __webpack_require__(59487);
class StandardRetryStrategy {
    constructor(maxAttempts){
        this.maxAttempts = maxAttempts;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.capacity = constants_1.INITIAL_RETRY_TOKENS;
        this.retryBackoffStrategy = (0, defaultRetryBackoffStrategy_1.getDefaultRetryBackoffStrategy)();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async ()=>maxAttempts;
    }
    async acquireInitialRetryToken(retryTokenScope) {
        return (0, defaultRetryToken_1.createDefaultRetryToken)({
            retryDelay: constants_1.DEFAULT_RETRY_DELAY_BASE,
            retryCount: 0
        });
    }
    async refreshRetryTokenForRetry(token, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(token, errorInfo, maxAttempts)) {
            const errorType = errorInfo.errorType;
            this.retryBackoffStrategy.setDelayBase(errorType === "THROTTLING" ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE);
            const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
            const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
            const capacityCost = this.getCapacityCost(errorType);
            this.capacity -= capacityCost;
            return (0, defaultRetryToken_1.createDefaultRetryToken)({
                retryDelay,
                retryCount: token.getRetryCount() + 1,
                retryCost: capacityCost
            });
        }
        throw new Error("No retry token available");
    }
    recordSuccess(token) {
        var _a;
        this.capacity = Math.max(constants_1.INITIAL_RETRY_TOKENS, this.capacity + ((_a = token.getRetryCost()) !== null && _a !== void 0 ? _a : constants_1.NO_RETRY_INCREMENT));
    }
    getCapacity() {
        return this.capacity;
    }
    async getMaxAttempts() {
        try {
            return await this.maxAttemptsProvider();
        } catch (error) {
            console.warn(`Max attempts provider could not resolve. Using default of ${config_1.DEFAULT_MAX_ATTEMPTS}`);
            return config_1.DEFAULT_MAX_ATTEMPTS;
        }
    }
    shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount() + 1;
        return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
    }
    getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? constants_1.TIMEOUT_RETRY_COST : constants_1.RETRY_COST;
    }
    isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
    }
}
exports.StandardRetryStrategy = StandardRetryStrategy;


/***/ }),

/***/ 22704:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DEFAULT_RETRY_MODE = exports.DEFAULT_MAX_ATTEMPTS = exports.RETRY_MODES = void 0;
var RETRY_MODES;
(function(RETRY_MODES) {
    RETRY_MODES["STANDARD"] = "standard";
    RETRY_MODES["ADAPTIVE"] = "adaptive";
})(RETRY_MODES = exports.RETRY_MODES || (exports.RETRY_MODES = {}));
exports.DEFAULT_MAX_ATTEMPTS = 3;
exports.DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;


/***/ }),

/***/ 16347:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.REQUEST_HEADER = exports.INVOCATION_ID_HEADER = exports.NO_RETRY_INCREMENT = exports.TIMEOUT_RETRY_COST = exports.RETRY_COST = exports.INITIAL_RETRY_TOKENS = exports.THROTTLING_RETRY_DELAY_BASE = exports.MAXIMUM_RETRY_DELAY = exports.DEFAULT_RETRY_DELAY_BASE = void 0;
exports.DEFAULT_RETRY_DELAY_BASE = 100;
exports.MAXIMUM_RETRY_DELAY = 20 * 1000;
exports.THROTTLING_RETRY_DELAY_BASE = 500;
exports.INITIAL_RETRY_TOKENS = 500;
exports.RETRY_COST = 5;
exports.TIMEOUT_RETRY_COST = 10;
exports.NO_RETRY_INCREMENT = 1;
exports.INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
exports.REQUEST_HEADER = "amz-sdk-request";


/***/ }),

/***/ 65827:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getDefaultRetryBackoffStrategy = void 0;
const constants_1 = __webpack_require__(16347);
const getDefaultRetryBackoffStrategy = ()=>{
    let delayBase = constants_1.DEFAULT_RETRY_DELAY_BASE;
    const computeNextBackoffDelay = (attempts)=>{
        return Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    };
    const setDelayBase = (delay)=>{
        delayBase = delay;
    };
    return {
        computeNextBackoffDelay,
        setDelayBase
    };
};
exports.getDefaultRetryBackoffStrategy = getDefaultRetryBackoffStrategy;


/***/ }),

/***/ 59487:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.createDefaultRetryToken = void 0;
const constants_1 = __webpack_require__(16347);
const createDefaultRetryToken = ({ retryDelay, retryCount, retryCost })=>{
    const getRetryCount = ()=>retryCount;
    const getRetryDelay = ()=>Math.min(constants_1.MAXIMUM_RETRY_DELAY, retryDelay);
    const getRetryCost = ()=>retryCost;
    return {
        getRetryCount,
        getRetryDelay,
        getRetryCost
    };
};
exports.createDefaultRetryToken = createDefaultRetryToken;


/***/ }),

/***/ 1761:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(47965), exports);
tslib_1.__exportStar(__webpack_require__(49478), exports);
tslib_1.__exportStar(__webpack_require__(66126), exports);
tslib_1.__exportStar(__webpack_require__(76899), exports);
tslib_1.__exportStar(__webpack_require__(22704), exports);
tslib_1.__exportStar(__webpack_require__(16347), exports);
tslib_1.__exportStar(__webpack_require__(70708), exports);


/***/ }),

/***/ 70708:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));


/***/ }),

/***/ 13524:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Uint8ArrayBlobAdapter = void 0;
const transforms_1 = __webpack_require__(81264);
class Uint8ArrayBlobAdapter extends Uint8Array {
    static fromString(source, encoding = "utf-8") {
        switch(typeof source){
            case "string":
                return (0, transforms_1.transformFromString)(source, encoding);
            default:
                throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
        }
    }
    static mutate(source) {
        Object.setPrototypeOf(source, Uint8ArrayBlobAdapter.prototype);
        return source;
    }
    transformToString(encoding = "utf-8") {
        return (0, transforms_1.transformToString)(this, encoding);
    }
}
exports.Uint8ArrayBlobAdapter = Uint8ArrayBlobAdapter;


/***/ }),

/***/ 81264:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.transformFromString = exports.transformToString = void 0;
const util_base64_1 = __webpack_require__(45607);
const util_utf8_1 = __webpack_require__(50170);
const Uint8ArrayBlobAdapter_1 = __webpack_require__(13524);
function transformToString(payload, encoding = "utf-8") {
    if (encoding === "base64") {
        return (0, util_base64_1.toBase64)(payload);
    }
    return (0, util_utf8_1.toUtf8)(payload);
}
exports.transformToString = transformToString;
function transformFromString(str, encoding) {
    if (encoding === "base64") {
        return Uint8ArrayBlobAdapter_1.Uint8ArrayBlobAdapter.mutate((0, util_base64_1.fromBase64)(str));
    }
    return Uint8ArrayBlobAdapter_1.Uint8ArrayBlobAdapter.mutate((0, util_utf8_1.fromUtf8)(str));
}
exports.transformFromString = transformFromString;


/***/ }),

/***/ 30966:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getAwsChunkedEncodingStream = void 0;
const stream_1 = __webpack_require__(12781);
const getAwsChunkedEncodingStream = (readableStream, options)=>{
    const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
    const checksumRequired = base64Encoder !== undefined && checksumAlgorithmFn !== undefined && checksumLocationName !== undefined && streamHasher !== undefined;
    const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : undefined;
    const awsChunkedEncodingStream = new stream_1.Readable({
        read: ()=>{}
    });
    readableStream.on("data", (data)=>{
        const length = bodyLengthChecker(data) || 0;
        awsChunkedEncodingStream.push(`${length.toString(16)}\r\n`);
        awsChunkedEncodingStream.push(data);
        awsChunkedEncodingStream.push("\r\n");
    });
    readableStream.on("end", async ()=>{
        awsChunkedEncodingStream.push(`0\r\n`);
        if (checksumRequired) {
            const checksum = base64Encoder(await digest);
            awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\r\n`);
            awsChunkedEncodingStream.push(`\r\n`);
        }
        awsChunkedEncodingStream.push(null);
    });
    return awsChunkedEncodingStream;
};
exports.getAwsChunkedEncodingStream = getAwsChunkedEncodingStream;


/***/ }),

/***/ 93829:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(13524), exports);
tslib_1.__exportStar(__webpack_require__(30966), exports);
tslib_1.__exportStar(__webpack_require__(80764), exports);


/***/ }),

/***/ 80764:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.sdkStreamMixin = void 0;
const node_http_handler_1 = __webpack_require__(17292);
const util_buffer_from_1 = __webpack_require__(31071);
const stream_1 = __webpack_require__(12781);
const util_1 = __webpack_require__(73837);
const ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
const sdkStreamMixin = (stream)=>{
    var _a, _b;
    if (!(stream instanceof stream_1.Readable)) {
        const name = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;
        throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
    }
    let transformed = false;
    const transformToByteArray = async ()=>{
        if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0, node_http_handler_1.streamCollector)(stream);
    };
    return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding)=>{
            const buf = await transformToByteArray();
            if (encoding === undefined || Buffer.isEncoding(encoding)) {
                return (0, util_buffer_from_1.fromArrayBuffer)(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
            } else {
                const decoder = new util_1.TextDecoder(encoding);
                return decoder.decode(buf);
            }
        },
        transformToWebStream: ()=>{
            if (transformed) {
                throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
            }
            if (stream.readableFlowing !== null) {
                throw new Error("The stream has been consumed by other callbacks.");
            }
            if (typeof stream_1.Readable.toWeb !== "function") {
                throw new Error("Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.");
            }
            transformed = true;
            return stream_1.Readable.toWeb(stream);
        }
    });
};
exports.sdkStreamMixin = sdkStreamMixin;


/***/ }),

/***/ 40493:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.escapeUriPath = void 0;
const escape_uri_1 = __webpack_require__(67290);
const escapeUriPath = (uri)=>uri.split("/").map(escape_uri_1.escapeUri).join("/");
exports.escapeUriPath = escapeUriPath;


/***/ }),

/***/ 67290:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.escapeUri = void 0;
const escapeUri = (uri)=>encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
exports.escapeUri = escapeUri;
const hexEncode = (c)=>`%${c.charCodeAt(0).toString(16).toUpperCase()}`;


/***/ }),

/***/ 25262:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(67290), exports);
tslib_1.__exportStar(__webpack_require__(40493), exports);


/***/ }),

/***/ 96854:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.fromUtf8 = void 0;
const util_buffer_from_1 = __webpack_require__(31071);
const fromUtf8 = (input)=>{
    const buf = (0, util_buffer_from_1.fromString)(input, "utf8");
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
};
exports.fromUtf8 = fromUtf8;


/***/ }),

/***/ 50170:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(96854), exports);
tslib_1.__exportStar(__webpack_require__(54590), exports);
tslib_1.__exportStar(__webpack_require__(30385), exports);


/***/ }),

/***/ 54590:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.toUint8Array = void 0;
const fromUtf8_1 = __webpack_require__(96854);
const toUint8Array = (data)=>{
    if (typeof data === "string") {
        return (0, fromUtf8_1.fromUtf8)(data);
    }
    if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
};
exports.toUint8Array = toUint8Array;


/***/ }),

/***/ 30385:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.toUtf8 = void 0;
const util_buffer_from_1 = __webpack_require__(31071);
const toUtf8 = (input)=>(0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
exports.toUtf8 = toUtf8;


/***/ }),

/***/ 10190:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.createWaiter = void 0;
const poller_1 = __webpack_require__(79259);
const utils_1 = __webpack_require__(7558);
const waiter_1 = __webpack_require__(80064);
const abortTimeout = async (abortSignal)=>{
    return new Promise((resolve)=>{
        abortSignal.onabort = ()=>resolve({
                state: waiter_1.WaiterState.ABORTED
            });
    });
};
const createWaiter = async (options, input, acceptorChecks)=>{
    const params = {
        ...waiter_1.waiterServiceDefaults,
        ...options
    };
    (0, utils_1.validateWaiterOptions)(params);
    const exitConditions = [
        (0, poller_1.runPolling)(params, input, acceptorChecks)
    ];
    if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
    }
    if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
    }
    return Promise.race(exitConditions);
};
exports.createWaiter = createWaiter;


/***/ }),

/***/ 2470:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(10190), exports);
tslib_1.__exportStar(__webpack_require__(80064), exports);


/***/ }),

/***/ 79259:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.runPolling = void 0;
const sleep_1 = __webpack_require__(13275);
const waiter_1 = __webpack_require__(80064);
const exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt)=>{
    if (attempt > attemptCeiling) return maxDelay;
    const delay = minDelay * 2 ** (attempt - 1);
    return randomInRange(minDelay, delay);
};
const randomInRange = (min, max)=>min + Math.random() * (max - min);
const runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks)=>{
    var _a;
    const { state, reason } = await acceptorChecks(client, input);
    if (state !== waiter_1.WaiterState.RETRY) {
        return {
            state,
            reason
        };
    }
    let currentAttempt = 1;
    const waitUntil = Date.now() + maxWaitTime * 1000;
    const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
    while(true){
        if (((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.aborted) || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) {
            return {
                state: waiter_1.WaiterState.ABORTED
            };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1000 > waitUntil) {
            return {
                state: waiter_1.WaiterState.TIMEOUT
            };
        }
        await (0, sleep_1.sleep)(delay);
        const { state, reason } = await acceptorChecks(client, input);
        if (state !== waiter_1.WaiterState.RETRY) {
            return {
                state,
                reason
            };
        }
        currentAttempt += 1;
    }
};
exports.runPolling = runPolling;


/***/ }),

/***/ 7558:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
const tslib_1 = __webpack_require__(35092);
tslib_1.__exportStar(__webpack_require__(13275), exports);
tslib_1.__exportStar(__webpack_require__(29268), exports);


/***/ }),

/***/ 13275:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.sleep = void 0;
const sleep = (seconds)=>{
    return new Promise((resolve)=>setTimeout(resolve, seconds * 1000));
};
exports.sleep = sleep;


/***/ }),

/***/ 29268:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.validateWaiterOptions = void 0;
const validateWaiterOptions = (options)=>{
    if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
    } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
    } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
    } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
    } else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
    }
};
exports.validateWaiterOptions = validateWaiterOptions;


/***/ }),

/***/ 80064:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.checkExceptions = exports.WaiterState = exports.waiterServiceDefaults = void 0;
exports.waiterServiceDefaults = {
    minDelay: 2,
    maxDelay: 120
};
var WaiterState;
(function(WaiterState) {
    WaiterState["ABORTED"] = "ABORTED";
    WaiterState["FAILURE"] = "FAILURE";
    WaiterState["SUCCESS"] = "SUCCESS";
    WaiterState["RETRY"] = "RETRY";
    WaiterState["TIMEOUT"] = "TIMEOUT";
})(WaiterState = exports.WaiterState || (exports.WaiterState = {}));
const checkExceptions = (result)=>{
    if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify({
            ...result,
            reason: "Request was aborted"
        })}`);
        abortError.name = "AbortError";
        throw abortError;
    } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify({
            ...result,
            reason: "Waiter has timed out"
        })}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
    } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({
            result
        })}`);
    }
    return result;
};
exports.checkExceptions = checkExceptions;


/***/ }),

/***/ 6250:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __webpack_unused_export__;
// This file is for modularized imports for next/server to get fully-treeshaking.

__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "Z", ({
    enumerable: true,
    get: function() {
        return _response.NextResponse;
    }
}));
const _response = __webpack_require__(23452); //# sourceMappingURL=next-response.js.map


/***/ }),

/***/ 4012:
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ Config)
/* harmony export */ });
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(54576);
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_util_index_js__WEBPACK_IMPORTED_MODULE_0__]);
_util_index_js__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];

const Config = /* @__PURE__ */ (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .createProxy */ .D)("Config");
const metadata = parseMetadataEnvironment();
const parameters = flattenValues((0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .getVariables2 */ .q)("Parameter"));
const secrets = flattenValues((0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .getVariables2 */ .q)("Secret"));
Object.assign(Config, metadata, parameters, secrets);
///////////////
// Functions
///////////////
function parseMetadataEnvironment() {
    return {
        APP: process.env.SST_APP,
        STAGE: process.env.SST_STAGE
    };
}
function flattenValues(configValues) {
    const acc = {};
    Object.keys(configValues).forEach((name)=>{
        acc[name] = configValues[name].value;
    });
    return acc;
}

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ 54576:
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ createProxy),
/* harmony export */   q: () => (/* binding */ getVariables2)
/* harmony export */ });
/* harmony import */ var _aws_sdk_client_ssm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4278);

const ssm = new _aws_sdk_client_ssm__WEBPACK_IMPORTED_MODULE_0__.SSMClient({
    region: process.env.SST_REGION
});
// Example:
// {
//   Bucket: {
//     myBucket: {
//       name: "my-bucket",
//     }
//   }
// }
let allVariables = {};
// NOTE: in some setups, top level await must be assigned to a variable,
//       otherwise it would throw a top level await error.
//       https://discord.com/channels/983865673656705025/1089184080534446110
const _placeholder = await parseEnvironment();
function createProxy(constructName) {
    const result = new Proxy({}, {
        get (target, prop) {
            if (typeof prop === "string") {
                // If SST_APP and SST_STAGE are not set, it is likely the
                // user is using an older version of SST.
                // Note: cannot run this check at the top level b/c SvelteKit
                //       run code analysis after build. The code analysis runs
                //       the top level code, and would fail b/c "SST_APP" and
                //       "SST_STAGE" are undefined at build time.
                if (!process.env.SST_APP) {
                    throw new Error(buildMissingBuiltInEnvError());
                }
                // normalize prop to convert kebab cases like `my-table` to `my_table`
                const normProp = normalizeId(prop);
                if (!(normProp in target)) {
                    throw new Error(`Cannot use ${constructName}.${String(prop)}. Please make sure it is bound to this function.`);
                }
                return Reflect.get(target, normProp);
            }
            return Reflect.get(target, prop);
        }
    });
    Object.assign(result, getVariables2(constructName));
    return result;
}
function getVariables2(constructName) {
    return allVariables[constructName] || {};
}
async function parseEnvironment() {
    const variablesFromSsm = [];
    const variablesFromSecret = [];
    Object.keys(process.env).filter((name)=>name.startsWith("SST_")).forEach((name)=>{
        const variable = parseEnvName(name);
        // Ignore if env var is not in the correct format
        if (!variable.constructName || !variable.constructId || !variable.propName) {
            return;
        }
        const value = process.env[name];
        if (value === "__FETCH_FROM_SSM__") {
            variablesFromSsm.push(variable);
        } else if (value.startsWith("__FETCH_FROM_SECRET__:")) {
            variablesFromSecret.push([
                variable,
                value.split(":")[1]
            ]);
        } else {
            storeVariable(variable, value);
        }
    });
    // Fetch values from SSM
    await fetchValuesFromSSM(variablesFromSsm);
    // Fetch values from Secrets
    variablesFromSecret.forEach(([variable, secretName])=>{
        const value = allVariables["Secret"]?.[secretName]?.value;
        if (value) {
            storeVariable(variable, value);
        }
    });
    return allVariables;
}
async function fetchValuesFromSSM(variablesFromSsm) {
    // Get all env vars that need to be fetched from SSM
    const ssmPaths = variablesFromSsm.map((variable)=>buildSsmPath(variable));
    if (ssmPaths.length === 0) return;
    // Fetch
    const results = await loadSecrets(ssmPaths);
    results.validParams.forEach((item)=>{
        const variable = parseSsmPath(item.Name);
        storeVariable(variable, item.Value);
    });
    // Get all fallback values to be fetched
    const ssmFallbackPaths = results.invalidParams.map((name)=>parseSsmPath(name)).filter((variable)=>variable.constructName === "Secret").map((variable)=>buildSsmFallbackPath(variable));
    if (ssmFallbackPaths.length === 0) return;
    // Fetch fallback values
    const fallbackResults = await loadSecrets(ssmFallbackPaths);
    fallbackResults.validParams.forEach((item)=>{
        const variable = parseSsmFallbackPath(item.Name);
        storeVariable(variable, item.Value);
    });
    // Throw error if any values are missing
    const missingSecrets = fallbackResults.invalidParams.map((name)=>parseSsmFallbackPath(name)).filter((variable)=>variable.constructName === "Secret").map((variable)=>variable.constructId);
    if (missingSecrets.length > 0) {
        throw new Error(`The following secret values are not set in the "${process.env.SST_STAGE} stage": ${missingSecrets.join(", ")}`);
    }
}
async function loadSecrets(paths) {
    // Split paths into chunks of 10
    const chunks = [];
    for(let i = 0; i < paths.length; i += 10){
        chunks.push(paths.slice(i, i + 10));
    }
    // Fetch secrets
    const validParams = [];
    const invalidParams = [];
    await Promise.all(chunks.map(async (chunk)=>{
        const command = new _aws_sdk_client_ssm__WEBPACK_IMPORTED_MODULE_0__.GetParametersCommand({
            Names: chunk,
            WithDecryption: true
        });
        const result = await ssm.send(command);
        validParams.push(...result.Parameters || []);
        invalidParams.push(...result.InvalidParameters || []);
    }));
    return {
        validParams,
        invalidParams
    };
}
function parseEnvName(env) {
    const [_SST, constructName, propName, ...idParts] = env.split("_");
    return {
        constructName,
        constructId: idParts.join("_"),
        propName
    };
}
function parseSsmPath(path) {
    const prefix = ssmPrefix();
    const parts = path.substring(prefix.length).split("/");
    return {
        constructName: parts[0],
        constructId: parts[1],
        propName: parts[2]
    };
}
function parseSsmFallbackPath(path) {
    const parts = path.split("/");
    return {
        constructName: parts[4],
        constructId: parts[5],
        propName: parts[6]
    };
}
function buildSsmPath(data) {
    return `${ssmPrefix()}${data.constructName}/${data.constructId}/${data.propName}`;
}
function buildSsmFallbackPath(data) {
    return `/sst/${process.env.SST_APP}/.fallback/${data.constructName}/${data.constructId}/${data.propName}`;
}
function normalizeId(name) {
    return name.replace(/-/g, "_");
}
function ssmPrefix() {
    return process.env.SST_SSM_PREFIX || "";
}
function storeVariable(variable, value) {
    const { constructId: id, constructName: c, propName: prop } = variable;
    allVariables[c] = allVariables[c] || {};
    allVariables[c][id] = allVariables[c][id] || {};
    allVariables[c][id][prop] = value;
}
function buildMissingBuiltInEnvError() {
    // Build environment => building SSR sites
    if (process.env.SST) {
        return [
            "",
            `Cannot access bound resources. This usually happens if the "sst/node" package is used at build time. For example:`,
            "",
            `  - The "sst/node" package is used inside the "getStaticProps()" function of a Next.js app.`,
            `  - The "sst/node" package is used at the top level outside of the "load()" function of a SvelteKit app.`,
            "",
            `Please wrap your build script with "sst bind". For example, "sst bind next build".`,
            ""
        ].join("\n");
    }
    // Lambda/CodeBuild environment => Function/Job or SSR function
    if (process.env.AWS_LAMBDA_FUNCTION_NAME || process.env.CODEBUILD_BUILD_ARN) {
        return `Cannot access bound resources. This usually happens if you are using an older version of SST. Please update SST to the latest version.`;
    }
    // Unknown environment => client-side code
    return `Cannot access bound resources. This usually happens if the "sst/node" package is used on the client-side. Ensure that it's only called in your server functions.`;
}

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } }, 1);

/***/ }),

/***/ 98555:
/***/ ((module) => {

module.exports = JSON.parse('{"name":"@aws-sdk/client-ssm","description":"AWS SDK for JavaScript Ssm Client for Node.js, Browser and React Native","version":"3.369.0","scripts":{"build":"concurrently \'yarn:build:cjs\' \'yarn:build:es\' \'yarn:build:types\'","build:cjs":"tsc -p tsconfig.cjs.json","build:docs":"typedoc","build:es":"tsc -p tsconfig.es.json","build:include:deps":"lerna run --scope $npm_package_name --include-dependencies build","build:types":"tsc -p tsconfig.types.json","build:types:downlevel":"downlevel-dts dist-types dist-types/ts3.4","clean":"rimraf ./dist-* && rimraf *.tsbuildinfo","extract:docs":"api-extractor run --local","generate:client":"node ../../scripts/generate-clients/single-service --solo ssm"},"main":"./dist-cjs/index.js","types":"./dist-types/index.d.ts","module":"./dist-es/index.js","sideEffects":false,"dependencies":{"@aws-crypto/sha256-browser":"3.0.0","@aws-crypto/sha256-js":"3.0.0","@aws-sdk/client-sts":"3.369.0","@aws-sdk/credential-provider-node":"3.369.0","@aws-sdk/middleware-host-header":"3.369.0","@aws-sdk/middleware-logger":"3.369.0","@aws-sdk/middleware-recursion-detection":"3.369.0","@aws-sdk/middleware-signing":"3.369.0","@aws-sdk/middleware-user-agent":"3.369.0","@aws-sdk/types":"3.369.0","@aws-sdk/util-endpoints":"3.369.0","@aws-sdk/util-user-agent-browser":"3.369.0","@aws-sdk/util-user-agent-node":"3.369.0","@smithy/config-resolver":"^1.0.1","@smithy/fetch-http-handler":"^1.0.1","@smithy/hash-node":"^1.0.1","@smithy/invalid-dependency":"^1.0.1","@smithy/middleware-content-length":"^1.0.1","@smithy/middleware-endpoint":"^1.0.1","@smithy/middleware-retry":"^1.0.2","@smithy/middleware-serde":"^1.0.1","@smithy/middleware-stack":"^1.0.1","@smithy/node-config-provider":"^1.0.1","@smithy/node-http-handler":"^1.0.2","@smithy/protocol-http":"^1.0.1","@smithy/smithy-client":"^1.0.3","@smithy/types":"^1.1.0","@smithy/url-parser":"^1.0.1","@smithy/util-base64":"^1.0.1","@smithy/util-body-length-browser":"^1.0.1","@smithy/util-body-length-node":"^1.0.1","@smithy/util-defaults-mode-browser":"^1.0.1","@smithy/util-defaults-mode-node":"^1.0.1","@smithy/util-retry":"^1.0.2","@smithy/util-utf8":"^1.0.1","@smithy/util-waiter":"^1.0.1","tslib":"^2.5.0","uuid":"^8.3.2"},"devDependencies":{"@aws-sdk/service-client-documentation-generator":"3.310.0","@smithy/service-client-documentation-generator":"^1.0.1","@tsconfig/node14":"1.0.3","@types/node":"^14.14.31","@types/uuid":"^8.3.0","concurrently":"7.0.0","downlevel-dts":"0.10.1","rimraf":"3.0.2","typedoc":"0.23.23","typescript":"~4.9.5"},"engines":{"node":">=14.0.0"},"typesVersions":{"<4.0":{"dist-types/*":["dist-types/ts3.4/*"]}},"files":["dist-*/**"],"author":{"name":"AWS SDK for JavaScript Team","url":"https://aws.amazon.com/javascript/"},"license":"Apache-2.0","browser":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.browser"},"react-native":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.native"},"homepage":"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-ssm","repository":{"type":"git","url":"https://github.com/aws/aws-sdk-js-v3.git","directory":"clients/client-ssm"}}');

/***/ }),

/***/ 40037:
/***/ ((module) => {

module.exports = JSON.parse('{"name":"@aws-sdk/client-sso-oidc","description":"AWS SDK for JavaScript Sso Oidc Client for Node.js, Browser and React Native","version":"3.369.0","scripts":{"build":"concurrently \'yarn:build:cjs\' \'yarn:build:es\' \'yarn:build:types\'","build:cjs":"tsc -p tsconfig.cjs.json","build:docs":"typedoc","build:es":"tsc -p tsconfig.es.json","build:include:deps":"lerna run --scope $npm_package_name --include-dependencies build","build:types":"tsc -p tsconfig.types.json","build:types:downlevel":"downlevel-dts dist-types dist-types/ts3.4","clean":"rimraf ./dist-* && rimraf *.tsbuildinfo","extract:docs":"api-extractor run --local","generate:client":"node ../../scripts/generate-clients/single-service --solo sso-oidc"},"main":"./dist-cjs/index.js","types":"./dist-types/index.d.ts","module":"./dist-es/index.js","sideEffects":false,"dependencies":{"@aws-crypto/sha256-browser":"3.0.0","@aws-crypto/sha256-js":"3.0.0","@aws-sdk/middleware-host-header":"3.369.0","@aws-sdk/middleware-logger":"3.369.0","@aws-sdk/middleware-recursion-detection":"3.369.0","@aws-sdk/middleware-user-agent":"3.369.0","@aws-sdk/types":"3.369.0","@aws-sdk/util-endpoints":"3.369.0","@aws-sdk/util-user-agent-browser":"3.369.0","@aws-sdk/util-user-agent-node":"3.369.0","@smithy/config-resolver":"^1.0.1","@smithy/fetch-http-handler":"^1.0.1","@smithy/hash-node":"^1.0.1","@smithy/invalid-dependency":"^1.0.1","@smithy/middleware-content-length":"^1.0.1","@smithy/middleware-endpoint":"^1.0.1","@smithy/middleware-retry":"^1.0.2","@smithy/middleware-serde":"^1.0.1","@smithy/middleware-stack":"^1.0.1","@smithy/node-config-provider":"^1.0.1","@smithy/node-http-handler":"^1.0.2","@smithy/protocol-http":"^1.0.1","@smithy/smithy-client":"^1.0.3","@smithy/types":"^1.1.0","@smithy/url-parser":"^1.0.1","@smithy/util-base64":"^1.0.1","@smithy/util-body-length-browser":"^1.0.1","@smithy/util-body-length-node":"^1.0.1","@smithy/util-defaults-mode-browser":"^1.0.1","@smithy/util-defaults-mode-node":"^1.0.1","@smithy/util-retry":"^1.0.2","@smithy/util-utf8":"^1.0.1","tslib":"^2.5.0"},"devDependencies":{"@aws-sdk/service-client-documentation-generator":"3.310.0","@smithy/service-client-documentation-generator":"^1.0.1","@tsconfig/node14":"1.0.3","@types/node":"^14.14.31","concurrently":"7.0.0","downlevel-dts":"0.10.1","rimraf":"3.0.2","typedoc":"0.23.23","typescript":"~4.9.5"},"engines":{"node":">=14.0.0"},"typesVersions":{"<4.0":{"dist-types/*":["dist-types/ts3.4/*"]}},"files":["dist-*/**"],"author":{"name":"AWS SDK for JavaScript Team","url":"https://aws.amazon.com/javascript/"},"license":"Apache-2.0","browser":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.browser"},"react-native":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.native"},"homepage":"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso-oidc","repository":{"type":"git","url":"https://github.com/aws/aws-sdk-js-v3.git","directory":"clients/client-sso-oidc"}}');

/***/ }),

/***/ 64365:
/***/ ((module) => {

module.exports = JSON.parse('{"name":"@aws-sdk/client-sso","description":"AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native","version":"3.369.0","scripts":{"build":"concurrently \'yarn:build:cjs\' \'yarn:build:es\' \'yarn:build:types\'","build:cjs":"tsc -p tsconfig.cjs.json","build:docs":"typedoc","build:es":"tsc -p tsconfig.es.json","build:include:deps":"lerna run --scope $npm_package_name --include-dependencies build","build:types":"tsc -p tsconfig.types.json","build:types:downlevel":"downlevel-dts dist-types dist-types/ts3.4","clean":"rimraf ./dist-* && rimraf *.tsbuildinfo","extract:docs":"api-extractor run --local","generate:client":"node ../../scripts/generate-clients/single-service --solo sso"},"main":"./dist-cjs/index.js","types":"./dist-types/index.d.ts","module":"./dist-es/index.js","sideEffects":false,"dependencies":{"@aws-crypto/sha256-browser":"3.0.0","@aws-crypto/sha256-js":"3.0.0","@aws-sdk/middleware-host-header":"3.369.0","@aws-sdk/middleware-logger":"3.369.0","@aws-sdk/middleware-recursion-detection":"3.369.0","@aws-sdk/middleware-user-agent":"3.369.0","@aws-sdk/types":"3.369.0","@aws-sdk/util-endpoints":"3.369.0","@aws-sdk/util-user-agent-browser":"3.369.0","@aws-sdk/util-user-agent-node":"3.369.0","@smithy/config-resolver":"^1.0.1","@smithy/fetch-http-handler":"^1.0.1","@smithy/hash-node":"^1.0.1","@smithy/invalid-dependency":"^1.0.1","@smithy/middleware-content-length":"^1.0.1","@smithy/middleware-endpoint":"^1.0.1","@smithy/middleware-retry":"^1.0.2","@smithy/middleware-serde":"^1.0.1","@smithy/middleware-stack":"^1.0.1","@smithy/node-config-provider":"^1.0.1","@smithy/node-http-handler":"^1.0.2","@smithy/protocol-http":"^1.0.1","@smithy/smithy-client":"^1.0.3","@smithy/types":"^1.1.0","@smithy/url-parser":"^1.0.1","@smithy/util-base64":"^1.0.1","@smithy/util-body-length-browser":"^1.0.1","@smithy/util-body-length-node":"^1.0.1","@smithy/util-defaults-mode-browser":"^1.0.1","@smithy/util-defaults-mode-node":"^1.0.1","@smithy/util-retry":"^1.0.2","@smithy/util-utf8":"^1.0.1","tslib":"^2.5.0"},"devDependencies":{"@aws-sdk/service-client-documentation-generator":"3.310.0","@smithy/service-client-documentation-generator":"^1.0.1","@tsconfig/node14":"1.0.3","@types/node":"^14.14.31","concurrently":"7.0.0","downlevel-dts":"0.10.1","rimraf":"3.0.2","typedoc":"0.23.23","typescript":"~4.9.5"},"engines":{"node":">=14.0.0"},"typesVersions":{"<4.0":{"dist-types/*":["dist-types/ts3.4/*"]}},"files":["dist-*/**"],"author":{"name":"AWS SDK for JavaScript Team","url":"https://aws.amazon.com/javascript/"},"license":"Apache-2.0","browser":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.browser"},"react-native":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.native"},"homepage":"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso","repository":{"type":"git","url":"https://github.com/aws/aws-sdk-js-v3.git","directory":"clients/client-sso"}}');

/***/ }),

/***/ 28425:
/***/ ((module) => {

module.exports = JSON.parse('{"name":"@aws-sdk/client-sts","description":"AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native","version":"3.369.0","scripts":{"build":"concurrently \'yarn:build:cjs\' \'yarn:build:es\' \'yarn:build:types\'","build:cjs":"tsc -p tsconfig.cjs.json","build:docs":"typedoc","build:es":"tsc -p tsconfig.es.json","build:include:deps":"lerna run --scope $npm_package_name --include-dependencies build","build:types":"tsc -p tsconfig.types.json","build:types:downlevel":"downlevel-dts dist-types dist-types/ts3.4","clean":"rimraf ./dist-* && rimraf *.tsbuildinfo","extract:docs":"api-extractor run --local","generate:client":"node ../../scripts/generate-clients/single-service --solo sts","test":"yarn test:unit","test:unit":"jest"},"main":"./dist-cjs/index.js","types":"./dist-types/index.d.ts","module":"./dist-es/index.js","sideEffects":false,"dependencies":{"@aws-crypto/sha256-browser":"3.0.0","@aws-crypto/sha256-js":"3.0.0","@aws-sdk/credential-provider-node":"3.369.0","@aws-sdk/middleware-host-header":"3.369.0","@aws-sdk/middleware-logger":"3.369.0","@aws-sdk/middleware-recursion-detection":"3.369.0","@aws-sdk/middleware-sdk-sts":"3.369.0","@aws-sdk/middleware-signing":"3.369.0","@aws-sdk/middleware-user-agent":"3.369.0","@aws-sdk/types":"3.369.0","@aws-sdk/util-endpoints":"3.369.0","@aws-sdk/util-user-agent-browser":"3.369.0","@aws-sdk/util-user-agent-node":"3.369.0","@smithy/config-resolver":"^1.0.1","@smithy/fetch-http-handler":"^1.0.1","@smithy/hash-node":"^1.0.1","@smithy/invalid-dependency":"^1.0.1","@smithy/middleware-content-length":"^1.0.1","@smithy/middleware-endpoint":"^1.0.1","@smithy/middleware-retry":"^1.0.1","@smithy/middleware-serde":"^1.0.1","@smithy/middleware-stack":"^1.0.1","@smithy/node-config-provider":"^1.0.1","@smithy/node-http-handler":"^1.0.1","@smithy/protocol-http":"^1.1.0","@smithy/smithy-client":"^1.0.2","@smithy/types":"^1.1.0","@smithy/url-parser":"^1.0.1","@smithy/util-base64":"^1.0.1","@smithy/util-body-length-browser":"^1.0.1","@smithy/util-body-length-node":"^1.0.1","@smithy/util-defaults-mode-browser":"^1.0.1","@smithy/util-defaults-mode-node":"^1.0.1","@smithy/util-retry":"^1.0.1","@smithy/util-utf8":"^1.0.1","fast-xml-parser":"4.2.5","tslib":"^2.5.0"},"devDependencies":{"@aws-sdk/service-client-documentation-generator":"3.310.0","@smithy/service-client-documentation-generator":"^1.0.1","@tsconfig/node14":"1.0.3","@types/node":"^14.14.31","concurrently":"7.0.0","downlevel-dts":"0.10.1","rimraf":"3.0.2","typedoc":"0.23.23","typescript":"~4.9.5"},"engines":{"node":">=14.0.0"},"typesVersions":{"<4.0":{"dist-types/*":["dist-types/ts3.4/*"]}},"files":["dist-*/**"],"author":{"name":"AWS SDK for JavaScript Team","url":"https://aws.amazon.com/javascript/"},"license":"Apache-2.0","browser":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.browser"},"react-native":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.native"},"homepage":"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts","repository":{"type":"git","url":"https://github.com/aws/aws-sdk-js-v3.git","directory":"clients/client-sts"}}');

/***/ }),

/***/ 84996:
/***/ ((module) => {

module.exports = JSON.parse('{"partitions":[{"id":"aws","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","name":"aws","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^(us|eu|ap|sa|ca|me|af)\\\\-\\\\w+\\\\-\\\\d+$","regions":{"af-south-1":{"description":"Africa (Cape Town)"},"ap-east-1":{"description":"Asia Pacific (Hong Kong)"},"ap-northeast-1":{"description":"Asia Pacific (Tokyo)"},"ap-northeast-2":{"description":"Asia Pacific (Seoul)"},"ap-northeast-3":{"description":"Asia Pacific (Osaka)"},"ap-south-1":{"description":"Asia Pacific (Mumbai)"},"ap-south-2":{"description":"Asia Pacific (Hyderabad)"},"ap-southeast-1":{"description":"Asia Pacific (Singapore)"},"ap-southeast-2":{"description":"Asia Pacific (Sydney)"},"ap-southeast-3":{"description":"Asia Pacific (Jakarta)"},"ap-southeast-4":{"description":"Asia Pacific (Melbourne)"},"aws-global":{"description":"AWS Standard global region"},"ca-central-1":{"description":"Canada (Central)"},"eu-central-1":{"description":"Europe (Frankfurt)"},"eu-central-2":{"description":"Europe (Zurich)"},"eu-north-1":{"description":"Europe (Stockholm)"},"eu-south-1":{"description":"Europe (Milan)"},"eu-south-2":{"description":"Europe (Spain)"},"eu-west-1":{"description":"Europe (Ireland)"},"eu-west-2":{"description":"Europe (London)"},"eu-west-3":{"description":"Europe (Paris)"},"me-central-1":{"description":"Middle East (UAE)"},"me-south-1":{"description":"Middle East (Bahrain)"},"sa-east-1":{"description":"South America (Sao Paulo)"},"us-east-1":{"description":"US East (N. Virginia)"},"us-east-2":{"description":"US East (Ohio)"},"us-west-1":{"description":"US West (N. California)"},"us-west-2":{"description":"US West (Oregon)"}}},{"id":"aws-cn","outputs":{"dnsSuffix":"amazonaws.com.cn","dualStackDnsSuffix":"api.amazonwebservices.com.cn","name":"aws-cn","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^cn\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-cn-global":{"description":"AWS China global region"},"cn-north-1":{"description":"China (Beijing)"},"cn-northwest-1":{"description":"China (Ningxia)"}}},{"id":"aws-us-gov","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","name":"aws-us-gov","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-us-gov-global":{"description":"AWS GovCloud (US) global region"},"us-gov-east-1":{"description":"AWS GovCloud (US-East)"},"us-gov-west-1":{"description":"AWS GovCloud (US-West)"}}},{"id":"aws-iso","outputs":{"dnsSuffix":"c2s.ic.gov","dualStackDnsSuffix":"c2s.ic.gov","name":"aws-iso","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-global":{"description":"AWS ISO (US) global region"},"us-iso-east-1":{"description":"US ISO East"},"us-iso-west-1":{"description":"US ISO WEST"}}},{"id":"aws-iso-b","outputs":{"dnsSuffix":"sc2s.sgov.gov","dualStackDnsSuffix":"sc2s.sgov.gov","name":"aws-iso-b","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-b-global":{"description":"AWS ISOB (US) global region"},"us-isob-east-1":{"description":"US ISOB East (Ohio)"}}},{"id":"aws-iso-e","outputs":{"dnsSuffix":"cloud.adc-e.uk","dualStackDnsSuffix":"cloud.adc-e.uk","name":"aws-iso-e","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^eu\\\\-isoe\\\\-\\\\w+\\\\-\\\\d+$","regions":{}},{"id":"aws-iso-f","outputs":{"dnsSuffix":"csp.hci.ic.gov","dualStackDnsSuffix":"csp.hci.ic.gov","name":"aws-iso-f","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isof\\\\-\\\\w+\\\\-\\\\d+$","regions":{}}],"version":"1.1"}');

/***/ })

};
;